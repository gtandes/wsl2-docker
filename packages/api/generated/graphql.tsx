import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string | number; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** ISO8601 Date values */
  Date: { input: Date; output: Date; }
  /** BigInt value */
  GraphQLBigInt: { input: number; output: number; }
  /** A Float or a String */
  GraphQLStringOrFloat: { input: string | number; output: string | number; }
  /** Hashed string values */
  Hash: { input: string; output: string; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: Object; output: Object; }
  /** Represents NULL values */
  Void: { input: void; output: void; }
};

export enum EventEnum {
  Create = 'create',
  Delete = 'delete',
  Update = 'update'
}

export type Mutation = {
  __typename?: 'Mutation';
  auth_login?: Maybe<Auth_Tokens>;
  auth_logout?: Maybe<Scalars['Boolean']['output']>;
  auth_password_request?: Maybe<Scalars['Boolean']['output']>;
  auth_password_reset?: Maybe<Scalars['Boolean']['output']>;
  auth_refresh?: Maybe<Auth_Tokens>;
  create_agencies_item?: Maybe<Agencies>;
  create_agencies_items: Array<Agencies>;
  create_ancc_reports_item?: Maybe<Ancc_Reports>;
  create_ancc_reports_items: Array<Ancc_Reports>;
  create_bh_config_item?: Maybe<Bh_Config>;
  create_bh_config_items: Array<Bh_Config>;
  create_bundles_item?: Maybe<Bundles>;
  create_bundles_items: Array<Bundles>;
  create_categories_item?: Maybe<Categories>;
  create_categories_items: Array<Categories>;
  create_collections_item?: Maybe<Directus_Collections>;
  create_comment?: Maybe<Directus_Activity>;
  create_dashboards_item?: Maybe<Directus_Dashboards>;
  create_dashboards_items: Array<Directus_Dashboards>;
  create_data_migration_mappings_item?: Maybe<Data_Migration_Mappings>;
  create_data_migration_mappings_items: Array<Data_Migration_Mappings>;
  create_data_migration_records_item?: Maybe<Data_Migration_Records>;
  create_data_migration_records_items: Array<Data_Migration_Records>;
  create_data_migrations_item?: Maybe<Data_Migrations>;
  create_data_migrations_items: Array<Data_Migrations>;
  create_departments_item?: Maybe<Departments>;
  create_departments_items: Array<Departments>;
  create_documents_item?: Maybe<Documents>;
  create_documents_items: Array<Documents>;
  create_exam_results_item?: Maybe<Exam_Results>;
  create_exam_results_items: Array<Exam_Results>;
  create_exam_versions_item?: Maybe<Exam_Versions>;
  create_exam_versions_items: Array<Exam_Versions>;
  create_exams_item?: Maybe<Exams>;
  create_exams_items: Array<Exams>;
  create_feature_flags_item?: Maybe<Feature_Flags>;
  create_feature_flags_items: Array<Feature_Flags>;
  create_fields_item?: Maybe<Directus_Fields>;
  create_files_item?: Maybe<Directus_Files>;
  create_files_items: Array<Directus_Files>;
  create_flows_item?: Maybe<Directus_Flows>;
  create_flows_items: Array<Directus_Flows>;
  create_folders_item?: Maybe<Directus_Folders>;
  create_folders_items: Array<Directus_Folders>;
  create_iframe_tokens_item?: Maybe<Iframe_Tokens>;
  create_iframe_tokens_items: Array<Iframe_Tokens>;
  create_junction_bundles_documents_item?: Maybe<Junction_Bundles_Documents>;
  create_junction_bundles_documents_items: Array<Junction_Bundles_Documents>;
  create_junction_bundles_exams_item?: Maybe<Junction_Bundles_Exams>;
  create_junction_bundles_exams_items: Array<Junction_Bundles_Exams>;
  create_junction_bundles_modules_definition_item?: Maybe<Junction_Bundles_Modules_Definition>;
  create_junction_bundles_modules_definition_items: Array<Junction_Bundles_Modules_Definition>;
  create_junction_bundles_policies_item?: Maybe<Junction_Bundles_Policies>;
  create_junction_bundles_policies_items: Array<Junction_Bundles_Policies>;
  create_junction_bundles_sc_definitions_item?: Maybe<Junction_Bundles_Sc_Definitions>;
  create_junction_bundles_sc_definitions_items: Array<Junction_Bundles_Sc_Definitions>;
  create_junction_directus_users_agencies_departments_item?: Maybe<Junction_Directus_Users_Agencies_Departments>;
  create_junction_directus_users_agencies_departments_items: Array<Junction_Directus_Users_Agencies_Departments>;
  create_junction_directus_users_agencies_item?: Maybe<Junction_Directus_Users_Agencies>;
  create_junction_directus_users_agencies_items: Array<Junction_Directus_Users_Agencies>;
  create_junction_directus_users_agencies_locations_item?: Maybe<Junction_Directus_Users_Agencies_Locations>;
  create_junction_directus_users_agencies_locations_items: Array<Junction_Directus_Users_Agencies_Locations>;
  create_junction_directus_users_agencies_specialties_item?: Maybe<Junction_Directus_Users_Agencies_Specialties>;
  create_junction_directus_users_agencies_specialties_items: Array<Junction_Directus_Users_Agencies_Specialties>;
  create_junction_directus_users_agencies_supervisors_item?: Maybe<Junction_Directus_Users_Agencies_Supervisors>;
  create_junction_directus_users_agencies_supervisors_items: Array<Junction_Directus_Users_Agencies_Supervisors>;
  create_junction_directus_users_documents_item?: Maybe<Junction_Directus_Users_Documents>;
  create_junction_directus_users_documents_items: Array<Junction_Directus_Users_Documents>;
  create_junction_directus_users_exams_item?: Maybe<Junction_Directus_Users_Exams>;
  create_junction_directus_users_exams_items: Array<Junction_Directus_Users_Exams>;
  create_junction_directus_users_policies_item?: Maybe<Junction_Directus_Users_Policies>;
  create_junction_directus_users_policies_items: Array<Junction_Directus_Users_Policies>;
  create_junction_documents_agencies_item?: Maybe<Junction_Documents_Agencies>;
  create_junction_documents_agencies_items: Array<Junction_Documents_Agencies>;
  create_junction_documents_categories_item?: Maybe<Junction_Documents_Categories>;
  create_junction_documents_categories_items: Array<Junction_Documents_Categories>;
  create_junction_exam_versions_questions_item?: Maybe<Junction_Exam_Versions_Questions>;
  create_junction_exam_versions_questions_items: Array<Junction_Exam_Versions_Questions>;
  create_junction_exams_agencies_item?: Maybe<Junction_Exams_Agencies>;
  create_junction_exams_agencies_items: Array<Junction_Exams_Agencies>;
  create_junction_exams_categories_specialties_item?: Maybe<Junction_Exams_Categories_Specialties>;
  create_junction_exams_categories_specialties_items: Array<Junction_Exams_Categories_Specialties>;
  create_junction_exams_categories_subspecialties_item?: Maybe<Junction_Exams_Categories_Subspecialties>;
  create_junction_exams_categories_subspecialties_items: Array<Junction_Exams_Categories_Subspecialties>;
  create_junction_modules_definition_agencies_item?: Maybe<Junction_Modules_Definition_Agencies>;
  create_junction_modules_definition_agencies_items: Array<Junction_Modules_Definition_Agencies>;
  create_junction_modules_definition_directus_users_item?: Maybe<Junction_Modules_Definition_Directus_Users>;
  create_junction_modules_definition_directus_users_items: Array<Junction_Modules_Definition_Directus_Users>;
  create_junction_policies_agencies_item?: Maybe<Junction_Policies_Agencies>;
  create_junction_policies_agencies_items: Array<Junction_Policies_Agencies>;
  create_junction_policies_categories_item?: Maybe<Junction_Policies_Categories>;
  create_junction_policies_categories_items: Array<Junction_Policies_Categories>;
  create_junction_sc_definitions_agencies_item?: Maybe<Junction_Sc_Definitions_Agencies>;
  create_junction_sc_definitions_agencies_items: Array<Junction_Sc_Definitions_Agencies>;
  create_junction_sc_definitions_directus_users_item?: Maybe<Junction_Sc_Definitions_Directus_Users>;
  create_junction_sc_definitions_directus_users_items: Array<Junction_Sc_Definitions_Directus_Users>;
  create_locations_item?: Maybe<Locations>;
  create_locations_items: Array<Locations>;
  create_maintenance_windows_item?: Maybe<Maintenance_Windows>;
  create_maintenance_windows_items: Array<Maintenance_Windows>;
  create_modules_definition_item?: Maybe<Modules_Definition>;
  create_modules_definition_items: Array<Modules_Definition>;
  create_modules_results_item?: Maybe<Modules_Results>;
  create_modules_results_items: Array<Modules_Results>;
  create_modules_versions_item?: Maybe<Modules_Versions>;
  create_modules_versions_items: Array<Modules_Versions>;
  create_notifications_item?: Maybe<Directus_Notifications>;
  create_notifications_items: Array<Directus_Notifications>;
  create_operations_item?: Maybe<Directus_Operations>;
  create_operations_items: Array<Directus_Operations>;
  create_panels_item?: Maybe<Directus_Panels>;
  create_panels_items: Array<Directus_Panels>;
  create_permissions_item?: Maybe<Directus_Permissions>;
  create_permissions_items: Array<Directus_Permissions>;
  create_policies_item?: Maybe<Policies>;
  create_policies_items: Array<Policies>;
  create_presets_item?: Maybe<Directus_Presets>;
  create_presets_items: Array<Directus_Presets>;
  create_question_versions_item?: Maybe<Question_Versions>;
  create_question_versions_items: Array<Question_Versions>;
  create_questions_item?: Maybe<Questions>;
  create_questions_items: Array<Questions>;
  create_relations_item?: Maybe<Directus_Relations>;
  create_roles_item?: Maybe<Directus_Roles>;
  create_roles_items: Array<Directus_Roles>;
  create_sc_definitions_item?: Maybe<Sc_Definitions>;
  create_sc_definitions_items: Array<Sc_Definitions>;
  create_sc_versions_item?: Maybe<Sc_Versions>;
  create_sc_versions_items: Array<Sc_Versions>;
  create_shares_item?: Maybe<Directus_Shares>;
  create_shares_items: Array<Directus_Shares>;
  create_specialties_item?: Maybe<Specialties>;
  create_specialties_items: Array<Specialties>;
  create_translations_item?: Maybe<Directus_Translations>;
  create_translations_items: Array<Directus_Translations>;
  create_user_logs_item?: Maybe<User_Logs>;
  create_user_logs_items: Array<User_Logs>;
  create_users_item?: Maybe<Directus_Users>;
  create_users_items: Array<Directus_Users>;
  create_webhooks_item?: Maybe<Directus_Webhooks>;
  create_webhooks_items: Array<Directus_Webhooks>;
  create_webhooks_logs_item?: Maybe<Webhooks_Logs>;
  create_webhooks_logs_items: Array<Webhooks_Logs>;
  delete_agencies_item?: Maybe<Delete_One>;
  delete_agencies_items?: Maybe<Delete_Many>;
  delete_ancc_reports_item?: Maybe<Delete_One>;
  delete_ancc_reports_items?: Maybe<Delete_Many>;
  delete_bh_config_item?: Maybe<Delete_One>;
  delete_bh_config_items?: Maybe<Delete_Many>;
  delete_bundles_item?: Maybe<Delete_One>;
  delete_bundles_items?: Maybe<Delete_Many>;
  delete_categories_item?: Maybe<Delete_One>;
  delete_categories_items?: Maybe<Delete_Many>;
  delete_collections_item?: Maybe<Delete_Collection>;
  delete_comment?: Maybe<Delete_One>;
  delete_dashboards_item?: Maybe<Delete_One>;
  delete_dashboards_items?: Maybe<Delete_Many>;
  delete_data_migration_mappings_item?: Maybe<Delete_One>;
  delete_data_migration_mappings_items?: Maybe<Delete_Many>;
  delete_data_migration_records_item?: Maybe<Delete_One>;
  delete_data_migration_records_items?: Maybe<Delete_Many>;
  delete_data_migrations_item?: Maybe<Delete_One>;
  delete_data_migrations_items?: Maybe<Delete_Many>;
  delete_departments_item?: Maybe<Delete_One>;
  delete_departments_items?: Maybe<Delete_Many>;
  delete_documents_item?: Maybe<Delete_One>;
  delete_documents_items?: Maybe<Delete_Many>;
  delete_exam_results_item?: Maybe<Delete_One>;
  delete_exam_results_items?: Maybe<Delete_Many>;
  delete_exam_versions_item?: Maybe<Delete_One>;
  delete_exam_versions_items?: Maybe<Delete_Many>;
  delete_exams_item?: Maybe<Delete_One>;
  delete_exams_items?: Maybe<Delete_Many>;
  delete_feature_flags_item?: Maybe<Delete_One>;
  delete_feature_flags_items?: Maybe<Delete_Many>;
  delete_fields_item?: Maybe<Delete_Field>;
  delete_files_item?: Maybe<Delete_One>;
  delete_files_items?: Maybe<Delete_Many>;
  delete_flows_item?: Maybe<Delete_One>;
  delete_flows_items?: Maybe<Delete_Many>;
  delete_folders_item?: Maybe<Delete_One>;
  delete_folders_items?: Maybe<Delete_Many>;
  delete_iframe_tokens_item?: Maybe<Delete_One>;
  delete_iframe_tokens_items?: Maybe<Delete_Many>;
  delete_junction_bundles_documents_item?: Maybe<Delete_One>;
  delete_junction_bundles_documents_items?: Maybe<Delete_Many>;
  delete_junction_bundles_exams_item?: Maybe<Delete_One>;
  delete_junction_bundles_exams_items?: Maybe<Delete_Many>;
  delete_junction_bundles_modules_definition_item?: Maybe<Delete_One>;
  delete_junction_bundles_modules_definition_items?: Maybe<Delete_Many>;
  delete_junction_bundles_policies_item?: Maybe<Delete_One>;
  delete_junction_bundles_policies_items?: Maybe<Delete_Many>;
  delete_junction_bundles_sc_definitions_item?: Maybe<Delete_One>;
  delete_junction_bundles_sc_definitions_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_agencies_departments_item?: Maybe<Delete_One>;
  delete_junction_directus_users_agencies_departments_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_agencies_item?: Maybe<Delete_One>;
  delete_junction_directus_users_agencies_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_agencies_locations_item?: Maybe<Delete_One>;
  delete_junction_directus_users_agencies_locations_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_agencies_specialties_item?: Maybe<Delete_One>;
  delete_junction_directus_users_agencies_specialties_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_agencies_supervisors_item?: Maybe<Delete_One>;
  delete_junction_directus_users_agencies_supervisors_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_documents_item?: Maybe<Delete_One>;
  delete_junction_directus_users_documents_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_exams_item?: Maybe<Delete_One>;
  delete_junction_directus_users_exams_items?: Maybe<Delete_Many>;
  delete_junction_directus_users_policies_item?: Maybe<Delete_One>;
  delete_junction_directus_users_policies_items?: Maybe<Delete_Many>;
  delete_junction_documents_agencies_item?: Maybe<Delete_One>;
  delete_junction_documents_agencies_items?: Maybe<Delete_Many>;
  delete_junction_documents_categories_item?: Maybe<Delete_One>;
  delete_junction_documents_categories_items?: Maybe<Delete_Many>;
  delete_junction_exam_versions_questions_item?: Maybe<Delete_One>;
  delete_junction_exam_versions_questions_items?: Maybe<Delete_Many>;
  delete_junction_exams_agencies_item?: Maybe<Delete_One>;
  delete_junction_exams_agencies_items?: Maybe<Delete_Many>;
  delete_junction_exams_categories_specialties_item?: Maybe<Delete_One>;
  delete_junction_exams_categories_specialties_items?: Maybe<Delete_Many>;
  delete_junction_exams_categories_subspecialties_item?: Maybe<Delete_One>;
  delete_junction_exams_categories_subspecialties_items?: Maybe<Delete_Many>;
  delete_junction_modules_definition_agencies_item?: Maybe<Delete_One>;
  delete_junction_modules_definition_agencies_items?: Maybe<Delete_Many>;
  delete_junction_modules_definition_directus_users_item?: Maybe<Delete_One>;
  delete_junction_modules_definition_directus_users_items?: Maybe<Delete_Many>;
  delete_junction_policies_agencies_item?: Maybe<Delete_One>;
  delete_junction_policies_agencies_items?: Maybe<Delete_Many>;
  delete_junction_policies_categories_item?: Maybe<Delete_One>;
  delete_junction_policies_categories_items?: Maybe<Delete_Many>;
  delete_junction_sc_definitions_agencies_item?: Maybe<Delete_One>;
  delete_junction_sc_definitions_agencies_items?: Maybe<Delete_Many>;
  delete_junction_sc_definitions_directus_users_item?: Maybe<Delete_One>;
  delete_junction_sc_definitions_directus_users_items?: Maybe<Delete_Many>;
  delete_locations_item?: Maybe<Delete_One>;
  delete_locations_items?: Maybe<Delete_Many>;
  delete_maintenance_windows_item?: Maybe<Delete_One>;
  delete_maintenance_windows_items?: Maybe<Delete_Many>;
  delete_modules_definition_item?: Maybe<Delete_One>;
  delete_modules_definition_items?: Maybe<Delete_Many>;
  delete_modules_results_item?: Maybe<Delete_One>;
  delete_modules_results_items?: Maybe<Delete_Many>;
  delete_modules_versions_item?: Maybe<Delete_One>;
  delete_modules_versions_items?: Maybe<Delete_Many>;
  delete_notifications_item?: Maybe<Delete_One>;
  delete_notifications_items?: Maybe<Delete_Many>;
  delete_operations_item?: Maybe<Delete_One>;
  delete_operations_items?: Maybe<Delete_Many>;
  delete_panels_item?: Maybe<Delete_One>;
  delete_panels_items?: Maybe<Delete_Many>;
  delete_permissions_item?: Maybe<Delete_One>;
  delete_permissions_items?: Maybe<Delete_Many>;
  delete_policies_item?: Maybe<Delete_One>;
  delete_policies_items?: Maybe<Delete_Many>;
  delete_presets_item?: Maybe<Delete_One>;
  delete_presets_items?: Maybe<Delete_Many>;
  delete_question_versions_item?: Maybe<Delete_One>;
  delete_question_versions_items?: Maybe<Delete_Many>;
  delete_questions_item?: Maybe<Delete_One>;
  delete_questions_items?: Maybe<Delete_Many>;
  delete_relations_item?: Maybe<Delete_Relation>;
  delete_roles_item?: Maybe<Delete_One>;
  delete_roles_items?: Maybe<Delete_Many>;
  delete_sc_definitions_item?: Maybe<Delete_One>;
  delete_sc_definitions_items?: Maybe<Delete_Many>;
  delete_sc_versions_item?: Maybe<Delete_One>;
  delete_sc_versions_items?: Maybe<Delete_Many>;
  delete_shares_item?: Maybe<Delete_One>;
  delete_shares_items?: Maybe<Delete_Many>;
  delete_specialties_item?: Maybe<Delete_One>;
  delete_specialties_items?: Maybe<Delete_Many>;
  delete_translations_item?: Maybe<Delete_One>;
  delete_translations_items?: Maybe<Delete_Many>;
  delete_user_logs_item?: Maybe<Delete_One>;
  delete_user_logs_items?: Maybe<Delete_Many>;
  delete_users_item?: Maybe<Delete_One>;
  delete_users_items?: Maybe<Delete_Many>;
  delete_webhooks_item?: Maybe<Delete_One>;
  delete_webhooks_items?: Maybe<Delete_Many>;
  delete_webhooks_logs_item?: Maybe<Delete_One>;
  delete_webhooks_logs_items?: Maybe<Delete_Many>;
  import_file?: Maybe<Directus_Files>;
  update_agencies_batch: Array<Agencies>;
  update_agencies_item?: Maybe<Agencies>;
  update_agencies_items: Array<Agencies>;
  update_ancc_reports_batch: Array<Ancc_Reports>;
  update_ancc_reports_item?: Maybe<Ancc_Reports>;
  update_ancc_reports_items: Array<Ancc_Reports>;
  update_bh_config_batch: Array<Bh_Config>;
  update_bh_config_item?: Maybe<Bh_Config>;
  update_bh_config_items: Array<Bh_Config>;
  update_bundles_batch: Array<Bundles>;
  update_bundles_item?: Maybe<Bundles>;
  update_bundles_items: Array<Bundles>;
  update_categories_batch: Array<Categories>;
  update_categories_item?: Maybe<Categories>;
  update_categories_items: Array<Categories>;
  update_collections_item?: Maybe<Directus_Collections>;
  update_comment?: Maybe<Directus_Activity>;
  update_dashboards_batch: Array<Directus_Dashboards>;
  update_dashboards_item?: Maybe<Directus_Dashboards>;
  update_dashboards_items: Array<Directus_Dashboards>;
  update_data_migration_mappings_batch: Array<Data_Migration_Mappings>;
  update_data_migration_mappings_item?: Maybe<Data_Migration_Mappings>;
  update_data_migration_mappings_items: Array<Data_Migration_Mappings>;
  update_data_migration_records_batch: Array<Data_Migration_Records>;
  update_data_migration_records_item?: Maybe<Data_Migration_Records>;
  update_data_migration_records_items: Array<Data_Migration_Records>;
  update_data_migrations_batch: Array<Data_Migrations>;
  update_data_migrations_item?: Maybe<Data_Migrations>;
  update_data_migrations_items: Array<Data_Migrations>;
  update_departments_batch: Array<Departments>;
  update_departments_item?: Maybe<Departments>;
  update_departments_items: Array<Departments>;
  update_documents_batch: Array<Documents>;
  update_documents_item?: Maybe<Documents>;
  update_documents_items: Array<Documents>;
  update_exam_results_batch: Array<Exam_Results>;
  update_exam_results_item?: Maybe<Exam_Results>;
  update_exam_results_items: Array<Exam_Results>;
  update_exam_versions_batch: Array<Exam_Versions>;
  update_exam_versions_item?: Maybe<Exam_Versions>;
  update_exam_versions_items: Array<Exam_Versions>;
  update_exams_batch: Array<Exams>;
  update_exams_item?: Maybe<Exams>;
  update_exams_items: Array<Exams>;
  update_feature_flags_batch: Array<Feature_Flags>;
  update_feature_flags_item?: Maybe<Feature_Flags>;
  update_feature_flags_items: Array<Feature_Flags>;
  update_fields_item?: Maybe<Directus_Fields>;
  update_files_batch: Array<Directus_Files>;
  update_files_item?: Maybe<Directus_Files>;
  update_files_items: Array<Directus_Files>;
  update_flows_batch: Array<Directus_Flows>;
  update_flows_item?: Maybe<Directus_Flows>;
  update_flows_items: Array<Directus_Flows>;
  update_folders_batch: Array<Directus_Folders>;
  update_folders_item?: Maybe<Directus_Folders>;
  update_folders_items: Array<Directus_Folders>;
  update_iframe_tokens_batch: Array<Iframe_Tokens>;
  update_iframe_tokens_item?: Maybe<Iframe_Tokens>;
  update_iframe_tokens_items: Array<Iframe_Tokens>;
  update_junction_bundles_documents_batch: Array<Junction_Bundles_Documents>;
  update_junction_bundles_documents_item?: Maybe<Junction_Bundles_Documents>;
  update_junction_bundles_documents_items: Array<Junction_Bundles_Documents>;
  update_junction_bundles_exams_batch: Array<Junction_Bundles_Exams>;
  update_junction_bundles_exams_item?: Maybe<Junction_Bundles_Exams>;
  update_junction_bundles_exams_items: Array<Junction_Bundles_Exams>;
  update_junction_bundles_modules_definition_batch: Array<Junction_Bundles_Modules_Definition>;
  update_junction_bundles_modules_definition_item?: Maybe<Junction_Bundles_Modules_Definition>;
  update_junction_bundles_modules_definition_items: Array<Junction_Bundles_Modules_Definition>;
  update_junction_bundles_policies_batch: Array<Junction_Bundles_Policies>;
  update_junction_bundles_policies_item?: Maybe<Junction_Bundles_Policies>;
  update_junction_bundles_policies_items: Array<Junction_Bundles_Policies>;
  update_junction_bundles_sc_definitions_batch: Array<Junction_Bundles_Sc_Definitions>;
  update_junction_bundles_sc_definitions_item?: Maybe<Junction_Bundles_Sc_Definitions>;
  update_junction_bundles_sc_definitions_items: Array<Junction_Bundles_Sc_Definitions>;
  update_junction_directus_users_agencies_batch: Array<Junction_Directus_Users_Agencies>;
  update_junction_directus_users_agencies_departments_batch: Array<Junction_Directus_Users_Agencies_Departments>;
  update_junction_directus_users_agencies_departments_item?: Maybe<Junction_Directus_Users_Agencies_Departments>;
  update_junction_directus_users_agencies_departments_items: Array<Junction_Directus_Users_Agencies_Departments>;
  update_junction_directus_users_agencies_item?: Maybe<Junction_Directus_Users_Agencies>;
  update_junction_directus_users_agencies_items: Array<Junction_Directus_Users_Agencies>;
  update_junction_directus_users_agencies_locations_batch: Array<Junction_Directus_Users_Agencies_Locations>;
  update_junction_directus_users_agencies_locations_item?: Maybe<Junction_Directus_Users_Agencies_Locations>;
  update_junction_directus_users_agencies_locations_items: Array<Junction_Directus_Users_Agencies_Locations>;
  update_junction_directus_users_agencies_specialties_batch: Array<Junction_Directus_Users_Agencies_Specialties>;
  update_junction_directus_users_agencies_specialties_item?: Maybe<Junction_Directus_Users_Agencies_Specialties>;
  update_junction_directus_users_agencies_specialties_items: Array<Junction_Directus_Users_Agencies_Specialties>;
  update_junction_directus_users_agencies_supervisors_batch: Array<Junction_Directus_Users_Agencies_Supervisors>;
  update_junction_directus_users_agencies_supervisors_item?: Maybe<Junction_Directus_Users_Agencies_Supervisors>;
  update_junction_directus_users_agencies_supervisors_items: Array<Junction_Directus_Users_Agencies_Supervisors>;
  update_junction_directus_users_documents_batch: Array<Junction_Directus_Users_Documents>;
  update_junction_directus_users_documents_item?: Maybe<Junction_Directus_Users_Documents>;
  update_junction_directus_users_documents_items: Array<Junction_Directus_Users_Documents>;
  update_junction_directus_users_exams_batch: Array<Junction_Directus_Users_Exams>;
  update_junction_directus_users_exams_item?: Maybe<Junction_Directus_Users_Exams>;
  update_junction_directus_users_exams_items: Array<Junction_Directus_Users_Exams>;
  update_junction_directus_users_policies_batch: Array<Junction_Directus_Users_Policies>;
  update_junction_directus_users_policies_item?: Maybe<Junction_Directus_Users_Policies>;
  update_junction_directus_users_policies_items: Array<Junction_Directus_Users_Policies>;
  update_junction_documents_agencies_batch: Array<Junction_Documents_Agencies>;
  update_junction_documents_agencies_item?: Maybe<Junction_Documents_Agencies>;
  update_junction_documents_agencies_items: Array<Junction_Documents_Agencies>;
  update_junction_documents_categories_batch: Array<Junction_Documents_Categories>;
  update_junction_documents_categories_item?: Maybe<Junction_Documents_Categories>;
  update_junction_documents_categories_items: Array<Junction_Documents_Categories>;
  update_junction_exam_versions_questions_batch: Array<Junction_Exam_Versions_Questions>;
  update_junction_exam_versions_questions_item?: Maybe<Junction_Exam_Versions_Questions>;
  update_junction_exam_versions_questions_items: Array<Junction_Exam_Versions_Questions>;
  update_junction_exams_agencies_batch: Array<Junction_Exams_Agencies>;
  update_junction_exams_agencies_item?: Maybe<Junction_Exams_Agencies>;
  update_junction_exams_agencies_items: Array<Junction_Exams_Agencies>;
  update_junction_exams_categories_specialties_batch: Array<Junction_Exams_Categories_Specialties>;
  update_junction_exams_categories_specialties_item?: Maybe<Junction_Exams_Categories_Specialties>;
  update_junction_exams_categories_specialties_items: Array<Junction_Exams_Categories_Specialties>;
  update_junction_exams_categories_subspecialties_batch: Array<Junction_Exams_Categories_Subspecialties>;
  update_junction_exams_categories_subspecialties_item?: Maybe<Junction_Exams_Categories_Subspecialties>;
  update_junction_exams_categories_subspecialties_items: Array<Junction_Exams_Categories_Subspecialties>;
  update_junction_modules_definition_agencies_batch: Array<Junction_Modules_Definition_Agencies>;
  update_junction_modules_definition_agencies_item?: Maybe<Junction_Modules_Definition_Agencies>;
  update_junction_modules_definition_agencies_items: Array<Junction_Modules_Definition_Agencies>;
  update_junction_modules_definition_directus_users_batch: Array<Junction_Modules_Definition_Directus_Users>;
  update_junction_modules_definition_directus_users_item?: Maybe<Junction_Modules_Definition_Directus_Users>;
  update_junction_modules_definition_directus_users_items: Array<Junction_Modules_Definition_Directus_Users>;
  update_junction_policies_agencies_batch: Array<Junction_Policies_Agencies>;
  update_junction_policies_agencies_item?: Maybe<Junction_Policies_Agencies>;
  update_junction_policies_agencies_items: Array<Junction_Policies_Agencies>;
  update_junction_policies_categories_batch: Array<Junction_Policies_Categories>;
  update_junction_policies_categories_item?: Maybe<Junction_Policies_Categories>;
  update_junction_policies_categories_items: Array<Junction_Policies_Categories>;
  update_junction_sc_definitions_agencies_batch: Array<Junction_Sc_Definitions_Agencies>;
  update_junction_sc_definitions_agencies_item?: Maybe<Junction_Sc_Definitions_Agencies>;
  update_junction_sc_definitions_agencies_items: Array<Junction_Sc_Definitions_Agencies>;
  update_junction_sc_definitions_directus_users_batch: Array<Junction_Sc_Definitions_Directus_Users>;
  update_junction_sc_definitions_directus_users_item?: Maybe<Junction_Sc_Definitions_Directus_Users>;
  update_junction_sc_definitions_directus_users_items: Array<Junction_Sc_Definitions_Directus_Users>;
  update_locations_batch: Array<Locations>;
  update_locations_item?: Maybe<Locations>;
  update_locations_items: Array<Locations>;
  update_maintenance_windows_batch: Array<Maintenance_Windows>;
  update_maintenance_windows_item?: Maybe<Maintenance_Windows>;
  update_maintenance_windows_items: Array<Maintenance_Windows>;
  update_modules_definition_batch: Array<Modules_Definition>;
  update_modules_definition_item?: Maybe<Modules_Definition>;
  update_modules_definition_items: Array<Modules_Definition>;
  update_modules_results_batch: Array<Modules_Results>;
  update_modules_results_item?: Maybe<Modules_Results>;
  update_modules_results_items: Array<Modules_Results>;
  update_modules_versions_batch: Array<Modules_Versions>;
  update_modules_versions_item?: Maybe<Modules_Versions>;
  update_modules_versions_items: Array<Modules_Versions>;
  update_notifications_batch: Array<Directus_Notifications>;
  update_notifications_item?: Maybe<Directus_Notifications>;
  update_notifications_items: Array<Directus_Notifications>;
  update_operations_batch: Array<Directus_Operations>;
  update_operations_item?: Maybe<Directus_Operations>;
  update_operations_items: Array<Directus_Operations>;
  update_panels_batch: Array<Directus_Panels>;
  update_panels_item?: Maybe<Directus_Panels>;
  update_panels_items: Array<Directus_Panels>;
  update_permissions_batch: Array<Directus_Permissions>;
  update_permissions_item?: Maybe<Directus_Permissions>;
  update_permissions_items: Array<Directus_Permissions>;
  update_policies_batch: Array<Policies>;
  update_policies_item?: Maybe<Policies>;
  update_policies_items: Array<Policies>;
  update_presets_batch: Array<Directus_Presets>;
  update_presets_item?: Maybe<Directus_Presets>;
  update_presets_items: Array<Directus_Presets>;
  update_question_versions_batch: Array<Question_Versions>;
  update_question_versions_item?: Maybe<Question_Versions>;
  update_question_versions_items: Array<Question_Versions>;
  update_questions_batch: Array<Questions>;
  update_questions_item?: Maybe<Questions>;
  update_questions_items: Array<Questions>;
  update_relations_item?: Maybe<Directus_Relations>;
  update_roles_batch: Array<Directus_Roles>;
  update_roles_item?: Maybe<Directus_Roles>;
  update_roles_items: Array<Directus_Roles>;
  update_sc_definitions_batch: Array<Sc_Definitions>;
  update_sc_definitions_item?: Maybe<Sc_Definitions>;
  update_sc_definitions_items: Array<Sc_Definitions>;
  update_sc_versions_batch: Array<Sc_Versions>;
  update_sc_versions_item?: Maybe<Sc_Versions>;
  update_sc_versions_items: Array<Sc_Versions>;
  update_settings?: Maybe<Directus_Settings>;
  update_shares_batch: Array<Directus_Shares>;
  update_shares_item?: Maybe<Directus_Shares>;
  update_shares_items: Array<Directus_Shares>;
  update_specialties_batch: Array<Specialties>;
  update_specialties_item?: Maybe<Specialties>;
  update_specialties_items: Array<Specialties>;
  update_translations_batch: Array<Directus_Translations>;
  update_translations_item?: Maybe<Directus_Translations>;
  update_translations_items: Array<Directus_Translations>;
  update_user_logs_batch: Array<User_Logs>;
  update_user_logs_item?: Maybe<User_Logs>;
  update_user_logs_items: Array<User_Logs>;
  update_users_batch: Array<Directus_Users>;
  update_users_item?: Maybe<Directus_Users>;
  update_users_items: Array<Directus_Users>;
  update_users_me?: Maybe<Directus_Users>;
  update_webhooks_batch: Array<Directus_Webhooks>;
  update_webhooks_item?: Maybe<Directus_Webhooks>;
  update_webhooks_items: Array<Directus_Webhooks>;
  update_webhooks_logs_batch: Array<Webhooks_Logs>;
  update_webhooks_logs_item?: Maybe<Webhooks_Logs>;
  update_webhooks_logs_items: Array<Webhooks_Logs>;
  users_invite?: Maybe<Scalars['Boolean']['output']>;
  users_invite_accept?: Maybe<Scalars['Boolean']['output']>;
  users_me_tfa_disable?: Maybe<Scalars['Boolean']['output']>;
  users_me_tfa_enable?: Maybe<Scalars['Boolean']['output']>;
  users_me_tfa_generate?: Maybe<Users_Me_Tfa_Generate_Data>;
  utils_cache_clear?: Maybe<Scalars['Void']['output']>;
  utils_hash_generate?: Maybe<Scalars['String']['output']>;
  utils_hash_verify?: Maybe<Scalars['Boolean']['output']>;
  utils_random_string?: Maybe<Scalars['String']['output']>;
  utils_revert?: Maybe<Scalars['Boolean']['output']>;
  utils_sort?: Maybe<Scalars['Boolean']['output']>;
};


export type MutationAuth_LoginArgs = {
  email: Scalars['String']['input'];
  mode?: InputMaybe<Auth_Mode>;
  otp?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
};


export type MutationAuth_LogoutArgs = {
  refresh_token?: InputMaybe<Scalars['String']['input']>;
};


export type MutationAuth_Password_RequestArgs = {
  email: Scalars['String']['input'];
  reset_url?: InputMaybe<Scalars['String']['input']>;
};


export type MutationAuth_Password_ResetArgs = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type MutationAuth_RefreshArgs = {
  mode?: InputMaybe<Auth_Mode>;
  refresh_token?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreate_Agencies_ItemArgs = {
  data: Create_Agencies_Input;
};


export type MutationCreate_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Agencies_Input>>;
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Ancc_Reports_ItemArgs = {
  data: Create_Ancc_Reports_Input;
};


export type MutationCreate_Ancc_Reports_ItemsArgs = {
  data?: InputMaybe<Array<Create_Ancc_Reports_Input>>;
  filter?: InputMaybe<Ancc_Reports_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Bh_Config_ItemArgs = {
  data: Create_Bh_Config_Input;
};


export type MutationCreate_Bh_Config_ItemsArgs = {
  data?: InputMaybe<Array<Create_Bh_Config_Input>>;
  filter?: InputMaybe<Bh_Config_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Bundles_ItemArgs = {
  data: Create_Bundles_Input;
};


export type MutationCreate_Bundles_ItemsArgs = {
  data?: InputMaybe<Array<Create_Bundles_Input>>;
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Categories_ItemArgs = {
  data: Create_Categories_Input;
};


export type MutationCreate_Categories_ItemsArgs = {
  data?: InputMaybe<Array<Create_Categories_Input>>;
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Collections_ItemArgs = {
  data: Create_Directus_Collections_Input;
};


export type MutationCreate_CommentArgs = {
  collection: Scalars['String']['input'];
  comment: Scalars['String']['input'];
  item: Scalars['ID']['input'];
};


export type MutationCreate_Dashboards_ItemArgs = {
  data: Create_Directus_Dashboards_Input;
};


export type MutationCreate_Dashboards_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Dashboards_Input>>;
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Data_Migration_Mappings_ItemArgs = {
  data: Create_Data_Migration_Mappings_Input;
};


export type MutationCreate_Data_Migration_Mappings_ItemsArgs = {
  data?: InputMaybe<Array<Create_Data_Migration_Mappings_Input>>;
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Data_Migration_Records_ItemArgs = {
  data: Create_Data_Migration_Records_Input;
};


export type MutationCreate_Data_Migration_Records_ItemsArgs = {
  data?: InputMaybe<Array<Create_Data_Migration_Records_Input>>;
  filter?: InputMaybe<Data_Migration_Records_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Data_Migrations_ItemArgs = {
  data: Create_Data_Migrations_Input;
};


export type MutationCreate_Data_Migrations_ItemsArgs = {
  data?: InputMaybe<Array<Create_Data_Migrations_Input>>;
  filter?: InputMaybe<Data_Migrations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Departments_ItemArgs = {
  data: Create_Departments_Input;
};


export type MutationCreate_Departments_ItemsArgs = {
  data?: InputMaybe<Array<Create_Departments_Input>>;
  filter?: InputMaybe<Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Documents_ItemArgs = {
  data: Create_Documents_Input;
};


export type MutationCreate_Documents_ItemsArgs = {
  data?: InputMaybe<Array<Create_Documents_Input>>;
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Exam_Results_ItemArgs = {
  data: Create_Exam_Results_Input;
};


export type MutationCreate_Exam_Results_ItemsArgs = {
  data?: InputMaybe<Array<Create_Exam_Results_Input>>;
  filter?: InputMaybe<Exam_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Exam_Versions_ItemArgs = {
  data: Create_Exam_Versions_Input;
};


export type MutationCreate_Exam_Versions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Exam_Versions_Input>>;
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Exams_ItemArgs = {
  data: Create_Exams_Input;
};


export type MutationCreate_Exams_ItemsArgs = {
  data?: InputMaybe<Array<Create_Exams_Input>>;
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Feature_Flags_ItemArgs = {
  data: Create_Feature_Flags_Input;
};


export type MutationCreate_Feature_Flags_ItemsArgs = {
  data?: InputMaybe<Array<Create_Feature_Flags_Input>>;
  filter?: InputMaybe<Feature_Flags_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Fields_ItemArgs = {
  collection: Scalars['String']['input'];
  data: Create_Directus_Fields_Input;
};


export type MutationCreate_Files_ItemArgs = {
  data: Create_Directus_Files_Input;
};


export type MutationCreate_Files_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Files_Input>>;
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Flows_ItemArgs = {
  data: Create_Directus_Flows_Input;
};


export type MutationCreate_Flows_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Flows_Input>>;
  filter?: InputMaybe<Directus_Flows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Folders_ItemArgs = {
  data: Create_Directus_Folders_Input;
};


export type MutationCreate_Folders_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Folders_Input>>;
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Iframe_Tokens_ItemArgs = {
  data: Create_Iframe_Tokens_Input;
};


export type MutationCreate_Iframe_Tokens_ItemsArgs = {
  data?: InputMaybe<Array<Create_Iframe_Tokens_Input>>;
  filter?: InputMaybe<Iframe_Tokens_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Bundles_Documents_ItemArgs = {
  data: Create_Junction_Bundles_Documents_Input;
};


export type MutationCreate_Junction_Bundles_Documents_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Bundles_Documents_Input>>;
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Bundles_Exams_ItemArgs = {
  data: Create_Junction_Bundles_Exams_Input;
};


export type MutationCreate_Junction_Bundles_Exams_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Bundles_Exams_Input>>;
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Bundles_Modules_Definition_ItemArgs = {
  data: Create_Junction_Bundles_Modules_Definition_Input;
};


export type MutationCreate_Junction_Bundles_Modules_Definition_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Bundles_Modules_Definition_Input>>;
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Bundles_Policies_ItemArgs = {
  data: Create_Junction_Bundles_Policies_Input;
};


export type MutationCreate_Junction_Bundles_Policies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Bundles_Policies_Input>>;
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Bundles_Sc_Definitions_ItemArgs = {
  data: Create_Junction_Bundles_Sc_Definitions_Input;
};


export type MutationCreate_Junction_Bundles_Sc_Definitions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Bundles_Sc_Definitions_Input>>;
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Departments_ItemArgs = {
  data: Create_Junction_Directus_Users_Agencies_Departments_Input;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Departments_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Agencies_Departments_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Agencies_ItemArgs = {
  data: Create_Junction_Directus_Users_Agencies_Input;
};


export type MutationCreate_Junction_Directus_Users_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Agencies_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Locations_ItemArgs = {
  data: Create_Junction_Directus_Users_Agencies_Locations_Input;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Locations_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Agencies_Locations_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Specialties_ItemArgs = {
  data: Create_Junction_Directus_Users_Agencies_Specialties_Input;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Specialties_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Agencies_Specialties_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Supervisors_ItemArgs = {
  data: Create_Junction_Directus_Users_Agencies_Supervisors_Input;
};


export type MutationCreate_Junction_Directus_Users_Agencies_Supervisors_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Agencies_Supervisors_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Documents_ItemArgs = {
  data: Create_Junction_Directus_Users_Documents_Input;
};


export type MutationCreate_Junction_Directus_Users_Documents_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Documents_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Exams_ItemArgs = {
  data: Create_Junction_Directus_Users_Exams_Input;
};


export type MutationCreate_Junction_Directus_Users_Exams_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Exams_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Directus_Users_Policies_ItemArgs = {
  data: Create_Junction_Directus_Users_Policies_Input;
};


export type MutationCreate_Junction_Directus_Users_Policies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Directus_Users_Policies_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Documents_Agencies_ItemArgs = {
  data: Create_Junction_Documents_Agencies_Input;
};


export type MutationCreate_Junction_Documents_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Documents_Agencies_Input>>;
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Documents_Categories_ItemArgs = {
  data: Create_Junction_Documents_Categories_Input;
};


export type MutationCreate_Junction_Documents_Categories_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Documents_Categories_Input>>;
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Exam_Versions_Questions_ItemArgs = {
  data: Create_Junction_Exam_Versions_Questions_Input;
};


export type MutationCreate_Junction_Exam_Versions_Questions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Exam_Versions_Questions_Input>>;
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Exams_Agencies_ItemArgs = {
  data: Create_Junction_Exams_Agencies_Input;
};


export type MutationCreate_Junction_Exams_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Exams_Agencies_Input>>;
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Exams_Categories_Specialties_ItemArgs = {
  data: Create_Junction_Exams_Categories_Specialties_Input;
};


export type MutationCreate_Junction_Exams_Categories_Specialties_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Exams_Categories_Specialties_Input>>;
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Exams_Categories_Subspecialties_ItemArgs = {
  data: Create_Junction_Exams_Categories_Subspecialties_Input;
};


export type MutationCreate_Junction_Exams_Categories_Subspecialties_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Exams_Categories_Subspecialties_Input>>;
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Modules_Definition_Agencies_ItemArgs = {
  data: Create_Junction_Modules_Definition_Agencies_Input;
};


export type MutationCreate_Junction_Modules_Definition_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Modules_Definition_Agencies_Input>>;
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Modules_Definition_Directus_Users_ItemArgs = {
  data: Create_Junction_Modules_Definition_Directus_Users_Input;
};


export type MutationCreate_Junction_Modules_Definition_Directus_Users_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Modules_Definition_Directus_Users_Input>>;
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Policies_Agencies_ItemArgs = {
  data: Create_Junction_Policies_Agencies_Input;
};


export type MutationCreate_Junction_Policies_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Policies_Agencies_Input>>;
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Policies_Categories_ItemArgs = {
  data: Create_Junction_Policies_Categories_Input;
};


export type MutationCreate_Junction_Policies_Categories_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Policies_Categories_Input>>;
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Sc_Definitions_Agencies_ItemArgs = {
  data: Create_Junction_Sc_Definitions_Agencies_Input;
};


export type MutationCreate_Junction_Sc_Definitions_Agencies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Sc_Definitions_Agencies_Input>>;
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Junction_Sc_Definitions_Directus_Users_ItemArgs = {
  data: Create_Junction_Sc_Definitions_Directus_Users_Input;
};


export type MutationCreate_Junction_Sc_Definitions_Directus_Users_ItemsArgs = {
  data?: InputMaybe<Array<Create_Junction_Sc_Definitions_Directus_Users_Input>>;
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Locations_ItemArgs = {
  data: Create_Locations_Input;
};


export type MutationCreate_Locations_ItemsArgs = {
  data?: InputMaybe<Array<Create_Locations_Input>>;
  filter?: InputMaybe<Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Maintenance_Windows_ItemArgs = {
  data: Create_Maintenance_Windows_Input;
};


export type MutationCreate_Maintenance_Windows_ItemsArgs = {
  data?: InputMaybe<Array<Create_Maintenance_Windows_Input>>;
  filter?: InputMaybe<Maintenance_Windows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Modules_Definition_ItemArgs = {
  data: Create_Modules_Definition_Input;
};


export type MutationCreate_Modules_Definition_ItemsArgs = {
  data?: InputMaybe<Array<Create_Modules_Definition_Input>>;
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Modules_Results_ItemArgs = {
  data: Create_Modules_Results_Input;
};


export type MutationCreate_Modules_Results_ItemsArgs = {
  data?: InputMaybe<Array<Create_Modules_Results_Input>>;
  filter?: InputMaybe<Modules_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Modules_Versions_ItemArgs = {
  data: Create_Modules_Versions_Input;
};


export type MutationCreate_Modules_Versions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Modules_Versions_Input>>;
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Notifications_ItemArgs = {
  data: Create_Directus_Notifications_Input;
};


export type MutationCreate_Notifications_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Notifications_Input>>;
  filter?: InputMaybe<Directus_Notifications_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Operations_ItemArgs = {
  data: Create_Directus_Operations_Input;
};


export type MutationCreate_Operations_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Operations_Input>>;
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Panels_ItemArgs = {
  data: Create_Directus_Panels_Input;
};


export type MutationCreate_Panels_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Panels_Input>>;
  filter?: InputMaybe<Directus_Panels_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Permissions_ItemArgs = {
  data: Create_Directus_Permissions_Input;
};


export type MutationCreate_Permissions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Permissions_Input>>;
  filter?: InputMaybe<Directus_Permissions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Policies_ItemArgs = {
  data: Create_Policies_Input;
};


export type MutationCreate_Policies_ItemsArgs = {
  data?: InputMaybe<Array<Create_Policies_Input>>;
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Presets_ItemArgs = {
  data: Create_Directus_Presets_Input;
};


export type MutationCreate_Presets_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Presets_Input>>;
  filter?: InputMaybe<Directus_Presets_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Question_Versions_ItemArgs = {
  data: Create_Question_Versions_Input;
};


export type MutationCreate_Question_Versions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Question_Versions_Input>>;
  filter?: InputMaybe<Question_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Questions_ItemArgs = {
  data: Create_Questions_Input;
};


export type MutationCreate_Questions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Questions_Input>>;
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Relations_ItemArgs = {
  data: Create_Directus_Relations_Input;
};


export type MutationCreate_Roles_ItemArgs = {
  data: Create_Directus_Roles_Input;
};


export type MutationCreate_Roles_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Roles_Input>>;
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Sc_Definitions_ItemArgs = {
  data: Create_Sc_Definitions_Input;
};


export type MutationCreate_Sc_Definitions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Sc_Definitions_Input>>;
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Sc_Versions_ItemArgs = {
  data: Create_Sc_Versions_Input;
};


export type MutationCreate_Sc_Versions_ItemsArgs = {
  data?: InputMaybe<Array<Create_Sc_Versions_Input>>;
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Shares_ItemArgs = {
  data: Create_Directus_Shares_Input;
};


export type MutationCreate_Shares_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Shares_Input>>;
  filter?: InputMaybe<Directus_Shares_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Specialties_ItemArgs = {
  data: Create_Specialties_Input;
};


export type MutationCreate_Specialties_ItemsArgs = {
  data?: InputMaybe<Array<Create_Specialties_Input>>;
  filter?: InputMaybe<Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Translations_ItemArgs = {
  data: Create_Directus_Translations_Input;
};


export type MutationCreate_Translations_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Translations_Input>>;
  filter?: InputMaybe<Directus_Translations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_User_Logs_ItemArgs = {
  data: Create_User_Logs_Input;
};


export type MutationCreate_User_Logs_ItemsArgs = {
  data?: InputMaybe<Array<Create_User_Logs_Input>>;
  filter?: InputMaybe<User_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Users_ItemArgs = {
  data: Create_Directus_Users_Input;
};


export type MutationCreate_Users_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Users_Input>>;
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Webhooks_ItemArgs = {
  data: Create_Directus_Webhooks_Input;
};


export type MutationCreate_Webhooks_ItemsArgs = {
  data?: InputMaybe<Array<Create_Directus_Webhooks_Input>>;
  filter?: InputMaybe<Directus_Webhooks_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationCreate_Webhooks_Logs_ItemArgs = {
  data: Create_Webhooks_Logs_Input;
};


export type MutationCreate_Webhooks_Logs_ItemsArgs = {
  data?: InputMaybe<Array<Create_Webhooks_Logs_Input>>;
  filter?: InputMaybe<Webhooks_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationDelete_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Ancc_Reports_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Ancc_Reports_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Bh_Config_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Bh_Config_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Bundles_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Bundles_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Categories_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Categories_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Collections_ItemArgs = {
  collection: Scalars['String']['input'];
};


export type MutationDelete_CommentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Dashboards_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Dashboards_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Data_Migration_Mappings_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Data_Migration_Mappings_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Data_Migration_Records_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Data_Migration_Records_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Data_Migrations_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Data_Migrations_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Departments_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Departments_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Documents_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Documents_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Exam_Results_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Exam_Results_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Exam_Versions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Exam_Versions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Exams_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Exams_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Feature_Flags_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Feature_Flags_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Fields_ItemArgs = {
  collection: Scalars['String']['input'];
  field: Scalars['String']['input'];
};


export type MutationDelete_Files_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Files_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Flows_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Flows_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Folders_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Folders_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Iframe_Tokens_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Iframe_Tokens_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Bundles_Documents_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Bundles_Documents_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Bundles_Exams_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Bundles_Exams_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Bundles_Modules_Definition_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Bundles_Modules_Definition_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Bundles_Policies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Bundles_Policies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Bundles_Sc_Definitions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Bundles_Sc_Definitions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Agencies_Departments_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Agencies_Departments_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Agencies_Locations_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Agencies_Locations_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Agencies_Specialties_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Agencies_Specialties_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Agencies_Supervisors_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Agencies_Supervisors_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Documents_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Documents_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Exams_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Exams_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Directus_Users_Policies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Directus_Users_Policies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Documents_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Documents_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Documents_Categories_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Documents_Categories_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Exam_Versions_Questions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Exam_Versions_Questions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Exams_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Exams_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Exams_Categories_Specialties_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Exams_Categories_Specialties_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Exams_Categories_Subspecialties_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Exams_Categories_Subspecialties_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Modules_Definition_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Modules_Definition_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Modules_Definition_Directus_Users_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Modules_Definition_Directus_Users_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Policies_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Policies_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Policies_Categories_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Policies_Categories_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Sc_Definitions_Agencies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Sc_Definitions_Agencies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Junction_Sc_Definitions_Directus_Users_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Junction_Sc_Definitions_Directus_Users_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Locations_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Locations_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Maintenance_Windows_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Maintenance_Windows_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Modules_Definition_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Modules_Definition_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Modules_Results_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Modules_Results_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Modules_Versions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Modules_Versions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Notifications_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Notifications_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Operations_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Operations_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Panels_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Panels_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Permissions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Permissions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Policies_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Policies_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Presets_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Presets_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Question_Versions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Question_Versions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Questions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Questions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Relations_ItemArgs = {
  collection: Scalars['String']['input'];
  field: Scalars['String']['input'];
};


export type MutationDelete_Roles_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Roles_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Sc_Definitions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Sc_Definitions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Sc_Versions_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Sc_Versions_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Shares_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Shares_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Specialties_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Specialties_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Translations_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Translations_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_User_Logs_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_User_Logs_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Users_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Users_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Webhooks_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Webhooks_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationDelete_Webhooks_Logs_ItemArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDelete_Webhooks_Logs_ItemsArgs = {
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
};


export type MutationImport_FileArgs = {
  data?: InputMaybe<Create_Directus_Files_Input>;
  url: Scalars['String']['input'];
};


export type MutationUpdate_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Agencies_Input>>;
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Agencies_ItemArgs = {
  data: Update_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Agencies_ItemsArgs = {
  data: Update_Agencies_Input;
  filter?: InputMaybe<Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Ancc_Reports_BatchArgs = {
  data?: InputMaybe<Array<Update_Ancc_Reports_Input>>;
  filter?: InputMaybe<Ancc_Reports_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Ancc_Reports_ItemArgs = {
  data: Update_Ancc_Reports_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Ancc_Reports_ItemsArgs = {
  data: Update_Ancc_Reports_Input;
  filter?: InputMaybe<Ancc_Reports_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Bh_Config_BatchArgs = {
  data?: InputMaybe<Array<Update_Bh_Config_Input>>;
  filter?: InputMaybe<Bh_Config_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Bh_Config_ItemArgs = {
  data: Update_Bh_Config_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Bh_Config_ItemsArgs = {
  data: Update_Bh_Config_Input;
  filter?: InputMaybe<Bh_Config_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Bundles_BatchArgs = {
  data?: InputMaybe<Array<Update_Bundles_Input>>;
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Bundles_ItemArgs = {
  data: Update_Bundles_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Bundles_ItemsArgs = {
  data: Update_Bundles_Input;
  filter?: InputMaybe<Bundles_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Categories_BatchArgs = {
  data?: InputMaybe<Array<Update_Categories_Input>>;
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Categories_ItemArgs = {
  data: Update_Categories_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Categories_ItemsArgs = {
  data: Update_Categories_Input;
  filter?: InputMaybe<Categories_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Collections_ItemArgs = {
  collection: Scalars['String']['input'];
  data: Update_Directus_Collections_Input;
};


export type MutationUpdate_CommentArgs = {
  comment: Scalars['String']['input'];
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Dashboards_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Dashboards_Input>>;
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Dashboards_ItemArgs = {
  data: Update_Directus_Dashboards_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Dashboards_ItemsArgs = {
  data: Update_Directus_Dashboards_Input;
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migration_Mappings_BatchArgs = {
  data?: InputMaybe<Array<Update_Data_Migration_Mappings_Input>>;
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migration_Mappings_ItemArgs = {
  data: Update_Data_Migration_Mappings_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Data_Migration_Mappings_ItemsArgs = {
  data: Update_Data_Migration_Mappings_Input;
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migration_Records_BatchArgs = {
  data?: InputMaybe<Array<Update_Data_Migration_Records_Input>>;
  filter?: InputMaybe<Data_Migration_Records_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migration_Records_ItemArgs = {
  data: Update_Data_Migration_Records_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Data_Migration_Records_ItemsArgs = {
  data: Update_Data_Migration_Records_Input;
  filter?: InputMaybe<Data_Migration_Records_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migrations_BatchArgs = {
  data?: InputMaybe<Array<Update_Data_Migrations_Input>>;
  filter?: InputMaybe<Data_Migrations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Data_Migrations_ItemArgs = {
  data: Update_Data_Migrations_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Data_Migrations_ItemsArgs = {
  data: Update_Data_Migrations_Input;
  filter?: InputMaybe<Data_Migrations_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Departments_BatchArgs = {
  data?: InputMaybe<Array<Update_Departments_Input>>;
  filter?: InputMaybe<Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Departments_ItemArgs = {
  data: Update_Departments_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Departments_ItemsArgs = {
  data: Update_Departments_Input;
  filter?: InputMaybe<Departments_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Documents_BatchArgs = {
  data?: InputMaybe<Array<Update_Documents_Input>>;
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Documents_ItemArgs = {
  data: Update_Documents_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Documents_ItemsArgs = {
  data: Update_Documents_Input;
  filter?: InputMaybe<Documents_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exam_Results_BatchArgs = {
  data?: InputMaybe<Array<Update_Exam_Results_Input>>;
  filter?: InputMaybe<Exam_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exam_Results_ItemArgs = {
  data: Update_Exam_Results_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Exam_Results_ItemsArgs = {
  data: Update_Exam_Results_Input;
  filter?: InputMaybe<Exam_Results_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exam_Versions_BatchArgs = {
  data?: InputMaybe<Array<Update_Exam_Versions_Input>>;
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exam_Versions_ItemArgs = {
  data: Update_Exam_Versions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Exam_Versions_ItemsArgs = {
  data: Update_Exam_Versions_Input;
  filter?: InputMaybe<Exam_Versions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exams_BatchArgs = {
  data?: InputMaybe<Array<Update_Exams_Input>>;
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Exams_ItemArgs = {
  data: Update_Exams_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Exams_ItemsArgs = {
  data: Update_Exams_Input;
  filter?: InputMaybe<Exams_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Feature_Flags_BatchArgs = {
  data?: InputMaybe<Array<Update_Feature_Flags_Input>>;
  filter?: InputMaybe<Feature_Flags_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Feature_Flags_ItemArgs = {
  data: Update_Feature_Flags_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Feature_Flags_ItemsArgs = {
  data: Update_Feature_Flags_Input;
  filter?: InputMaybe<Feature_Flags_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Fields_ItemArgs = {
  collection: Scalars['String']['input'];
  data: Update_Directus_Fields_Input;
  field: Scalars['String']['input'];
};


export type MutationUpdate_Files_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Files_Input>>;
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Files_ItemArgs = {
  data: Update_Directus_Files_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Files_ItemsArgs = {
  data: Update_Directus_Files_Input;
  filter?: InputMaybe<Directus_Files_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Flows_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Flows_Input>>;
  filter?: InputMaybe<Directus_Flows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Flows_ItemArgs = {
  data: Update_Directus_Flows_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Flows_ItemsArgs = {
  data: Update_Directus_Flows_Input;
  filter?: InputMaybe<Directus_Flows_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Folders_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Folders_Input>>;
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Folders_ItemArgs = {
  data: Update_Directus_Folders_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Folders_ItemsArgs = {
  data: Update_Directus_Folders_Input;
  filter?: InputMaybe<Directus_Folders_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Iframe_Tokens_BatchArgs = {
  data?: InputMaybe<Array<Update_Iframe_Tokens_Input>>;
  filter?: InputMaybe<Iframe_Tokens_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Iframe_Tokens_ItemArgs = {
  data: Update_Iframe_Tokens_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Iframe_Tokens_ItemsArgs = {
  data: Update_Iframe_Tokens_Input;
  filter?: InputMaybe<Iframe_Tokens_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Documents_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Bundles_Documents_Input>>;
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Documents_ItemArgs = {
  data: Update_Junction_Bundles_Documents_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Bundles_Documents_ItemsArgs = {
  data: Update_Junction_Bundles_Documents_Input;
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Exams_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Bundles_Exams_Input>>;
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Exams_ItemArgs = {
  data: Update_Junction_Bundles_Exams_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Bundles_Exams_ItemsArgs = {
  data: Update_Junction_Bundles_Exams_Input;
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Modules_Definition_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Bundles_Modules_Definition_Input>>;
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Modules_Definition_ItemArgs = {
  data: Update_Junction_Bundles_Modules_Definition_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Bundles_Modules_Definition_ItemsArgs = {
  data: Update_Junction_Bundles_Modules_Definition_Input;
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Policies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Bundles_Policies_Input>>;
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Policies_ItemArgs = {
  data: Update_Junction_Bundles_Policies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Bundles_Policies_ItemsArgs = {
  data: Update_Junction_Bundles_Policies_Input;
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Sc_Definitions_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Bundles_Sc_Definitions_Input>>;
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Bundles_Sc_Definitions_ItemArgs = {
  data: Update_Junction_Bundles_Sc_Definitions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Bundles_Sc_Definitions_ItemsArgs = {
  data: Update_Junction_Bundles_Sc_Definitions_Input;
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Agencies_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Departments_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Agencies_Departments_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Departments_ItemArgs = {
  data: Update_Junction_Directus_Users_Agencies_Departments_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Departments_ItemsArgs = {
  data: Update_Junction_Directus_Users_Agencies_Departments_Input;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_ItemArgs = {
  data: Update_Junction_Directus_Users_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Agencies_ItemsArgs = {
  data: Update_Junction_Directus_Users_Agencies_Input;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Locations_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Agencies_Locations_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Locations_ItemArgs = {
  data: Update_Junction_Directus_Users_Agencies_Locations_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Locations_ItemsArgs = {
  data: Update_Junction_Directus_Users_Agencies_Locations_Input;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Specialties_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Agencies_Specialties_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Specialties_ItemArgs = {
  data: Update_Junction_Directus_Users_Agencies_Specialties_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Specialties_ItemsArgs = {
  data: Update_Junction_Directus_Users_Agencies_Specialties_Input;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Supervisors_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Agencies_Supervisors_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Supervisors_ItemArgs = {
  data: Update_Junction_Directus_Users_Agencies_Supervisors_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Agencies_Supervisors_ItemsArgs = {
  data: Update_Junction_Directus_Users_Agencies_Supervisors_Input;
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Documents_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Documents_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Documents_ItemArgs = {
  data: Update_Junction_Directus_Users_Documents_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Documents_ItemsArgs = {
  data: Update_Junction_Directus_Users_Documents_Input;
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Exams_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Exams_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Exams_ItemArgs = {
  data: Update_Junction_Directus_Users_Exams_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Exams_ItemsArgs = {
  data: Update_Junction_Directus_Users_Exams_Input;
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Policies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Directus_Users_Policies_Input>>;
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Directus_Users_Policies_ItemArgs = {
  data: Update_Junction_Directus_Users_Policies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Directus_Users_Policies_ItemsArgs = {
  data: Update_Junction_Directus_Users_Policies_Input;
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Documents_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Documents_Agencies_Input>>;
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Documents_Agencies_ItemArgs = {
  data: Update_Junction_Documents_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Documents_Agencies_ItemsArgs = {
  data: Update_Junction_Documents_Agencies_Input;
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Documents_Categories_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Documents_Categories_Input>>;
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Documents_Categories_ItemArgs = {
  data: Update_Junction_Documents_Categories_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Documents_Categories_ItemsArgs = {
  data: Update_Junction_Documents_Categories_Input;
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exam_Versions_Questions_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Exam_Versions_Questions_Input>>;
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exam_Versions_Questions_ItemArgs = {
  data: Update_Junction_Exam_Versions_Questions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Exam_Versions_Questions_ItemsArgs = {
  data: Update_Junction_Exam_Versions_Questions_Input;
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Exams_Agencies_Input>>;
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Agencies_ItemArgs = {
  data: Update_Junction_Exams_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Exams_Agencies_ItemsArgs = {
  data: Update_Junction_Exams_Agencies_Input;
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Categories_Specialties_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Exams_Categories_Specialties_Input>>;
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Categories_Specialties_ItemArgs = {
  data: Update_Junction_Exams_Categories_Specialties_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Exams_Categories_Specialties_ItemsArgs = {
  data: Update_Junction_Exams_Categories_Specialties_Input;
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Categories_Subspecialties_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Exams_Categories_Subspecialties_Input>>;
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Exams_Categories_Subspecialties_ItemArgs = {
  data: Update_Junction_Exams_Categories_Subspecialties_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Exams_Categories_Subspecialties_ItemsArgs = {
  data: Update_Junction_Exams_Categories_Subspecialties_Input;
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Modules_Definition_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Modules_Definition_Agencies_Input>>;
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Modules_Definition_Agencies_ItemArgs = {
  data: Update_Junction_Modules_Definition_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Modules_Definition_Agencies_ItemsArgs = {
  data: Update_Junction_Modules_Definition_Agencies_Input;
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Modules_Definition_Directus_Users_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Modules_Definition_Directus_Users_Input>>;
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Modules_Definition_Directus_Users_ItemArgs = {
  data: Update_Junction_Modules_Definition_Directus_Users_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Modules_Definition_Directus_Users_ItemsArgs = {
  data: Update_Junction_Modules_Definition_Directus_Users_Input;
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Policies_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Policies_Agencies_Input>>;
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Policies_Agencies_ItemArgs = {
  data: Update_Junction_Policies_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Policies_Agencies_ItemsArgs = {
  data: Update_Junction_Policies_Agencies_Input;
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Policies_Categories_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Policies_Categories_Input>>;
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Policies_Categories_ItemArgs = {
  data: Update_Junction_Policies_Categories_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Policies_Categories_ItemsArgs = {
  data: Update_Junction_Policies_Categories_Input;
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Sc_Definitions_Agencies_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Sc_Definitions_Agencies_Input>>;
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Sc_Definitions_Agencies_ItemArgs = {
  data: Update_Junction_Sc_Definitions_Agencies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Sc_Definitions_Agencies_ItemsArgs = {
  data: Update_Junction_Sc_Definitions_Agencies_Input;
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Sc_Definitions_Directus_Users_BatchArgs = {
  data?: InputMaybe<Array<Update_Junction_Sc_Definitions_Directus_Users_Input>>;
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Junction_Sc_Definitions_Directus_Users_ItemArgs = {
  data: Update_Junction_Sc_Definitions_Directus_Users_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Junction_Sc_Definitions_Directus_Users_ItemsArgs = {
  data: Update_Junction_Sc_Definitions_Directus_Users_Input;
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Locations_BatchArgs = {
  data?: InputMaybe<Array<Update_Locations_Input>>;
  filter?: InputMaybe<Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Locations_ItemArgs = {
  data: Update_Locations_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Locations_ItemsArgs = {
  data: Update_Locations_Input;
  filter?: InputMaybe<Locations_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Maintenance_Windows_BatchArgs = {
  data?: InputMaybe<Array<Update_Maintenance_Windows_Input>>;
  filter?: InputMaybe<Maintenance_Windows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Maintenance_Windows_ItemArgs = {
  data: Update_Maintenance_Windows_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Maintenance_Windows_ItemsArgs = {
  data: Update_Maintenance_Windows_Input;
  filter?: InputMaybe<Maintenance_Windows_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Definition_BatchArgs = {
  data?: InputMaybe<Array<Update_Modules_Definition_Input>>;
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Definition_ItemArgs = {
  data: Update_Modules_Definition_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Modules_Definition_ItemsArgs = {
  data: Update_Modules_Definition_Input;
  filter?: InputMaybe<Modules_Definition_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Results_BatchArgs = {
  data?: InputMaybe<Array<Update_Modules_Results_Input>>;
  filter?: InputMaybe<Modules_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Results_ItemArgs = {
  data: Update_Modules_Results_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Modules_Results_ItemsArgs = {
  data: Update_Modules_Results_Input;
  filter?: InputMaybe<Modules_Results_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Versions_BatchArgs = {
  data?: InputMaybe<Array<Update_Modules_Versions_Input>>;
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Modules_Versions_ItemArgs = {
  data: Update_Modules_Versions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Modules_Versions_ItemsArgs = {
  data: Update_Modules_Versions_Input;
  filter?: InputMaybe<Modules_Versions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Notifications_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Notifications_Input>>;
  filter?: InputMaybe<Directus_Notifications_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Notifications_ItemArgs = {
  data: Update_Directus_Notifications_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Notifications_ItemsArgs = {
  data: Update_Directus_Notifications_Input;
  filter?: InputMaybe<Directus_Notifications_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Operations_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Operations_Input>>;
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Operations_ItemArgs = {
  data: Update_Directus_Operations_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Operations_ItemsArgs = {
  data: Update_Directus_Operations_Input;
  filter?: InputMaybe<Directus_Operations_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Panels_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Panels_Input>>;
  filter?: InputMaybe<Directus_Panels_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Panels_ItemArgs = {
  data: Update_Directus_Panels_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Panels_ItemsArgs = {
  data: Update_Directus_Panels_Input;
  filter?: InputMaybe<Directus_Panels_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Permissions_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Permissions_Input>>;
  filter?: InputMaybe<Directus_Permissions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Permissions_ItemArgs = {
  data: Update_Directus_Permissions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Permissions_ItemsArgs = {
  data: Update_Directus_Permissions_Input;
  filter?: InputMaybe<Directus_Permissions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Policies_BatchArgs = {
  data?: InputMaybe<Array<Update_Policies_Input>>;
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Policies_ItemArgs = {
  data: Update_Policies_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Policies_ItemsArgs = {
  data: Update_Policies_Input;
  filter?: InputMaybe<Policies_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Presets_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Presets_Input>>;
  filter?: InputMaybe<Directus_Presets_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Presets_ItemArgs = {
  data: Update_Directus_Presets_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Presets_ItemsArgs = {
  data: Update_Directus_Presets_Input;
  filter?: InputMaybe<Directus_Presets_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Question_Versions_BatchArgs = {
  data?: InputMaybe<Array<Update_Question_Versions_Input>>;
  filter?: InputMaybe<Question_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Question_Versions_ItemArgs = {
  data: Update_Question_Versions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Question_Versions_ItemsArgs = {
  data: Update_Question_Versions_Input;
  filter?: InputMaybe<Question_Versions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Questions_BatchArgs = {
  data?: InputMaybe<Array<Update_Questions_Input>>;
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Questions_ItemArgs = {
  data: Update_Questions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Questions_ItemsArgs = {
  data: Update_Questions_Input;
  filter?: InputMaybe<Questions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Relations_ItemArgs = {
  collection: Scalars['String']['input'];
  data: Update_Directus_Relations_Input;
  field: Scalars['String']['input'];
};


export type MutationUpdate_Roles_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Roles_Input>>;
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Roles_ItemArgs = {
  data: Update_Directus_Roles_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Roles_ItemsArgs = {
  data: Update_Directus_Roles_Input;
  filter?: InputMaybe<Directus_Roles_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Sc_Definitions_BatchArgs = {
  data?: InputMaybe<Array<Update_Sc_Definitions_Input>>;
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Sc_Definitions_ItemArgs = {
  data: Update_Sc_Definitions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Sc_Definitions_ItemsArgs = {
  data: Update_Sc_Definitions_Input;
  filter?: InputMaybe<Sc_Definitions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Sc_Versions_BatchArgs = {
  data?: InputMaybe<Array<Update_Sc_Versions_Input>>;
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Sc_Versions_ItemArgs = {
  data: Update_Sc_Versions_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Sc_Versions_ItemsArgs = {
  data: Update_Sc_Versions_Input;
  filter?: InputMaybe<Sc_Versions_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_SettingsArgs = {
  data: Update_Directus_Settings_Input;
};


export type MutationUpdate_Shares_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Shares_Input>>;
  filter?: InputMaybe<Directus_Shares_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Shares_ItemArgs = {
  data: Update_Directus_Shares_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Shares_ItemsArgs = {
  data: Update_Directus_Shares_Input;
  filter?: InputMaybe<Directus_Shares_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Specialties_BatchArgs = {
  data?: InputMaybe<Array<Update_Specialties_Input>>;
  filter?: InputMaybe<Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Specialties_ItemArgs = {
  data: Update_Specialties_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Specialties_ItemsArgs = {
  data: Update_Specialties_Input;
  filter?: InputMaybe<Specialties_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Translations_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Translations_Input>>;
  filter?: InputMaybe<Directus_Translations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Translations_ItemArgs = {
  data: Update_Directus_Translations_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Translations_ItemsArgs = {
  data: Update_Directus_Translations_Input;
  filter?: InputMaybe<Directus_Translations_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_User_Logs_BatchArgs = {
  data?: InputMaybe<Array<Update_User_Logs_Input>>;
  filter?: InputMaybe<User_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_User_Logs_ItemArgs = {
  data: Update_User_Logs_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_User_Logs_ItemsArgs = {
  data: Update_User_Logs_Input;
  filter?: InputMaybe<User_Logs_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Users_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Users_Input>>;
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Users_ItemArgs = {
  data: Update_Directus_Users_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Users_ItemsArgs = {
  data: Update_Directus_Users_Input;
  filter?: InputMaybe<Directus_Users_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Users_MeArgs = {
  data?: InputMaybe<Update_Directus_Users_Input>;
};


export type MutationUpdate_Webhooks_BatchArgs = {
  data?: InputMaybe<Array<Update_Directus_Webhooks_Input>>;
  filter?: InputMaybe<Directus_Webhooks_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Webhooks_ItemArgs = {
  data: Update_Directus_Webhooks_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Webhooks_ItemsArgs = {
  data: Update_Directus_Webhooks_Input;
  filter?: InputMaybe<Directus_Webhooks_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Webhooks_Logs_BatchArgs = {
  data?: InputMaybe<Array<Update_Webhooks_Logs_Input>>;
  filter?: InputMaybe<Webhooks_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUpdate_Webhooks_Logs_ItemArgs = {
  data: Update_Webhooks_Logs_Input;
  id: Scalars['ID']['input'];
};


export type MutationUpdate_Webhooks_Logs_ItemsArgs = {
  data: Update_Webhooks_Logs_Input;
  filter?: InputMaybe<Webhooks_Logs_Filter>;
  ids: Array<InputMaybe<Scalars['ID']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationUsers_InviteArgs = {
  email: Scalars['String']['input'];
  invite_url?: InputMaybe<Scalars['String']['input']>;
  role: Scalars['String']['input'];
};


export type MutationUsers_Invite_AcceptArgs = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type MutationUsers_Me_Tfa_DisableArgs = {
  otp: Scalars['String']['input'];
};


export type MutationUsers_Me_Tfa_EnableArgs = {
  otp: Scalars['String']['input'];
  secret: Scalars['String']['input'];
};


export type MutationUsers_Me_Tfa_GenerateArgs = {
  password: Scalars['String']['input'];
};


export type MutationUtils_Hash_GenerateArgs = {
  string: Scalars['String']['input'];
};


export type MutationUtils_Hash_VerifyArgs = {
  hash: Scalars['String']['input'];
  string: Scalars['String']['input'];
};


export type MutationUtils_Random_StringArgs = {
  length?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationUtils_RevertArgs = {
  revision: Scalars['ID']['input'];
};


export type MutationUtils_SortArgs = {
  collection: Scalars['String']['input'];
  item: Scalars['ID']['input'];
  to: Scalars['ID']['input'];
};

export type Query = {
  __typename?: 'Query';
  activity: Array<Directus_Activity>;
  activity_aggregated: Array<Directus_Activity_Aggregated>;
  activity_by_id?: Maybe<Directus_Activity>;
  agencies: Array<Agencies>;
  agencies_aggregated: Array<Agencies_Aggregated>;
  agencies_by_id?: Maybe<Agencies>;
  ancc_reports: Array<Ancc_Reports>;
  ancc_reports_aggregated: Array<Ancc_Reports_Aggregated>;
  ancc_reports_by_id?: Maybe<Ancc_Reports>;
  bh_config: Array<Bh_Config>;
  bh_config_aggregated: Array<Bh_Config_Aggregated>;
  bh_config_by_id?: Maybe<Bh_Config>;
  bundles: Array<Bundles>;
  bundles_aggregated: Array<Bundles_Aggregated>;
  bundles_by_id?: Maybe<Bundles>;
  categories: Array<Categories>;
  categories_aggregated: Array<Categories_Aggregated>;
  categories_by_id?: Maybe<Categories>;
  collections: Array<Directus_Collections>;
  collections_by_name?: Maybe<Directus_Collections>;
  dashboards: Array<Directus_Dashboards>;
  dashboards_aggregated: Array<Directus_Dashboards_Aggregated>;
  dashboards_by_id?: Maybe<Directus_Dashboards>;
  data_migration_mappings: Array<Data_Migration_Mappings>;
  data_migration_mappings_aggregated: Array<Data_Migration_Mappings_Aggregated>;
  data_migration_mappings_by_id?: Maybe<Data_Migration_Mappings>;
  data_migration_records: Array<Data_Migration_Records>;
  data_migration_records_aggregated: Array<Data_Migration_Records_Aggregated>;
  data_migration_records_by_id?: Maybe<Data_Migration_Records>;
  data_migrations: Array<Data_Migrations>;
  data_migrations_aggregated: Array<Data_Migrations_Aggregated>;
  data_migrations_by_id?: Maybe<Data_Migrations>;
  departments: Array<Departments>;
  departments_aggregated: Array<Departments_Aggregated>;
  departments_by_id?: Maybe<Departments>;
  documents: Array<Documents>;
  documents_aggregated: Array<Documents_Aggregated>;
  documents_by_id?: Maybe<Documents>;
  exam_results: Array<Exam_Results>;
  exam_results_aggregated: Array<Exam_Results_Aggregated>;
  exam_results_by_id?: Maybe<Exam_Results>;
  exam_versions: Array<Exam_Versions>;
  exam_versions_aggregated: Array<Exam_Versions_Aggregated>;
  exam_versions_by_id?: Maybe<Exam_Versions>;
  exams: Array<Exams>;
  exams_aggregated: Array<Exams_Aggregated>;
  exams_by_id?: Maybe<Exams>;
  extensions?: Maybe<Extensions>;
  feature_flags: Array<Feature_Flags>;
  feature_flags_aggregated: Array<Feature_Flags_Aggregated>;
  feature_flags_by_id?: Maybe<Feature_Flags>;
  fields: Array<Directus_Fields>;
  fields_by_name?: Maybe<Directus_Fields>;
  fields_in_collection: Array<Directus_Fields>;
  files: Array<Directus_Files>;
  files_aggregated: Array<Directus_Files_Aggregated>;
  files_by_id?: Maybe<Directus_Files>;
  flows: Array<Directus_Flows>;
  flows_aggregated: Array<Directus_Flows_Aggregated>;
  flows_by_id?: Maybe<Directus_Flows>;
  folders: Array<Directus_Folders>;
  folders_aggregated: Array<Directus_Folders_Aggregated>;
  folders_by_id?: Maybe<Directus_Folders>;
  iframe_tokens: Array<Iframe_Tokens>;
  iframe_tokens_aggregated: Array<Iframe_Tokens_Aggregated>;
  iframe_tokens_by_id?: Maybe<Iframe_Tokens>;
  junction_bundles_documents: Array<Junction_Bundles_Documents>;
  junction_bundles_documents_aggregated: Array<Junction_Bundles_Documents_Aggregated>;
  junction_bundles_documents_by_id?: Maybe<Junction_Bundles_Documents>;
  junction_bundles_exams: Array<Junction_Bundles_Exams>;
  junction_bundles_exams_aggregated: Array<Junction_Bundles_Exams_Aggregated>;
  junction_bundles_exams_by_id?: Maybe<Junction_Bundles_Exams>;
  junction_bundles_modules_definition: Array<Junction_Bundles_Modules_Definition>;
  junction_bundles_modules_definition_aggregated: Array<Junction_Bundles_Modules_Definition_Aggregated>;
  junction_bundles_modules_definition_by_id?: Maybe<Junction_Bundles_Modules_Definition>;
  junction_bundles_policies: Array<Junction_Bundles_Policies>;
  junction_bundles_policies_aggregated: Array<Junction_Bundles_Policies_Aggregated>;
  junction_bundles_policies_by_id?: Maybe<Junction_Bundles_Policies>;
  junction_bundles_sc_definitions: Array<Junction_Bundles_Sc_Definitions>;
  junction_bundles_sc_definitions_aggregated: Array<Junction_Bundles_Sc_Definitions_Aggregated>;
  junction_bundles_sc_definitions_by_id?: Maybe<Junction_Bundles_Sc_Definitions>;
  junction_directus_users_agencies: Array<Junction_Directus_Users_Agencies>;
  junction_directus_users_agencies_aggregated: Array<Junction_Directus_Users_Agencies_Aggregated>;
  junction_directus_users_agencies_by_id?: Maybe<Junction_Directus_Users_Agencies>;
  junction_directus_users_agencies_departments: Array<Junction_Directus_Users_Agencies_Departments>;
  junction_directus_users_agencies_departments_aggregated: Array<Junction_Directus_Users_Agencies_Departments_Aggregated>;
  junction_directus_users_agencies_departments_by_id?: Maybe<Junction_Directus_Users_Agencies_Departments>;
  junction_directus_users_agencies_locations: Array<Junction_Directus_Users_Agencies_Locations>;
  junction_directus_users_agencies_locations_aggregated: Array<Junction_Directus_Users_Agencies_Locations_Aggregated>;
  junction_directus_users_agencies_locations_by_id?: Maybe<Junction_Directus_Users_Agencies_Locations>;
  junction_directus_users_agencies_specialties: Array<Junction_Directus_Users_Agencies_Specialties>;
  junction_directus_users_agencies_specialties_aggregated: Array<Junction_Directus_Users_Agencies_Specialties_Aggregated>;
  junction_directus_users_agencies_specialties_by_id?: Maybe<Junction_Directus_Users_Agencies_Specialties>;
  junction_directus_users_agencies_supervisors: Array<Junction_Directus_Users_Agencies_Supervisors>;
  junction_directus_users_agencies_supervisors_aggregated: Array<Junction_Directus_Users_Agencies_Supervisors_Aggregated>;
  junction_directus_users_agencies_supervisors_by_id?: Maybe<Junction_Directus_Users_Agencies_Supervisors>;
  junction_directus_users_documents: Array<Junction_Directus_Users_Documents>;
  junction_directus_users_documents_aggregated: Array<Junction_Directus_Users_Documents_Aggregated>;
  junction_directus_users_documents_by_id?: Maybe<Junction_Directus_Users_Documents>;
  junction_directus_users_exams: Array<Junction_Directus_Users_Exams>;
  junction_directus_users_exams_aggregated: Array<Junction_Directus_Users_Exams_Aggregated>;
  junction_directus_users_exams_by_id?: Maybe<Junction_Directus_Users_Exams>;
  junction_directus_users_policies: Array<Junction_Directus_Users_Policies>;
  junction_directus_users_policies_aggregated: Array<Junction_Directus_Users_Policies_Aggregated>;
  junction_directus_users_policies_by_id?: Maybe<Junction_Directus_Users_Policies>;
  junction_documents_agencies: Array<Junction_Documents_Agencies>;
  junction_documents_agencies_aggregated: Array<Junction_Documents_Agencies_Aggregated>;
  junction_documents_agencies_by_id?: Maybe<Junction_Documents_Agencies>;
  junction_documents_categories: Array<Junction_Documents_Categories>;
  junction_documents_categories_aggregated: Array<Junction_Documents_Categories_Aggregated>;
  junction_documents_categories_by_id?: Maybe<Junction_Documents_Categories>;
  junction_exam_versions_questions: Array<Junction_Exam_Versions_Questions>;
  junction_exam_versions_questions_aggregated: Array<Junction_Exam_Versions_Questions_Aggregated>;
  junction_exam_versions_questions_by_id?: Maybe<Junction_Exam_Versions_Questions>;
  junction_exams_agencies: Array<Junction_Exams_Agencies>;
  junction_exams_agencies_aggregated: Array<Junction_Exams_Agencies_Aggregated>;
  junction_exams_agencies_by_id?: Maybe<Junction_Exams_Agencies>;
  junction_exams_categories_specialties: Array<Junction_Exams_Categories_Specialties>;
  junction_exams_categories_specialties_aggregated: Array<Junction_Exams_Categories_Specialties_Aggregated>;
  junction_exams_categories_specialties_by_id?: Maybe<Junction_Exams_Categories_Specialties>;
  junction_exams_categories_subspecialties: Array<Junction_Exams_Categories_Subspecialties>;
  junction_exams_categories_subspecialties_aggregated: Array<Junction_Exams_Categories_Subspecialties_Aggregated>;
  junction_exams_categories_subspecialties_by_id?: Maybe<Junction_Exams_Categories_Subspecialties>;
  junction_modules_definition_agencies: Array<Junction_Modules_Definition_Agencies>;
  junction_modules_definition_agencies_aggregated: Array<Junction_Modules_Definition_Agencies_Aggregated>;
  junction_modules_definition_agencies_by_id?: Maybe<Junction_Modules_Definition_Agencies>;
  junction_modules_definition_directus_users: Array<Junction_Modules_Definition_Directus_Users>;
  junction_modules_definition_directus_users_aggregated: Array<Junction_Modules_Definition_Directus_Users_Aggregated>;
  junction_modules_definition_directus_users_by_id?: Maybe<Junction_Modules_Definition_Directus_Users>;
  junction_policies_agencies: Array<Junction_Policies_Agencies>;
  junction_policies_agencies_aggregated: Array<Junction_Policies_Agencies_Aggregated>;
  junction_policies_agencies_by_id?: Maybe<Junction_Policies_Agencies>;
  junction_policies_categories: Array<Junction_Policies_Categories>;
  junction_policies_categories_aggregated: Array<Junction_Policies_Categories_Aggregated>;
  junction_policies_categories_by_id?: Maybe<Junction_Policies_Categories>;
  junction_sc_definitions_agencies: Array<Junction_Sc_Definitions_Agencies>;
  junction_sc_definitions_agencies_aggregated: Array<Junction_Sc_Definitions_Agencies_Aggregated>;
  junction_sc_definitions_agencies_by_id?: Maybe<Junction_Sc_Definitions_Agencies>;
  junction_sc_definitions_directus_users: Array<Junction_Sc_Definitions_Directus_Users>;
  junction_sc_definitions_directus_users_aggregated: Array<Junction_Sc_Definitions_Directus_Users_Aggregated>;
  junction_sc_definitions_directus_users_by_id?: Maybe<Junction_Sc_Definitions_Directus_Users>;
  locations: Array<Locations>;
  locations_aggregated: Array<Locations_Aggregated>;
  locations_by_id?: Maybe<Locations>;
  maintenance_windows: Array<Maintenance_Windows>;
  maintenance_windows_aggregated: Array<Maintenance_Windows_Aggregated>;
  maintenance_windows_by_id?: Maybe<Maintenance_Windows>;
  modules_definition: Array<Modules_Definition>;
  modules_definition_aggregated: Array<Modules_Definition_Aggregated>;
  modules_definition_by_id?: Maybe<Modules_Definition>;
  modules_results: Array<Modules_Results>;
  modules_results_aggregated: Array<Modules_Results_Aggregated>;
  modules_results_by_id?: Maybe<Modules_Results>;
  modules_versions: Array<Modules_Versions>;
  modules_versions_aggregated: Array<Modules_Versions_Aggregated>;
  modules_versions_by_id?: Maybe<Modules_Versions>;
  notifications: Array<Directus_Notifications>;
  notifications_aggregated: Array<Directus_Notifications_Aggregated>;
  notifications_by_id?: Maybe<Directus_Notifications>;
  operations: Array<Directus_Operations>;
  operations_aggregated: Array<Directus_Operations_Aggregated>;
  operations_by_id?: Maybe<Directus_Operations>;
  panels: Array<Directus_Panels>;
  panels_aggregated: Array<Directus_Panels_Aggregated>;
  panels_by_id?: Maybe<Directus_Panels>;
  permissions: Array<Directus_Permissions>;
  permissions_aggregated: Array<Directus_Permissions_Aggregated>;
  permissions_by_id?: Maybe<Directus_Permissions>;
  policies: Array<Policies>;
  policies_aggregated: Array<Policies_Aggregated>;
  policies_by_id?: Maybe<Policies>;
  presets: Array<Directus_Presets>;
  presets_aggregated: Array<Directus_Presets_Aggregated>;
  presets_by_id?: Maybe<Directus_Presets>;
  question_versions: Array<Question_Versions>;
  question_versions_aggregated: Array<Question_Versions_Aggregated>;
  question_versions_by_id?: Maybe<Question_Versions>;
  questions: Array<Questions>;
  questions_aggregated: Array<Questions_Aggregated>;
  questions_by_id?: Maybe<Questions>;
  relations: Array<Directus_Relations>;
  relations_by_name?: Maybe<Directus_Relations>;
  relations_in_collection: Array<Directus_Relations>;
  revisions: Array<Directus_Revisions>;
  revisions_aggregated: Array<Directus_Revisions_Aggregated>;
  revisions_by_id?: Maybe<Directus_Revisions>;
  roles: Array<Directus_Roles>;
  roles_aggregated: Array<Directus_Roles_Aggregated>;
  roles_by_id?: Maybe<Directus_Roles>;
  sc_definitions: Array<Sc_Definitions>;
  sc_definitions_aggregated: Array<Sc_Definitions_Aggregated>;
  sc_definitions_by_id?: Maybe<Sc_Definitions>;
  sc_versions: Array<Sc_Versions>;
  sc_versions_aggregated: Array<Sc_Versions_Aggregated>;
  sc_versions_by_id?: Maybe<Sc_Versions>;
  server_health?: Maybe<Scalars['JSON']['output']>;
  server_info?: Maybe<Server_Info>;
  server_ping?: Maybe<Scalars['String']['output']>;
  server_specs_graphql?: Maybe<Scalars['String']['output']>;
  server_specs_oas?: Maybe<Scalars['JSON']['output']>;
  settings?: Maybe<Directus_Settings>;
  shares: Array<Directus_Shares>;
  shares_aggregated: Array<Directus_Shares_Aggregated>;
  shares_by_id?: Maybe<Directus_Shares>;
  specialties: Array<Specialties>;
  specialties_aggregated: Array<Specialties_Aggregated>;
  specialties_by_id?: Maybe<Specialties>;
  translations: Array<Directus_Translations>;
  translations_aggregated: Array<Directus_Translations_Aggregated>;
  translations_by_id?: Maybe<Directus_Translations>;
  user_logs: Array<User_Logs>;
  user_logs_aggregated: Array<User_Logs_Aggregated>;
  user_logs_by_id?: Maybe<User_Logs>;
  users: Array<Directus_Users>;
  users_aggregated: Array<Directus_Users_Aggregated>;
  users_by_id?: Maybe<Directus_Users>;
  users_me?: Maybe<Directus_Users>;
  webhooks: Array<Directus_Webhooks>;
  webhooks_aggregated: Array<Directus_Webhooks_Aggregated>;
  webhooks_by_id?: Maybe<Directus_Webhooks>;
  webhooks_logs: Array<Webhooks_Logs>;
  webhooks_logs_aggregated: Array<Webhooks_Logs_Aggregated>;
  webhooks_logs_by_id?: Maybe<Webhooks_Logs>;
};


export type QueryActivityArgs = {
  filter?: InputMaybe<Directus_Activity_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryActivity_AggregatedArgs = {
  filter?: InputMaybe<Directus_Activity_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryActivity_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAgenciesArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryAgencies_AggregatedArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryAgencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAncc_ReportsArgs = {
  filter?: InputMaybe<Ancc_Reports_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryAncc_Reports_AggregatedArgs = {
  filter?: InputMaybe<Ancc_Reports_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryAncc_Reports_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryBh_ConfigArgs = {
  filter?: InputMaybe<Bh_Config_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryBh_Config_AggregatedArgs = {
  filter?: InputMaybe<Bh_Config_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryBh_Config_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryBundlesArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryBundles_AggregatedArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryBundles_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCategoriesArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryCategories_AggregatedArgs = {
  filter?: InputMaybe<Categories_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryCategories_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCollections_By_NameArgs = {
  name: Scalars['String']['input'];
};


export type QueryDashboardsArgs = {
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDashboards_AggregatedArgs = {
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDashboards_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryData_Migration_MappingsArgs = {
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migration_Mappings_AggregatedArgs = {
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migration_Mappings_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryData_Migration_RecordsArgs = {
  filter?: InputMaybe<Data_Migration_Records_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migration_Records_AggregatedArgs = {
  filter?: InputMaybe<Data_Migration_Records_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migration_Records_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryData_MigrationsArgs = {
  filter?: InputMaybe<Data_Migrations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migrations_AggregatedArgs = {
  filter?: InputMaybe<Data_Migrations_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryData_Migrations_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryDepartmentsArgs = {
  filter?: InputMaybe<Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDepartments_AggregatedArgs = {
  filter?: InputMaybe<Departments_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDepartments_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryDocumentsArgs = {
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDocuments_AggregatedArgs = {
  filter?: InputMaybe<Documents_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryDocuments_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryExam_ResultsArgs = {
  filter?: InputMaybe<Exam_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExam_Results_AggregatedArgs = {
  filter?: InputMaybe<Exam_Results_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExam_Results_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryExam_VersionsArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExam_Versions_AggregatedArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExam_Versions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryExamsArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExams_AggregatedArgs = {
  filter?: InputMaybe<Exams_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryExams_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFeature_FlagsArgs = {
  filter?: InputMaybe<Feature_Flags_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFeature_Flags_AggregatedArgs = {
  filter?: InputMaybe<Feature_Flags_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFeature_Flags_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFields_By_NameArgs = {
  collection: Scalars['String']['input'];
  field: Scalars['String']['input'];
};


export type QueryFields_In_CollectionArgs = {
  collection: Scalars['String']['input'];
};


export type QueryFilesArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFiles_AggregatedArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFiles_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFlowsArgs = {
  filter?: InputMaybe<Directus_Flows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFlows_AggregatedArgs = {
  filter?: InputMaybe<Directus_Flows_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFlows_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFoldersArgs = {
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFolders_AggregatedArgs = {
  filter?: InputMaybe<Directus_Folders_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryFolders_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryIframe_TokensArgs = {
  filter?: InputMaybe<Iframe_Tokens_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryIframe_Tokens_AggregatedArgs = {
  filter?: InputMaybe<Iframe_Tokens_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryIframe_Tokens_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Bundles_DocumentsArgs = {
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Documents_AggregatedArgs = {
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Documents_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Bundles_ExamsArgs = {
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Exams_AggregatedArgs = {
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Exams_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Bundles_Modules_DefinitionArgs = {
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Modules_Definition_AggregatedArgs = {
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Modules_Definition_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Bundles_PoliciesArgs = {
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Policies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Policies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Bundles_Sc_DefinitionsArgs = {
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Sc_Definitions_AggregatedArgs = {
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Bundles_Sc_Definitions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_AgenciesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_Agencies_DepartmentsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Departments_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Departments_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_Agencies_LocationsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Locations_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Locations_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_Agencies_SpecialtiesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Specialties_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Specialties_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_Agencies_SupervisorsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Supervisors_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Agencies_Supervisors_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_DocumentsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Documents_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Documents_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_ExamsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Exams_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Exams_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Directus_Users_PoliciesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Policies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Directus_Users_Policies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Documents_AgenciesArgs = {
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Documents_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Documents_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Documents_CategoriesArgs = {
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Documents_Categories_AggregatedArgs = {
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Documents_Categories_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Exam_Versions_QuestionsArgs = {
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exam_Versions_Questions_AggregatedArgs = {
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exam_Versions_Questions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Exams_AgenciesArgs = {
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Exams_Categories_SpecialtiesArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Categories_Specialties_AggregatedArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Categories_Specialties_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Exams_Categories_SubspecialtiesArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Categories_Subspecialties_AggregatedArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Exams_Categories_Subspecialties_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Modules_Definition_AgenciesArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Modules_Definition_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Modules_Definition_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Modules_Definition_Directus_UsersArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Modules_Definition_Directus_Users_AggregatedArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Modules_Definition_Directus_Users_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Policies_AgenciesArgs = {
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Policies_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Policies_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Policies_CategoriesArgs = {
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Policies_Categories_AggregatedArgs = {
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Policies_Categories_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Sc_Definitions_AgenciesArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Sc_Definitions_Agencies_AggregatedArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Sc_Definitions_Agencies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJunction_Sc_Definitions_Directus_UsersArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Sc_Definitions_Directus_Users_AggregatedArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryJunction_Sc_Definitions_Directus_Users_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryLocationsArgs = {
  filter?: InputMaybe<Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryLocations_AggregatedArgs = {
  filter?: InputMaybe<Locations_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryLocations_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMaintenance_WindowsArgs = {
  filter?: InputMaybe<Maintenance_Windows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryMaintenance_Windows_AggregatedArgs = {
  filter?: InputMaybe<Maintenance_Windows_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryMaintenance_Windows_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryModules_DefinitionArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Definition_AggregatedArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Definition_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryModules_ResultsArgs = {
  filter?: InputMaybe<Modules_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Results_AggregatedArgs = {
  filter?: InputMaybe<Modules_Results_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Results_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryModules_VersionsArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Versions_AggregatedArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryModules_Versions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNotificationsArgs = {
  filter?: InputMaybe<Directus_Notifications_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryNotifications_AggregatedArgs = {
  filter?: InputMaybe<Directus_Notifications_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryNotifications_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOperationsArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryOperations_AggregatedArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryOperations_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPanelsArgs = {
  filter?: InputMaybe<Directus_Panels_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPanels_AggregatedArgs = {
  filter?: InputMaybe<Directus_Panels_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPanels_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPermissionsArgs = {
  filter?: InputMaybe<Directus_Permissions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPermissions_AggregatedArgs = {
  filter?: InputMaybe<Directus_Permissions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPermissions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPoliciesArgs = {
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPolicies_AggregatedArgs = {
  filter?: InputMaybe<Policies_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPolicies_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPresetsArgs = {
  filter?: InputMaybe<Directus_Presets_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPresets_AggregatedArgs = {
  filter?: InputMaybe<Directus_Presets_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryPresets_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryQuestion_VersionsArgs = {
  filter?: InputMaybe<Question_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryQuestion_Versions_AggregatedArgs = {
  filter?: InputMaybe<Question_Versions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryQuestion_Versions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryQuestionsArgs = {
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryQuestions_AggregatedArgs = {
  filter?: InputMaybe<Questions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryQuestions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRelations_By_NameArgs = {
  collection: Scalars['String']['input'];
  field: Scalars['String']['input'];
};


export type QueryRelations_In_CollectionArgs = {
  collection: Scalars['String']['input'];
};


export type QueryRevisionsArgs = {
  filter?: InputMaybe<Directus_Revisions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryRevisions_AggregatedArgs = {
  filter?: InputMaybe<Directus_Revisions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryRevisions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRolesArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryRoles_AggregatedArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryRoles_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySc_DefinitionsArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySc_Definitions_AggregatedArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySc_Definitions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySc_VersionsArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySc_Versions_AggregatedArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySc_Versions_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryServer_Specs_GraphqlArgs = {
  scope?: InputMaybe<Graphql_Sdl_Scope>;
};


export type QuerySharesArgs = {
  filter?: InputMaybe<Directus_Shares_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryShares_AggregatedArgs = {
  filter?: InputMaybe<Directus_Shares_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryShares_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySpecialtiesArgs = {
  filter?: InputMaybe<Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySpecialties_AggregatedArgs = {
  filter?: InputMaybe<Specialties_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuerySpecialties_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTranslationsArgs = {
  filter?: InputMaybe<Directus_Translations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryTranslations_AggregatedArgs = {
  filter?: InputMaybe<Directus_Translations_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryTranslations_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUser_LogsArgs = {
  filter?: InputMaybe<User_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryUser_Logs_AggregatedArgs = {
  filter?: InputMaybe<User_Logs_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryUser_Logs_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryUsers_AggregatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryUsers_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryWebhooksArgs = {
  filter?: InputMaybe<Directus_Webhooks_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryWebhooks_AggregatedArgs = {
  filter?: InputMaybe<Directus_Webhooks_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryWebhooks_By_IdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryWebhooks_LogsArgs = {
  filter?: InputMaybe<Webhooks_Logs_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryWebhooks_Logs_AggregatedArgs = {
  filter?: InputMaybe<Webhooks_Logs_Filter>;
  groupBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryWebhooks_Logs_By_IdArgs = {
  id: Scalars['ID']['input'];
};

export type Subscription = {
  __typename?: 'Subscription';
  agencies_mutated?: Maybe<Agencies_Mutated>;
  ancc_reports_mutated?: Maybe<Ancc_Reports_Mutated>;
  bh_config_mutated?: Maybe<Bh_Config_Mutated>;
  bundles_mutated?: Maybe<Bundles_Mutated>;
  categories_mutated?: Maybe<Categories_Mutated>;
  data_migration_mappings_mutated?: Maybe<Data_Migration_Mappings_Mutated>;
  data_migration_records_mutated?: Maybe<Data_Migration_Records_Mutated>;
  data_migrations_mutated?: Maybe<Data_Migrations_Mutated>;
  departments_mutated?: Maybe<Departments_Mutated>;
  directus_activity_mutated?: Maybe<Directus_Activity_Mutated>;
  directus_dashboards_mutated?: Maybe<Directus_Dashboards_Mutated>;
  directus_files_mutated?: Maybe<Directus_Files_Mutated>;
  directus_flows_mutated?: Maybe<Directus_Flows_Mutated>;
  directus_folders_mutated?: Maybe<Directus_Folders_Mutated>;
  directus_notifications_mutated?: Maybe<Directus_Notifications_Mutated>;
  directus_operations_mutated?: Maybe<Directus_Operations_Mutated>;
  directus_panels_mutated?: Maybe<Directus_Panels_Mutated>;
  directus_permissions_mutated?: Maybe<Directus_Permissions_Mutated>;
  directus_presets_mutated?: Maybe<Directus_Presets_Mutated>;
  directus_revisions_mutated?: Maybe<Directus_Revisions_Mutated>;
  directus_roles_mutated?: Maybe<Directus_Roles_Mutated>;
  directus_settings_mutated?: Maybe<Directus_Settings_Mutated>;
  directus_shares_mutated?: Maybe<Directus_Shares_Mutated>;
  directus_translations_mutated?: Maybe<Directus_Translations_Mutated>;
  directus_users_mutated?: Maybe<Directus_Users_Mutated>;
  directus_webhooks_mutated?: Maybe<Directus_Webhooks_Mutated>;
  documents_mutated?: Maybe<Documents_Mutated>;
  exam_results_mutated?: Maybe<Exam_Results_Mutated>;
  exam_versions_mutated?: Maybe<Exam_Versions_Mutated>;
  exams_mutated?: Maybe<Exams_Mutated>;
  feature_flags_mutated?: Maybe<Feature_Flags_Mutated>;
  iframe_tokens_mutated?: Maybe<Iframe_Tokens_Mutated>;
  junction_bundles_documents_mutated?: Maybe<Junction_Bundles_Documents_Mutated>;
  junction_bundles_exams_mutated?: Maybe<Junction_Bundles_Exams_Mutated>;
  junction_bundles_modules_definition_mutated?: Maybe<Junction_Bundles_Modules_Definition_Mutated>;
  junction_bundles_policies_mutated?: Maybe<Junction_Bundles_Policies_Mutated>;
  junction_bundles_sc_definitions_mutated?: Maybe<Junction_Bundles_Sc_Definitions_Mutated>;
  junction_directus_users_agencies_departments_mutated?: Maybe<Junction_Directus_Users_Agencies_Departments_Mutated>;
  junction_directus_users_agencies_locations_mutated?: Maybe<Junction_Directus_Users_Agencies_Locations_Mutated>;
  junction_directus_users_agencies_mutated?: Maybe<Junction_Directus_Users_Agencies_Mutated>;
  junction_directus_users_agencies_specialties_mutated?: Maybe<Junction_Directus_Users_Agencies_Specialties_Mutated>;
  junction_directus_users_agencies_supervisors_mutated?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Mutated>;
  junction_directus_users_documents_mutated?: Maybe<Junction_Directus_Users_Documents_Mutated>;
  junction_directus_users_exams_mutated?: Maybe<Junction_Directus_Users_Exams_Mutated>;
  junction_directus_users_policies_mutated?: Maybe<Junction_Directus_Users_Policies_Mutated>;
  junction_documents_agencies_mutated?: Maybe<Junction_Documents_Agencies_Mutated>;
  junction_documents_categories_mutated?: Maybe<Junction_Documents_Categories_Mutated>;
  junction_exam_versions_questions_mutated?: Maybe<Junction_Exam_Versions_Questions_Mutated>;
  junction_exams_agencies_mutated?: Maybe<Junction_Exams_Agencies_Mutated>;
  junction_exams_categories_specialties_mutated?: Maybe<Junction_Exams_Categories_Specialties_Mutated>;
  junction_exams_categories_subspecialties_mutated?: Maybe<Junction_Exams_Categories_Subspecialties_Mutated>;
  junction_modules_definition_agencies_mutated?: Maybe<Junction_Modules_Definition_Agencies_Mutated>;
  junction_modules_definition_directus_users_mutated?: Maybe<Junction_Modules_Definition_Directus_Users_Mutated>;
  junction_policies_agencies_mutated?: Maybe<Junction_Policies_Agencies_Mutated>;
  junction_policies_categories_mutated?: Maybe<Junction_Policies_Categories_Mutated>;
  junction_sc_definitions_agencies_mutated?: Maybe<Junction_Sc_Definitions_Agencies_Mutated>;
  junction_sc_definitions_directus_users_mutated?: Maybe<Junction_Sc_Definitions_Directus_Users_Mutated>;
  locations_mutated?: Maybe<Locations_Mutated>;
  maintenance_windows_mutated?: Maybe<Maintenance_Windows_Mutated>;
  modules_definition_mutated?: Maybe<Modules_Definition_Mutated>;
  modules_results_mutated?: Maybe<Modules_Results_Mutated>;
  modules_versions_mutated?: Maybe<Modules_Versions_Mutated>;
  policies_mutated?: Maybe<Policies_Mutated>;
  question_versions_mutated?: Maybe<Question_Versions_Mutated>;
  questions_mutated?: Maybe<Questions_Mutated>;
  sc_definitions_mutated?: Maybe<Sc_Definitions_Mutated>;
  sc_versions_mutated?: Maybe<Sc_Versions_Mutated>;
  specialties_mutated?: Maybe<Specialties_Mutated>;
  user_logs_mutated?: Maybe<User_Logs_Mutated>;
  webhooks_logs_mutated?: Maybe<Webhooks_Logs_Mutated>;
};


export type SubscriptionAgencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionAncc_Reports_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionBh_Config_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionBundles_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionCategories_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionData_Migration_Mappings_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionData_Migration_Records_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionData_Migrations_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDepartments_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Activity_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Dashboards_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Files_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Flows_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Folders_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Notifications_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Operations_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Panels_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Permissions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Presets_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Revisions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Roles_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Settings_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Shares_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Translations_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Users_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDirectus_Webhooks_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionDocuments_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionExam_Results_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionExam_Versions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionExams_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionFeature_Flags_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionIframe_Tokens_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Bundles_Documents_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Bundles_Exams_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Bundles_Modules_Definition_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Bundles_Policies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Bundles_Sc_Definitions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Agencies_Departments_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Agencies_Locations_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Agencies_Specialties_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Agencies_Supervisors_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Documents_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Exams_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Directus_Users_Policies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Documents_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Documents_Categories_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Exam_Versions_Questions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Exams_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Exams_Categories_Specialties_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Exams_Categories_Subspecialties_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Modules_Definition_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Modules_Definition_Directus_Users_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Policies_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Policies_Categories_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Sc_Definitions_Agencies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionJunction_Sc_Definitions_Directus_Users_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionLocations_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionMaintenance_Windows_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionModules_Definition_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionModules_Results_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionModules_Versions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionPolicies_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionQuestion_Versions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionQuestions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionSc_Definitions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionSc_Versions_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionSpecialties_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionUser_Logs_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};


export type SubscriptionWebhooks_Logs_MutatedArgs = {
  event?: InputMaybe<EventEnum>;
};

export type Agencies = {
  __typename?: 'agencies';
  automatic_notifications_email?: Maybe<Scalars['String']['output']>;
  bh_enable?: Maybe<Scalars['Boolean']['output']>;
  billing_code?: Maybe<Scalars['String']['output']>;
  certificate_logo?: Maybe<Directus_Files>;
  custom_allowed_attempts_exams?: Maybe<Scalars['Int']['output']>;
  custom_allowed_attempts_modules?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  default_due_date?: Maybe<Scalars['Int']['output']>;
  default_expiration?: Maybe<Scalars['String']['output']>;
  departments?: Maybe<Array<Maybe<Departments>>>;
  departments_func?: Maybe<Count_Functions>;
  directus_users?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies>>>;
  directus_users_func?: Maybe<Count_Functions>;
  enable_certificate_logo?: Maybe<Scalars['Boolean']['output']>;
  exams?: Maybe<Array<Maybe<Junction_Exams_Agencies>>>;
  exams_func?: Maybe<Count_Functions>;
  expiration?: Maybe<Scalars['Date']['output']>;
  expiration_func?: Maybe<Datetime_Functions>;
  ia_api_key?: Maybe<Scalars['String']['output']>;
  ia_app_id?: Maybe<Scalars['String']['output']>;
  ia_enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  import_agency_target_id?: Maybe<Scalars['String']['output']>;
  import_portal_id?: Maybe<Scalars['Int']['output']>;
  import_url?: Maybe<Scalars['String']['output']>;
  live_since?: Maybe<Scalars['Date']['output']>;
  live_since_func?: Maybe<Datetime_Functions>;
  locations?: Maybe<Array<Maybe<Locations>>>;
  locations_func?: Maybe<Count_Functions>;
  logo?: Maybe<Directus_Files>;
  max_licenses?: Maybe<Scalars['Int']['output']>;
  max_users?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  notifications_settings?: Maybe<Scalars['JSON']['output']>;
  notifications_settings_func?: Maybe<Count_Functions>;
  sc_allow_na_option?: Maybe<Scalars['Boolean']['output']>;
  self_assigment_allow?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  webhook_enable?: Maybe<Scalars['Boolean']['output']>;
  webhook_secret?: Maybe<Scalars['String']['output']>;
  webhook_token?: Maybe<Scalars['String']['output']>;
  webhook_url?: Maybe<Scalars['String']['output']>;
};


export type AgenciesCertificate_LogoArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesDepartmentsArgs = {
  filter?: InputMaybe<Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesExamsArgs = {
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesLocationsArgs = {
  filter?: InputMaybe<Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesLogoArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type AgenciesUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Agencies_Aggregated = {
  __typename?: 'agencies_aggregated';
  avg?: Maybe<Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Agencies_Aggregated_Fields>;
  count?: Maybe<Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Agencies_Aggregated_Fields>;
  min?: Maybe<Agencies_Aggregated_Fields>;
  sum?: Maybe<Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Agencies_Aggregated_Fields>;
};

export type Agencies_Aggregated_Count = {
  __typename?: 'agencies_aggregated_count';
  automatic_notifications_email?: Maybe<Scalars['Int']['output']>;
  bh_enable?: Maybe<Scalars['Int']['output']>;
  billing_code?: Maybe<Scalars['Int']['output']>;
  certificate_logo?: Maybe<Scalars['Int']['output']>;
  custom_allowed_attempts_exams?: Maybe<Scalars['Int']['output']>;
  custom_allowed_attempts_modules?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  default_due_date?: Maybe<Scalars['Int']['output']>;
  default_expiration?: Maybe<Scalars['Int']['output']>;
  departments?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  enable_certificate_logo?: Maybe<Scalars['Int']['output']>;
  exams?: Maybe<Scalars['Int']['output']>;
  expiration?: Maybe<Scalars['Int']['output']>;
  ia_api_key?: Maybe<Scalars['Int']['output']>;
  ia_app_id?: Maybe<Scalars['Int']['output']>;
  ia_enable?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_agency_target_id?: Maybe<Scalars['Int']['output']>;
  import_portal_id?: Maybe<Scalars['Int']['output']>;
  import_url?: Maybe<Scalars['Int']['output']>;
  live_since?: Maybe<Scalars['Int']['output']>;
  locations?: Maybe<Scalars['Int']['output']>;
  logo?: Maybe<Scalars['Int']['output']>;
  max_licenses?: Maybe<Scalars['Int']['output']>;
  max_users?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  notifications_settings?: Maybe<Scalars['Int']['output']>;
  sc_allow_na_option?: Maybe<Scalars['Int']['output']>;
  self_assigment_allow?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  webhook_enable?: Maybe<Scalars['Int']['output']>;
  webhook_secret?: Maybe<Scalars['Int']['output']>;
  webhook_token?: Maybe<Scalars['Int']['output']>;
  webhook_url?: Maybe<Scalars['Int']['output']>;
};

export type Agencies_Aggregated_Fields = {
  __typename?: 'agencies_aggregated_fields';
  custom_allowed_attempts_exams?: Maybe<Scalars['Float']['output']>;
  custom_allowed_attempts_modules?: Maybe<Scalars['Float']['output']>;
  default_due_date?: Maybe<Scalars['Float']['output']>;
  import_portal_id?: Maybe<Scalars['Float']['output']>;
  max_licenses?: Maybe<Scalars['Float']['output']>;
  max_users?: Maybe<Scalars['Float']['output']>;
};

export type Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Agencies_Filter>>>;
  automatic_notifications_email?: InputMaybe<String_Filter_Operators>;
  bh_enable?: InputMaybe<Boolean_Filter_Operators>;
  billing_code?: InputMaybe<String_Filter_Operators>;
  certificate_logo?: InputMaybe<Directus_Files_Filter>;
  custom_allowed_attempts_exams?: InputMaybe<Number_Filter_Operators>;
  custom_allowed_attempts_modules?: InputMaybe<Number_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  default_due_date?: InputMaybe<Number_Filter_Operators>;
  default_expiration?: InputMaybe<String_Filter_Operators>;
  departments?: InputMaybe<Departments_Filter>;
  departments_func?: InputMaybe<Count_Function_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  enable_certificate_logo?: InputMaybe<Boolean_Filter_Operators>;
  exams?: InputMaybe<Junction_Exams_Agencies_Filter>;
  exams_func?: InputMaybe<Count_Function_Filter_Operators>;
  expiration?: InputMaybe<Date_Filter_Operators>;
  expiration_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  ia_api_key?: InputMaybe<String_Filter_Operators>;
  ia_app_id?: InputMaybe<String_Filter_Operators>;
  ia_enable?: InputMaybe<Boolean_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_agency_target_id?: InputMaybe<String_Filter_Operators>;
  import_portal_id?: InputMaybe<Number_Filter_Operators>;
  import_url?: InputMaybe<String_Filter_Operators>;
  live_since?: InputMaybe<Date_Filter_Operators>;
  live_since_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  locations?: InputMaybe<Locations_Filter>;
  locations_func?: InputMaybe<Count_Function_Filter_Operators>;
  logo?: InputMaybe<Directus_Files_Filter>;
  max_licenses?: InputMaybe<Number_Filter_Operators>;
  max_users?: InputMaybe<Number_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  notifications_settings?: InputMaybe<String_Filter_Operators>;
  notifications_settings_func?: InputMaybe<Count_Function_Filter_Operators>;
  sc_allow_na_option?: InputMaybe<Boolean_Filter_Operators>;
  self_assigment_allow?: InputMaybe<Boolean_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  webhook_enable?: InputMaybe<Boolean_Filter_Operators>;
  webhook_secret?: InputMaybe<String_Filter_Operators>;
  webhook_token?: InputMaybe<String_Filter_Operators>;
  webhook_url?: InputMaybe<String_Filter_Operators>;
};

export type Agencies_Mutated = {
  __typename?: 'agencies_mutated';
  data?: Maybe<Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Ancc_Reports = {
  __typename?: 'ancc_reports';
  created_at?: Maybe<Scalars['Date']['output']>;
  created_at_func?: Maybe<Datetime_Functions>;
  created_by?: Maybe<Directus_Users>;
  file_content?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  status?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['Date']['output']>;
  updated_at_func?: Maybe<Datetime_Functions>;
};


export type Ancc_ReportsCreated_ByArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Ancc_Reports_Aggregated = {
  __typename?: 'ancc_reports_aggregated';
  count?: Maybe<Ancc_Reports_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Ancc_Reports_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Ancc_Reports_Aggregated_Count = {
  __typename?: 'ancc_reports_aggregated_count';
  created_at?: Maybe<Scalars['Int']['output']>;
  created_by?: Maybe<Scalars['Int']['output']>;
  file_content?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['Int']['output']>;
};

export type Ancc_Reports_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Ancc_Reports_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Ancc_Reports_Filter>>>;
  created_at?: InputMaybe<Date_Filter_Operators>;
  created_at_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  created_by?: InputMaybe<Directus_Users_Filter>;
  file_content?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  type?: InputMaybe<String_Filter_Operators>;
  updated_at?: InputMaybe<Date_Filter_Operators>;
  updated_at_func?: InputMaybe<Datetime_Function_Filter_Operators>;
};

export type Ancc_Reports_Mutated = {
  __typename?: 'ancc_reports_mutated';
  data?: Maybe<Ancc_Reports>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export enum Auth_Mode {
  Cookie = 'cookie',
  Json = 'json'
}

export type Auth_Tokens = {
  __typename?: 'auth_tokens';
  access_token?: Maybe<Scalars['String']['output']>;
  expires?: Maybe<Scalars['GraphQLBigInt']['output']>;
  refresh_token?: Maybe<Scalars['String']['output']>;
};

export type Bh_Config = {
  __typename?: 'bh_config';
  agency_id?: Maybe<Agencies>;
  bh_access_token?: Maybe<Scalars['String']['output']>;
  bh_refresh_token?: Maybe<Scalars['String']['output']>;
  bh_session_key?: Maybe<Scalars['String']['output']>;
  client_id?: Maybe<Scalars['String']['output']>;
  client_password?: Maybe<Scalars['String']['output']>;
  client_secret?: Maybe<Scalars['String']['output']>;
  client_username?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  is_enable_mapping_checklist?: Maybe<Scalars['Boolean']['output']>;
  is_verified?: Maybe<Scalars['Boolean']['output']>;
  rest_url?: Maybe<Scalars['String']['output']>;
};


export type Bh_ConfigAgency_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Bh_Config_Aggregated = {
  __typename?: 'bh_config_aggregated';
  count?: Maybe<Bh_Config_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Bh_Config_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Bh_Config_Aggregated_Count = {
  __typename?: 'bh_config_aggregated_count';
  agency_id?: Maybe<Scalars['Int']['output']>;
  bh_access_token?: Maybe<Scalars['Int']['output']>;
  bh_refresh_token?: Maybe<Scalars['Int']['output']>;
  bh_session_key?: Maybe<Scalars['Int']['output']>;
  client_id?: Maybe<Scalars['Int']['output']>;
  client_password?: Maybe<Scalars['Int']['output']>;
  client_secret?: Maybe<Scalars['Int']['output']>;
  client_username?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  is_enable_mapping_checklist?: Maybe<Scalars['Int']['output']>;
  is_verified?: Maybe<Scalars['Int']['output']>;
  rest_url?: Maybe<Scalars['Int']['output']>;
};

export type Bh_Config_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Bh_Config_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Bh_Config_Filter>>>;
  agency_id?: InputMaybe<Agencies_Filter>;
  bh_access_token?: InputMaybe<String_Filter_Operators>;
  bh_refresh_token?: InputMaybe<String_Filter_Operators>;
  bh_session_key?: InputMaybe<String_Filter_Operators>;
  client_id?: InputMaybe<String_Filter_Operators>;
  client_password?: InputMaybe<String_Filter_Operators>;
  client_secret?: InputMaybe<String_Filter_Operators>;
  client_username?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  is_enable_mapping_checklist?: InputMaybe<Boolean_Filter_Operators>;
  is_verified?: InputMaybe<Boolean_Filter_Operators>;
  rest_url?: InputMaybe<String_Filter_Operators>;
};

export type Bh_Config_Mutated = {
  __typename?: 'bh_config_mutated';
  data?: Maybe<Bh_Config>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Boolean_Filter_Operators = {
  _eq?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Scalars['Boolean']['input']>;
  _nnull?: InputMaybe<Scalars['Boolean']['input']>;
  _null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Bundles = {
  __typename?: 'bundles';
  agency?: Maybe<Agencies>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  documents?: Maybe<Array<Maybe<Junction_Bundles_Documents>>>;
  documents_func?: Maybe<Count_Functions>;
  exams?: Maybe<Array<Maybe<Junction_Bundles_Exams>>>;
  exams_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  import_group_id?: Maybe<Scalars['Int']['output']>;
  modules?: Maybe<Array<Maybe<Junction_Bundles_Modules_Definition>>>;
  modules_func?: Maybe<Count_Functions>;
  name?: Maybe<Scalars['String']['output']>;
  policies?: Maybe<Array<Maybe<Junction_Bundles_Policies>>>;
  policies_func?: Maybe<Count_Functions>;
  skills_checklists?: Maybe<Array<Maybe<Junction_Bundles_Sc_Definitions>>>;
  skills_checklists_func?: Maybe<Count_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type BundlesAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesDocumentsArgs = {
  filter?: InputMaybe<Junction_Bundles_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesExamsArgs = {
  filter?: InputMaybe<Junction_Bundles_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesModulesArgs = {
  filter?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesPoliciesArgs = {
  filter?: InputMaybe<Junction_Bundles_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesSkills_ChecklistsArgs = {
  filter?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type BundlesUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Bundles_Aggregated = {
  __typename?: 'bundles_aggregated';
  avg?: Maybe<Bundles_Aggregated_Fields>;
  avgDistinct?: Maybe<Bundles_Aggregated_Fields>;
  count?: Maybe<Bundles_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Bundles_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Bundles_Aggregated_Fields>;
  min?: Maybe<Bundles_Aggregated_Fields>;
  sum?: Maybe<Bundles_Aggregated_Fields>;
  sumDistinct?: Maybe<Bundles_Aggregated_Fields>;
};

export type Bundles_Aggregated_Count = {
  __typename?: 'bundles_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  documents?: Maybe<Scalars['Int']['output']>;
  exams?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_group_id?: Maybe<Scalars['Int']['output']>;
  modules?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  policies?: Maybe<Scalars['Int']['output']>;
  skills_checklists?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Bundles_Aggregated_Fields = {
  __typename?: 'bundles_aggregated_fields';
  import_group_id?: Maybe<Scalars['Float']['output']>;
};

export type Bundles_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Bundles_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Bundles_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  documents?: InputMaybe<Junction_Bundles_Documents_Filter>;
  documents_func?: InputMaybe<Count_Function_Filter_Operators>;
  exams?: InputMaybe<Junction_Bundles_Exams_Filter>;
  exams_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_group_id?: InputMaybe<Number_Filter_Operators>;
  modules?: InputMaybe<Junction_Bundles_Modules_Definition_Filter>;
  modules_func?: InputMaybe<Count_Function_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  policies?: InputMaybe<Junction_Bundles_Policies_Filter>;
  policies_func?: InputMaybe<Count_Function_Filter_Operators>;
  skills_checklists?: InputMaybe<Junction_Bundles_Sc_Definitions_Filter>;
  skills_checklists_func?: InputMaybe<Count_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Bundles_Mutated = {
  __typename?: 'bundles_mutated';
  data?: Maybe<Bundles>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Categories = {
  __typename?: 'categories';
  agency?: Maybe<Agencies>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type CategoriesAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type CategoriesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type CategoriesUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Categories_Aggregated = {
  __typename?: 'categories_aggregated';
  count?: Maybe<Categories_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Categories_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Categories_Aggregated_Count = {
  __typename?: 'categories_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Categories_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Categories_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Categories_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  type?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Categories_Mutated = {
  __typename?: 'categories_mutated';
  data?: Maybe<Categories>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Count_Function_Filter_Operators = {
  count?: InputMaybe<Number_Filter_Operators>;
};

export type Count_Functions = {
  __typename?: 'count_functions';
  count?: Maybe<Scalars['Int']['output']>;
};

export type Create_Agencies_Input = {
  automatic_notifications_email?: InputMaybe<Scalars['String']['input']>;
  bh_enable?: InputMaybe<Scalars['Boolean']['input']>;
  billing_code?: InputMaybe<Scalars['String']['input']>;
  certificate_logo?: InputMaybe<Create_Directus_Files_Input>;
  custom_allowed_attempts_exams?: InputMaybe<Scalars['Int']['input']>;
  custom_allowed_attempts_modules?: InputMaybe<Scalars['Int']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  default_due_date?: InputMaybe<Scalars['Int']['input']>;
  default_expiration?: InputMaybe<Scalars['String']['input']>;
  departments?: InputMaybe<Array<InputMaybe<Create_Departments_Input>>>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Input>>>;
  enable_certificate_logo?: InputMaybe<Scalars['Boolean']['input']>;
  exams?: InputMaybe<Array<InputMaybe<Create_Junction_Exams_Agencies_Input>>>;
  expiration?: InputMaybe<Scalars['Date']['input']>;
  ia_api_key?: InputMaybe<Scalars['String']['input']>;
  ia_app_id?: InputMaybe<Scalars['String']['input']>;
  ia_enable?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_agency_target_id?: InputMaybe<Scalars['String']['input']>;
  import_portal_id?: InputMaybe<Scalars['Int']['input']>;
  import_url?: InputMaybe<Scalars['String']['input']>;
  live_since?: InputMaybe<Scalars['Date']['input']>;
  locations?: InputMaybe<Array<InputMaybe<Create_Locations_Input>>>;
  logo?: InputMaybe<Create_Directus_Files_Input>;
  max_licenses?: InputMaybe<Scalars['Int']['input']>;
  max_users?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notifications_settings?: InputMaybe<Scalars['JSON']['input']>;
  sc_allow_na_option?: InputMaybe<Scalars['Boolean']['input']>;
  self_assigment_allow?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  webhook_enable?: InputMaybe<Scalars['Boolean']['input']>;
  webhook_secret?: InputMaybe<Scalars['String']['input']>;
  webhook_token?: InputMaybe<Scalars['String']['input']>;
  webhook_url?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Ancc_Reports_Input = {
  created_at?: InputMaybe<Scalars['Date']['input']>;
  created_by?: InputMaybe<Create_Directus_Users_Input>;
  file_content?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  updated_at?: InputMaybe<Scalars['Date']['input']>;
};

export type Create_Bh_Config_Input = {
  agency_id?: InputMaybe<Create_Agencies_Input>;
  bh_access_token?: InputMaybe<Scalars['String']['input']>;
  bh_refresh_token?: InputMaybe<Scalars['String']['input']>;
  bh_session_key?: InputMaybe<Scalars['String']['input']>;
  client_id?: InputMaybe<Scalars['String']['input']>;
  client_password?: InputMaybe<Scalars['String']['input']>;
  client_secret?: InputMaybe<Scalars['String']['input']>;
  client_username?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  is_enable_mapping_checklist?: InputMaybe<Scalars['Boolean']['input']>;
  is_verified?: InputMaybe<Scalars['Boolean']['input']>;
  rest_url?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Bundles_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  documents?: InputMaybe<Array<InputMaybe<Create_Junction_Bundles_Documents_Input>>>;
  exams?: InputMaybe<Array<InputMaybe<Create_Junction_Bundles_Exams_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_group_id?: InputMaybe<Scalars['Int']['input']>;
  modules?: InputMaybe<Array<InputMaybe<Create_Junction_Bundles_Modules_Definition_Input>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  policies?: InputMaybe<Array<InputMaybe<Create_Junction_Bundles_Policies_Input>>>;
  skills_checklists?: InputMaybe<Array<InputMaybe<Create_Junction_Bundles_Sc_Definitions_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Categories_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Data_Migration_Mappings_Input = {
  content_type?: InputMaybe<Scalars['String']['input']>;
  exclude?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  source_name?: InputMaybe<Scalars['String']['input']>;
  target_id_number?: InputMaybe<Scalars['Int']['input']>;
  target_id_string?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Data_Migration_Records_Input = {
  data_migration?: InputMaybe<Create_Data_Migrations_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  error?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Data_Migrations_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_portal_id?: InputMaybe<Scalars['Int']['input']>;
  running?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Create_Departments_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Collections_Fields_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  field?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Directus_Fields_Meta_Input>;
  schema?: InputMaybe<Directus_Fields_Schema_Input>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Directus_Collections_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  fields?: InputMaybe<Array<Create_Directus_Collections_Fields_Input>>;
  meta?: InputMaybe<Directus_Collections_Meta_Input>;
  schema?: InputMaybe<Directus_Collections_Schema_Input>;
};

export type Create_Directus_Dashboards_Input = {
  color?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  panels?: InputMaybe<Array<InputMaybe<Create_Directus_Panels_Input>>>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Fields_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  field?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Directus_Fields_Meta_Input>;
  schema?: InputMaybe<Directus_Fields_Schema_Input>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Directus_Files_Input = {
  charset?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['Int']['input']>;
  embed?: InputMaybe<Scalars['String']['input']>;
  filename_disk?: InputMaybe<Scalars['String']['input']>;
  filename_download: Scalars['String']['input'];
  filesize?: InputMaybe<Scalars['GraphQLBigInt']['input']>;
  folder?: InputMaybe<Create_Directus_Folders_Input>;
  height?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  modified_by?: InputMaybe<Create_Directus_Users_Input>;
  modified_on?: InputMaybe<Scalars['Date']['input']>;
  storage: Scalars['String']['input'];
  tags?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  uploaded_by?: InputMaybe<Create_Directus_Users_Input>;
  uploaded_on?: InputMaybe<Scalars['Date']['input']>;
  width?: InputMaybe<Scalars['Int']['input']>;
};

export type Create_Directus_Flows_Input = {
  accountability?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  operation?: InputMaybe<Create_Directus_Operations_Input>;
  operations?: InputMaybe<Array<InputMaybe<Create_Directus_Operations_Input>>>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  trigger?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Folders_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  parent?: InputMaybe<Create_Directus_Folders_Input>;
};

export type Create_Directus_Notifications_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  item?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  recipient?: InputMaybe<Create_Directus_Users_Input>;
  sender?: InputMaybe<Create_Directus_Users_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  subject: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['Date']['input']>;
};

export type Create_Directus_Operations_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  flow?: InputMaybe<Create_Directus_Flows_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  key: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  position_x: Scalars['Int']['input'];
  position_y: Scalars['Int']['input'];
  reject?: InputMaybe<Create_Directus_Operations_Input>;
  resolve?: InputMaybe<Create_Directus_Operations_Input>;
  type: Scalars['String']['input'];
  user_created?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Panels_Input = {
  color?: InputMaybe<Scalars['String']['input']>;
  dashboard?: InputMaybe<Create_Directus_Dashboards_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  height: Scalars['Int']['input'];
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  position_x: Scalars['Int']['input'];
  position_y: Scalars['Int']['input'];
  show_header: Scalars['Boolean']['input'];
  type: Scalars['String']['input'];
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  width: Scalars['Int']['input'];
};

export type Create_Directus_Permissions_Input = {
  action: Scalars['String']['input'];
  collection: Scalars['String']['input'];
  fields?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  permissions?: InputMaybe<Scalars['JSON']['input']>;
  presets?: InputMaybe<Scalars['JSON']['input']>;
  role?: InputMaybe<Create_Directus_Roles_Input>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
};

export type Create_Directus_Presets_Input = {
  bookmark?: InputMaybe<Scalars['String']['input']>;
  collection?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['JSON']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  layout_options?: InputMaybe<Scalars['JSON']['input']>;
  layout_query?: InputMaybe<Scalars['JSON']['input']>;
  refresh_interval?: InputMaybe<Scalars['Int']['input']>;
  role?: InputMaybe<Create_Directus_Roles_Input>;
  search?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Relations_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  field?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Directus_Relations_Meta_Input>;
  related_collection?: InputMaybe<Scalars['String']['input']>;
  schema?: InputMaybe<Directus_Relations_Schema_Input>;
};

export type Create_Directus_Roles_Input = {
  admin_access: Scalars['Boolean']['input'];
  app_access?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  enforce_tfa: Scalars['Boolean']['input'];
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  ip_access?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  name: Scalars['String']['input'];
  users?: InputMaybe<Array<InputMaybe<Create_Directus_Users_Input>>>;
};

export type Create_Directus_Shares_Input = {
  collection: Scalars['String']['input'];
  date_created?: InputMaybe<Scalars['Date']['input']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_end?: InputMaybe<Scalars['Date']['input']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_start?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  item: Scalars['String']['input'];
  /** $t:shared_leave_blank_for_unlimited */
  max_uses?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  password?: InputMaybe<Scalars['Hash']['input']>;
  role?: InputMaybe<Create_Directus_Roles_Input>;
  times_used?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Directus_Translations_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key: Scalars['String']['input'];
  language: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type Create_Directus_Users_Input = {
  address_line_1?: InputMaybe<Scalars['String']['input']>;
  address_line_2?: InputMaybe<Scalars['String']['input']>;
  agencies?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Input>>>;
  auth_data?: InputMaybe<Scalars['JSON']['input']>;
  avatar?: InputMaybe<Create_Directus_Files_Input>;
  city?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  documents?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Documents_Input>>>;
  email?: InputMaybe<Scalars['String']['input']>;
  email_notifications?: InputMaybe<Scalars['Boolean']['input']>;
  exams?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Exams_Input>>>;
  external_identifier?: InputMaybe<Scalars['String']['input']>;
  first_name?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_student_id?: InputMaybe<Scalars['Int']['input']>;
  imported?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  last_access?: InputMaybe<Scalars['Date']['input']>;
  last_name?: InputMaybe<Scalars['String']['input']>;
  last_page?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  modules?: InputMaybe<Array<InputMaybe<Create_Junction_Modules_Definition_Directus_Users_Input>>>;
  password?: InputMaybe<Scalars['Hash']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  policies?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Policies_Input>>>;
  provider?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Create_Directus_Roles_Input>;
  sc_definitions?: InputMaybe<Array<InputMaybe<Create_Junction_Sc_Definitions_Directus_Users_Input>>>;
  state?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  tfa_secret?: InputMaybe<Scalars['Hash']['input']>;
  theme?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['Hash']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Directus_Webhooks_Input = {
  actions: Array<InputMaybe<Scalars['String']['input']>>;
  collections: Array<InputMaybe<Scalars['String']['input']>>;
  data?: InputMaybe<Scalars['Boolean']['input']>;
  headers?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  method?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  url: Scalars['String']['input'];
};

export type Create_Documents_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Create_Junction_Documents_Agencies_Input>>>;
  categories?: InputMaybe<Array<InputMaybe<Create_Junction_Documents_Categories_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Documents_Input>>>;
  document?: InputMaybe<Create_Directus_Files_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_document_id?: InputMaybe<Scalars['Int']['input']>;
  import_document_url?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Exam_Results_Input = {
  answer: Scalars['JSON']['input'];
  assignment_id?: InputMaybe<Create_Junction_Directus_Users_Exams_Input>;
  attempt?: InputMaybe<Scalars['Int']['input']>;
  correct: Scalars['Boolean']['input'];
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  exam_versions_id?: InputMaybe<Create_Exam_Versions_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  question_versions_id?: InputMaybe<Create_Question_Versions_Input>;
  questions_id?: InputMaybe<Create_Questions_Input>;
  time_taken: Scalars['Int']['input'];
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Exam_Versions_Input = {
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  contact_hour?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  exam?: InputMaybe<Create_Exams_Input>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  fail_message?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  is_proctoring?: InputMaybe<Scalars['Boolean']['input']>;
  outline?: InputMaybe<Create_Directus_Files_Input>;
  passing_message?: InputMaybe<Scalars['String']['input']>;
  passing_score?: InputMaybe<Scalars['Int']['input']>;
  questions?: InputMaybe<Array<InputMaybe<Create_Junction_Exam_Versions_Questions_Input>>>;
  questions_to_give?: InputMaybe<Scalars['Int']['input']>;
  shuffle_questions?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Exams_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Create_Junction_Exams_Agencies_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Exams_Input>>>;
  exam_versions?: InputMaybe<Array<InputMaybe<Create_Exam_Versions_Input>>>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_ceu?: InputMaybe<Scalars['Float']['input']>;
  import_course_id?: InputMaybe<Scalars['Int']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  modality?: InputMaybe<Create_Categories_Input>;
  specialties?: InputMaybe<Array<InputMaybe<Create_Junction_Exams_Categories_Specialties_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  subspecialties?: InputMaybe<Array<InputMaybe<Create_Junction_Exams_Categories_Subspecialties_Input>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Feature_Flags_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  enabled: Scalars['Boolean']['input'];
  flag_key: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Iframe_Tokens_Input = {
  agency_id?: InputMaybe<Create_Agencies_Input>;
  ats_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  jwt_token?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Junction_Bundles_Documents_Input = {
  bundles_id?: InputMaybe<Create_Bundles_Input>;
  documents_id?: InputMaybe<Create_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Bundles_Exams_Input = {
  bundles_id?: InputMaybe<Create_Bundles_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Bundles_Modules_Definition_Input = {
  bundles_id?: InputMaybe<Create_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  modules_definition_id?: InputMaybe<Create_Modules_Definition_Input>;
};

export type Create_Junction_Bundles_Policies_Input = {
  bundles_id?: InputMaybe<Create_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Create_Policies_Input>;
};

export type Create_Junction_Bundles_Sc_Definitions_Input = {
  bundles_id?: InputMaybe<Create_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sc_definitions_id?: InputMaybe<Create_Sc_Definitions_Input>;
};

export type Create_Junction_Directus_Users_Agencies_Departments_Input = {
  departments_id?: InputMaybe<Create_Departments_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Create_Junction_Directus_Users_Agencies_Input>;
};

export type Create_Junction_Directus_Users_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  bullhorn_id?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  departments?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Departments_Input>>>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  employee_number?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_student_id?: InputMaybe<Scalars['Int']['input']>;
  locations?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Locations_Input>>>;
  specialties?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Specialties_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  supervisors?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Agencies_Supervisors_Input>>>;
};

export type Create_Junction_Directus_Users_Agencies_Locations_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Create_Junction_Directus_Users_Agencies_Input>;
  locations_id?: InputMaybe<Create_Locations_Input>;
};

export type Create_Junction_Directus_Users_Agencies_Specialties_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Create_Junction_Directus_Users_Agencies_Input>;
  specialties_id?: InputMaybe<Create_Specialties_Input>;
};

export type Create_Junction_Directus_Users_Agencies_Supervisors_Input = {
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Create_Junction_Directus_Users_Agencies_Input>;
};

export type Create_Junction_Directus_Users_Documents_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Create_Bundles_Input>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  documents_id?: InputMaybe<Create_Documents_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_library_assignment_id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<Scalars['Date']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Junction_Directus_Users_Exams_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  attempt_due?: InputMaybe<Scalars['Date']['input']>;
  attempts_used?: InputMaybe<Scalars['Int']['input']>;
  bundle_id?: InputMaybe<Create_Bundles_Input>;
  cert_code?: InputMaybe<Scalars['String']['input']>;
  cert_expiry_date?: InputMaybe<Scalars['Date']['input']>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  exam_versions_id?: InputMaybe<Create_Exam_Versions_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_cert_url?: InputMaybe<Scalars['String']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  question_versions_list?: InputMaybe<Scalars['JSON']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  score?: InputMaybe<Scalars['Int']['input']>;
  score_history?: InputMaybe<Scalars['JSON']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Junction_Directus_Users_Policies_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Create_Bundles_Input>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_affirmation_id?: InputMaybe<Scalars['Int']['input']>;
  policies_id?: InputMaybe<Create_Policies_Input>;
  read?: InputMaybe<Scalars['Date']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  signature_file?: InputMaybe<Create_Directus_Files_Input>;
  signed_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Junction_Documents_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  documents_id?: InputMaybe<Create_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Documents_Categories_Input = {
  categories_id?: InputMaybe<Create_Categories_Input>;
  documents_id?: InputMaybe<Create_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Exam_Versions_Questions_Input = {
  exam_versions_id?: InputMaybe<Create_Exam_Versions_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  questions_id?: InputMaybe<Create_Questions_Input>;
  sort?: InputMaybe<Scalars['Int']['input']>;
};

export type Create_Junction_Exams_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Exams_Categories_Specialties_Input = {
  categories_id?: InputMaybe<Create_Categories_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Exams_Categories_Subspecialties_Input = {
  categories_id?: InputMaybe<Create_Categories_Input>;
  exams_id?: InputMaybe<Create_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Create_Junction_Modules_Definition_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  modules_definition_id?: InputMaybe<Create_Modules_Definition_Input>;
};

export type Create_Junction_Modules_Definition_Directus_Users_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  approved?: InputMaybe<Scalars['Boolean']['input']>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  attempts?: InputMaybe<Array<InputMaybe<Create_Modules_Results_Input>>>;
  attempts_used?: InputMaybe<Scalars['Int']['input']>;
  bundle_id?: InputMaybe<Create_Bundles_Input>;
  cert_code?: InputMaybe<Scalars['String']['input']>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_cert_url?: InputMaybe<Scalars['String']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  last_attempt?: InputMaybe<Create_Modules_Results_Input>;
  module_version?: InputMaybe<Create_Modules_Versions_Input>;
  modules_definition_id?: InputMaybe<Create_Modules_Definition_Input>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  score?: InputMaybe<Scalars['Float']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Junction_Policies_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Create_Policies_Input>;
};

export type Create_Junction_Policies_Categories_Input = {
  categories_id?: InputMaybe<Create_Categories_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Create_Policies_Input>;
};

export type Create_Junction_Sc_Definitions_Agencies_Input = {
  agencies_id?: InputMaybe<Create_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sc_definitions_id?: InputMaybe<Create_Sc_Definitions_Input>;
};

export type Create_Junction_Sc_Definitions_Directus_Users_Input = {
  accept_agreements?: InputMaybe<Scalars['Boolean']['input']>;
  agency?: InputMaybe<Create_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Create_Bundles_Input>;
  can_retake?: InputMaybe<Scalars['Boolean']['input']>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_survey_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  is_required?: InputMaybe<Scalars['Boolean']['input']>;
  questions?: InputMaybe<Scalars['JSON']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  sc_definitions_id?: InputMaybe<Create_Sc_Definitions_Input>;
  skillchecklist_version?: InputMaybe<Create_Sc_Versions_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Locations_Input = {
  agency?: InputMaybe<Create_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Maintenance_Windows_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  start_date_time?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Modules_Definition_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Create_Junction_Modules_Definition_Agencies_Input>>>;
  copyright?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Modules_Definition_Directus_Users_Input>>>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_ceu?: InputMaybe<Scalars['Float']['input']>;
  import_course_id?: InputMaybe<Scalars['Int']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  last_version?: InputMaybe<Create_Modules_Versions_Input>;
  modality?: InputMaybe<Create_Categories_Input>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  specialty?: InputMaybe<Create_Categories_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  sub_specialty?: InputMaybe<Create_Categories_Input>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Create_Modules_Versions_Input>>>;
};

export type Create_Modules_Results_Input = {
  answers?: InputMaybe<Scalars['JSON']['input']>;
  assignment_id?: InputMaybe<Create_Junction_Modules_Definition_Directus_Users_Input>;
  attempt?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  module_definition_id?: InputMaybe<Create_Modules_Definition_Input>;
  module_version_id?: InputMaybe<Create_Modules_Versions_Input>;
  score?: InputMaybe<Scalars['Float']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Modules_Versions_Input = {
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  contact_hour?: InputMaybe<Scalars['Float']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  definition?: InputMaybe<Create_Modules_Definition_Input>;
  entry_point?: InputMaybe<Scalars['String']['input']>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  package?: InputMaybe<Create_Directus_Files_Input>;
  package_status?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  version_number?: InputMaybe<Scalars['Float']['input']>;
};

export type Create_Policies_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Create_Junction_Policies_Agencies_Input>>>;
  categories?: InputMaybe<Array<InputMaybe<Create_Junction_Policies_Categories_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Directus_Users_Policies_Input>>>;
  document?: InputMaybe<Create_Directus_Files_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_policy_id?: InputMaybe<Scalars['Int']['input']>;
  import_policy_url?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Question_Versions_Input = {
  answer?: InputMaybe<Scalars['JSON']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<Create_Directus_Files_Input>;
  question: Scalars['JSON']['input'];
  question_id?: InputMaybe<Create_Questions_Input>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Questions_Input = {
  category?: InputMaybe<Create_Categories_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  exam_versions?: InputMaybe<Array<InputMaybe<Create_Junction_Exam_Versions_Questions_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Create_Question_Versions_Input>>>;
};

export type Create_Sc_Definitions_Input = {
  agency?: InputMaybe<Array<InputMaybe<Create_Junction_Sc_Definitions_Agencies_Input>>>;
  category?: InputMaybe<Create_Categories_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Create_Junction_Sc_Definitions_Directus_Users_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  import_survey_id?: InputMaybe<Scalars['Int']['input']>;
  last_version?: InputMaybe<Create_Sc_Versions_Input>;
  original_item_definition?: InputMaybe<Create_Sc_Definitions_Input>;
  original_item_version?: InputMaybe<Create_Sc_Versions_Input>;
  reference_number?: InputMaybe<Scalars['String']['input']>;
  speciality?: InputMaybe<Create_Categories_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  sub_speciality?: InputMaybe<Create_Categories_Input>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Create_Sc_Versions_Input>>>;
};

export type Create_Sc_Versions_Input = {
  agreements?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  definition?: InputMaybe<Create_Sc_Definitions_Input>;
  description?: InputMaybe<Scalars['String']['input']>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  instructions?: InputMaybe<Scalars['String']['input']>;
  is_new_format?: InputMaybe<Scalars['Boolean']['input']>;
  questions?: InputMaybe<Scalars['JSON']['input']>;
  total_questions?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
  version_number?: InputMaybe<Scalars['String']['input']>;
};

export type Create_Specialties_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Create_Directus_Users_Input>;
  user_updated?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_User_Logs_Input = {
  assignment_id?: InputMaybe<Scalars['String']['input']>;
  competency_id?: InputMaybe<Scalars['String']['input']>;
  competency_type?: InputMaybe<Scalars['String']['input']>;
  created_on?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users_id?: InputMaybe<Create_Directus_Users_Input>;
  event_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  initiator_id?: InputMaybe<Create_Directus_Users_Input>;
};

export type Create_Webhooks_Logs_Input = {
  agency?: InputMaybe<Scalars['String']['input']>;
  assignment_id?: InputMaybe<Scalars['String']['input']>;
  competency_type?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  event_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  method?: InputMaybe<Scalars['String']['input']>;
  payload?: InputMaybe<Scalars['JSON']['input']>;
  retry_count?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['String']['input']>;
};

export type Data_Migration_Mappings = {
  __typename?: 'data_migration_mappings';
  content_type?: Maybe<Scalars['String']['output']>;
  exclude?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  source_name?: Maybe<Scalars['String']['output']>;
  target_id_number?: Maybe<Scalars['Int']['output']>;
  target_id_string?: Maybe<Scalars['String']['output']>;
};

export type Data_Migration_Mappings_Aggregated = {
  __typename?: 'data_migration_mappings_aggregated';
  avg?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
  avgDistinct?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
  count?: Maybe<Data_Migration_Mappings_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Data_Migration_Mappings_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
  min?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
  sum?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
  sumDistinct?: Maybe<Data_Migration_Mappings_Aggregated_Fields>;
};

export type Data_Migration_Mappings_Aggregated_Count = {
  __typename?: 'data_migration_mappings_aggregated_count';
  content_type?: Maybe<Scalars['Int']['output']>;
  exclude?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  source_name?: Maybe<Scalars['Int']['output']>;
  target_id_number?: Maybe<Scalars['Int']['output']>;
  target_id_string?: Maybe<Scalars['Int']['output']>;
};

export type Data_Migration_Mappings_Aggregated_Fields = {
  __typename?: 'data_migration_mappings_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  target_id_number?: Maybe<Scalars['Float']['output']>;
};

export type Data_Migration_Mappings_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Data_Migration_Mappings_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Data_Migration_Mappings_Filter>>>;
  content_type?: InputMaybe<String_Filter_Operators>;
  exclude?: InputMaybe<Boolean_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  source_name?: InputMaybe<String_Filter_Operators>;
  target_id_number?: InputMaybe<Number_Filter_Operators>;
  target_id_string?: InputMaybe<String_Filter_Operators>;
};

export type Data_Migration_Mappings_Mutated = {
  __typename?: 'data_migration_mappings_mutated';
  data?: Maybe<Data_Migration_Mappings>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Data_Migration_Records = {
  __typename?: 'data_migration_records';
  data_migration?: Maybe<Data_Migrations>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  error?: Maybe<Scalars['JSON']['output']>;
  error_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  level?: Maybe<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
};


export type Data_Migration_RecordsData_MigrationArgs = {
  filter?: InputMaybe<Data_Migrations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Data_Migration_Records_Aggregated = {
  __typename?: 'data_migration_records_aggregated';
  avg?: Maybe<Data_Migration_Records_Aggregated_Fields>;
  avgDistinct?: Maybe<Data_Migration_Records_Aggregated_Fields>;
  count?: Maybe<Data_Migration_Records_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Data_Migration_Records_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Data_Migration_Records_Aggregated_Fields>;
  min?: Maybe<Data_Migration_Records_Aggregated_Fields>;
  sum?: Maybe<Data_Migration_Records_Aggregated_Fields>;
  sumDistinct?: Maybe<Data_Migration_Records_Aggregated_Fields>;
};

export type Data_Migration_Records_Aggregated_Count = {
  __typename?: 'data_migration_records_aggregated_count';
  data_migration?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  error?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  message?: Maybe<Scalars['Int']['output']>;
};

export type Data_Migration_Records_Aggregated_Fields = {
  __typename?: 'data_migration_records_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Data_Migration_Records_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Data_Migration_Records_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Data_Migration_Records_Filter>>>;
  data_migration?: InputMaybe<Data_Migrations_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  error?: InputMaybe<String_Filter_Operators>;
  error_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  level?: InputMaybe<String_Filter_Operators>;
  message?: InputMaybe<String_Filter_Operators>;
};

export type Data_Migration_Records_Mutated = {
  __typename?: 'data_migration_records_mutated';
  data?: Maybe<Data_Migration_Records>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Data_Migrations = {
  __typename?: 'data_migrations';
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_portal_id?: Maybe<Scalars['Int']['output']>;
  running?: Maybe<Scalars['Boolean']['output']>;
};

export type Data_Migrations_Aggregated = {
  __typename?: 'data_migrations_aggregated';
  avg?: Maybe<Data_Migrations_Aggregated_Fields>;
  avgDistinct?: Maybe<Data_Migrations_Aggregated_Fields>;
  count?: Maybe<Data_Migrations_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Data_Migrations_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Data_Migrations_Aggregated_Fields>;
  min?: Maybe<Data_Migrations_Aggregated_Fields>;
  sum?: Maybe<Data_Migrations_Aggregated_Fields>;
  sumDistinct?: Maybe<Data_Migrations_Aggregated_Fields>;
};

export type Data_Migrations_Aggregated_Count = {
  __typename?: 'data_migrations_aggregated_count';
  date_created?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_portal_id?: Maybe<Scalars['Int']['output']>;
  running?: Maybe<Scalars['Int']['output']>;
};

export type Data_Migrations_Aggregated_Fields = {
  __typename?: 'data_migrations_aggregated_fields';
  import_portal_id?: Maybe<Scalars['Float']['output']>;
};

export type Data_Migrations_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Data_Migrations_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Data_Migrations_Filter>>>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_portal_id?: InputMaybe<Number_Filter_Operators>;
  running?: InputMaybe<Boolean_Filter_Operators>;
};

export type Data_Migrations_Mutated = {
  __typename?: 'data_migrations_mutated';
  data?: Maybe<Data_Migrations>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Date_Filter_Operators = {
  _between?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _eq?: InputMaybe<Scalars['String']['input']>;
  _gt?: InputMaybe<Scalars['String']['input']>;
  _gte?: InputMaybe<Scalars['String']['input']>;
  _in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  _lt?: InputMaybe<Scalars['String']['input']>;
  _lte?: InputMaybe<Scalars['String']['input']>;
  _nbetween?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _neq?: InputMaybe<Scalars['String']['input']>;
  _nin?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  _nnull?: InputMaybe<Scalars['Boolean']['input']>;
  _null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Date_Function_Filter_Operators = {
  day?: InputMaybe<Number_Filter_Operators>;
  month?: InputMaybe<Number_Filter_Operators>;
  week?: InputMaybe<Number_Filter_Operators>;
  weekday?: InputMaybe<Number_Filter_Operators>;
  year?: InputMaybe<Number_Filter_Operators>;
};

export type Date_Functions = {
  __typename?: 'date_functions';
  day?: Maybe<Scalars['Int']['output']>;
  month?: Maybe<Scalars['Int']['output']>;
  week?: Maybe<Scalars['Int']['output']>;
  weekday?: Maybe<Scalars['Int']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type Datetime_Function_Filter_Operators = {
  day?: InputMaybe<Number_Filter_Operators>;
  hour?: InputMaybe<Number_Filter_Operators>;
  minute?: InputMaybe<Number_Filter_Operators>;
  month?: InputMaybe<Number_Filter_Operators>;
  second?: InputMaybe<Number_Filter_Operators>;
  week?: InputMaybe<Number_Filter_Operators>;
  weekday?: InputMaybe<Number_Filter_Operators>;
  year?: InputMaybe<Number_Filter_Operators>;
};

export type Datetime_Functions = {
  __typename?: 'datetime_functions';
  day?: Maybe<Scalars['Int']['output']>;
  hour?: Maybe<Scalars['Int']['output']>;
  minute?: Maybe<Scalars['Int']['output']>;
  month?: Maybe<Scalars['Int']['output']>;
  second?: Maybe<Scalars['Int']['output']>;
  week?: Maybe<Scalars['Int']['output']>;
  weekday?: Maybe<Scalars['Int']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type Delete_Collection = {
  __typename?: 'delete_collection';
  collection?: Maybe<Scalars['String']['output']>;
};

export type Delete_Field = {
  __typename?: 'delete_field';
  collection?: Maybe<Scalars['String']['output']>;
  field?: Maybe<Scalars['String']['output']>;
};

export type Delete_Many = {
  __typename?: 'delete_many';
  ids: Array<Maybe<Scalars['ID']['output']>>;
};

export type Delete_One = {
  __typename?: 'delete_one';
  id: Scalars['ID']['output'];
};

export type Delete_Relation = {
  __typename?: 'delete_relation';
  collection?: Maybe<Scalars['String']['output']>;
  field?: Maybe<Scalars['String']['output']>;
};

export type Departments = {
  __typename?: 'departments';
  agency?: Maybe<Agencies>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type DepartmentsAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DepartmentsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DepartmentsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Departments_Aggregated = {
  __typename?: 'departments_aggregated';
  avg?: Maybe<Departments_Aggregated_Fields>;
  avgDistinct?: Maybe<Departments_Aggregated_Fields>;
  count?: Maybe<Departments_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Departments_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Departments_Aggregated_Fields>;
  min?: Maybe<Departments_Aggregated_Fields>;
  sum?: Maybe<Departments_Aggregated_Fields>;
  sumDistinct?: Maybe<Departments_Aggregated_Fields>;
};

export type Departments_Aggregated_Count = {
  __typename?: 'departments_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Departments_Aggregated_Fields = {
  __typename?: 'departments_aggregated_fields';
  import_id?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
};

export type Departments_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Departments_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Departments_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_id?: InputMaybe<Number_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  sort?: InputMaybe<Number_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Departments_Mutated = {
  __typename?: 'departments_mutated';
  data?: Maybe<Departments>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Activity = {
  __typename?: 'directus_activity';
  action: Scalars['String']['output'];
  collection: Scalars['String']['output'];
  comment?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  ip?: Maybe<Scalars['String']['output']>;
  item: Scalars['String']['output'];
  origin?: Maybe<Scalars['String']['output']>;
  revisions?: Maybe<Array<Maybe<Directus_Revisions>>>;
  revisions_func?: Maybe<Count_Functions>;
  timestamp?: Maybe<Scalars['Date']['output']>;
  timestamp_func?: Maybe<Datetime_Functions>;
  user?: Maybe<Directus_Users>;
  user_agent?: Maybe<Scalars['String']['output']>;
};


export type Directus_ActivityRevisionsArgs = {
  filter?: InputMaybe<Directus_Revisions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_ActivityUserArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Activity_Aggregated = {
  __typename?: 'directus_activity_aggregated';
  avg?: Maybe<Directus_Activity_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Activity_Aggregated_Fields>;
  count?: Maybe<Directus_Activity_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Activity_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Activity_Aggregated_Fields>;
  min?: Maybe<Directus_Activity_Aggregated_Fields>;
  sum?: Maybe<Directus_Activity_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Activity_Aggregated_Fields>;
};

export type Directus_Activity_Aggregated_Count = {
  __typename?: 'directus_activity_aggregated_count';
  action?: Maybe<Scalars['Int']['output']>;
  collection?: Maybe<Scalars['Int']['output']>;
  comment?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  ip?: Maybe<Scalars['Int']['output']>;
  item?: Maybe<Scalars['Int']['output']>;
  origin?: Maybe<Scalars['Int']['output']>;
  revisions?: Maybe<Scalars['Int']['output']>;
  timestamp?: Maybe<Scalars['Int']['output']>;
  user?: Maybe<Scalars['Int']['output']>;
  user_agent?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Activity_Aggregated_Fields = {
  __typename?: 'directus_activity_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Activity_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Activity_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Activity_Filter>>>;
  action?: InputMaybe<String_Filter_Operators>;
  collection?: InputMaybe<String_Filter_Operators>;
  comment?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  ip?: InputMaybe<String_Filter_Operators>;
  item?: InputMaybe<String_Filter_Operators>;
  origin?: InputMaybe<String_Filter_Operators>;
  revisions?: InputMaybe<Directus_Revisions_Filter>;
  revisions_func?: InputMaybe<Count_Function_Filter_Operators>;
  timestamp?: InputMaybe<Date_Filter_Operators>;
  timestamp_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  user?: InputMaybe<Directus_Users_Filter>;
  user_agent?: InputMaybe<String_Filter_Operators>;
};

export type Directus_Activity_Mutated = {
  __typename?: 'directus_activity_mutated';
  data?: Maybe<Directus_Activity>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Collections = {
  __typename?: 'directus_collections';
  collection?: Maybe<Scalars['String']['output']>;
  meta?: Maybe<Directus_Collections_Meta>;
  schema?: Maybe<Directus_Collections_Schema>;
};

export type Directus_Collections_Meta = {
  __typename?: 'directus_collections_meta';
  accountability?: Maybe<Scalars['String']['output']>;
  archive_app_filter: Scalars['Boolean']['output'];
  archive_field?: Maybe<Scalars['String']['output']>;
  archive_value?: Maybe<Scalars['String']['output']>;
  collapse: Scalars['String']['output'];
  collection: Scalars['String']['output'];
  color?: Maybe<Scalars['String']['output']>;
  display_template?: Maybe<Scalars['String']['output']>;
  group?: Maybe<Scalars['String']['output']>;
  hidden: Scalars['Boolean']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  item_duplication_fields?: Maybe<Scalars['JSON']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  preview_url?: Maybe<Scalars['String']['output']>;
  singleton: Scalars['Boolean']['output'];
  sort?: Maybe<Scalars['Int']['output']>;
  sort_field?: Maybe<Scalars['String']['output']>;
  translations?: Maybe<Scalars['JSON']['output']>;
  unarchive_value?: Maybe<Scalars['String']['output']>;
};

export type Directus_Collections_Meta_Input = {
  accountability?: InputMaybe<Scalars['String']['input']>;
  archive_app_filter: Scalars['Boolean']['input'];
  archive_field?: InputMaybe<Scalars['String']['input']>;
  archive_value?: InputMaybe<Scalars['String']['input']>;
  collapse: Scalars['String']['input'];
  collection: Scalars['String']['input'];
  color?: InputMaybe<Scalars['String']['input']>;
  display_template?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<Scalars['String']['input']>;
  hidden: Scalars['Boolean']['input'];
  icon?: InputMaybe<Scalars['String']['input']>;
  item_duplication_fields?: InputMaybe<Scalars['JSON']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  preview_url?: InputMaybe<Scalars['String']['input']>;
  singleton: Scalars['Boolean']['input'];
  sort?: InputMaybe<Scalars['Int']['input']>;
  sort_field?: InputMaybe<Scalars['String']['input']>;
  translations?: InputMaybe<Scalars['JSON']['input']>;
  unarchive_value?: InputMaybe<Scalars['String']['input']>;
};

export type Directus_Collections_Schema = {
  __typename?: 'directus_collections_schema';
  comment?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type Directus_Collections_Schema_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type Directus_Dashboards = {
  __typename?: 'directus_dashboards';
  color?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  note?: Maybe<Scalars['String']['output']>;
  panels?: Maybe<Array<Maybe<Directus_Panels>>>;
  panels_func?: Maybe<Count_Functions>;
  user_created?: Maybe<Directus_Users>;
};


export type Directus_DashboardsPanelsArgs = {
  filter?: InputMaybe<Directus_Panels_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_DashboardsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Dashboards_Aggregated = {
  __typename?: 'directus_dashboards_aggregated';
  count?: Maybe<Directus_Dashboards_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Dashboards_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Directus_Dashboards_Aggregated_Count = {
  __typename?: 'directus_dashboards_aggregated_count';
  color?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  note?: Maybe<Scalars['Int']['output']>;
  panels?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Dashboards_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Dashboards_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Dashboards_Filter>>>;
  color?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  icon?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  note?: InputMaybe<String_Filter_Operators>;
  panels?: InputMaybe<Directus_Panels_Filter>;
  panels_func?: InputMaybe<Count_Function_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
};

export type Directus_Dashboards_Mutated = {
  __typename?: 'directus_dashboards_mutated';
  data?: Maybe<Directus_Dashboards>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Fields = {
  __typename?: 'directus_fields';
  collection?: Maybe<Scalars['String']['output']>;
  field?: Maybe<Scalars['String']['output']>;
  meta?: Maybe<Directus_Fields_Meta>;
  schema?: Maybe<Directus_Fields_Schema>;
  type?: Maybe<Scalars['String']['output']>;
};

export type Directus_Fields_Meta = {
  __typename?: 'directus_fields_meta';
  collection: Scalars['String']['output'];
  conditions?: Maybe<Scalars['JSON']['output']>;
  display?: Maybe<Scalars['String']['output']>;
  display_options?: Maybe<Scalars['JSON']['output']>;
  field: Scalars['String']['output'];
  group?: Maybe<Scalars['String']['output']>;
  hidden: Scalars['Boolean']['output'];
  id: Scalars['Int']['output'];
  interface?: Maybe<Scalars['String']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  options?: Maybe<Scalars['JSON']['output']>;
  readonly: Scalars['Boolean']['output'];
  required?: Maybe<Scalars['Boolean']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  special?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  translations?: Maybe<Scalars['JSON']['output']>;
  validation?: Maybe<Scalars['JSON']['output']>;
  validation_message?: Maybe<Scalars['String']['output']>;
  width?: Maybe<Scalars['String']['output']>;
};

export type Directus_Fields_Meta_Input = {
  collection: Scalars['String']['input'];
  conditions?: InputMaybe<Scalars['JSON']['input']>;
  display?: InputMaybe<Scalars['String']['input']>;
  display_options?: InputMaybe<Scalars['JSON']['input']>;
  field: Scalars['String']['input'];
  group?: InputMaybe<Scalars['String']['input']>;
  hidden: Scalars['Boolean']['input'];
  id: Scalars['Int']['input'];
  interface?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  readonly: Scalars['Boolean']['input'];
  required?: InputMaybe<Scalars['Boolean']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  special?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  translations?: InputMaybe<Scalars['JSON']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validation_message?: InputMaybe<Scalars['String']['input']>;
  width?: InputMaybe<Scalars['String']['input']>;
};

export type Directus_Fields_Schema = {
  __typename?: 'directus_fields_schema';
  comment?: Maybe<Scalars['String']['output']>;
  data_type?: Maybe<Scalars['String']['output']>;
  default_value?: Maybe<Scalars['String']['output']>;
  foreign_key_column?: Maybe<Scalars['String']['output']>;
  foreign_key_table?: Maybe<Scalars['String']['output']>;
  has_auto_increment?: Maybe<Scalars['Boolean']['output']>;
  is_nullable?: Maybe<Scalars['Boolean']['output']>;
  is_primary_key?: Maybe<Scalars['Boolean']['output']>;
  is_unique?: Maybe<Scalars['Boolean']['output']>;
  max_length?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  numeric_precision?: Maybe<Scalars['Int']['output']>;
  numeric_scale?: Maybe<Scalars['Int']['output']>;
  table?: Maybe<Scalars['String']['output']>;
};

export type Directus_Fields_Schema_Input = {
  comment?: InputMaybe<Scalars['String']['input']>;
  data_type?: InputMaybe<Scalars['String']['input']>;
  default_value?: InputMaybe<Scalars['String']['input']>;
  foreign_key_column?: InputMaybe<Scalars['String']['input']>;
  foreign_key_table?: InputMaybe<Scalars['String']['input']>;
  has_auto_increment?: InputMaybe<Scalars['Boolean']['input']>;
  is_nullable?: InputMaybe<Scalars['Boolean']['input']>;
  is_primary_key?: InputMaybe<Scalars['Boolean']['input']>;
  is_unique?: InputMaybe<Scalars['Boolean']['input']>;
  max_length?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  numeric_precision?: InputMaybe<Scalars['Int']['input']>;
  numeric_scale?: InputMaybe<Scalars['Int']['input']>;
  table?: InputMaybe<Scalars['String']['input']>;
};

export type Directus_Files = {
  __typename?: 'directus_files';
  charset?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  embed?: Maybe<Scalars['String']['output']>;
  filename_disk?: Maybe<Scalars['String']['output']>;
  filename_download: Scalars['String']['output'];
  filesize?: Maybe<Scalars['GraphQLBigInt']['output']>;
  folder?: Maybe<Directus_Folders>;
  height?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  location?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Scalars['JSON']['output']>;
  metadata_func?: Maybe<Count_Functions>;
  modified_by?: Maybe<Directus_Users>;
  modified_on?: Maybe<Scalars['Date']['output']>;
  modified_on_func?: Maybe<Datetime_Functions>;
  storage: Scalars['String']['output'];
  tags?: Maybe<Scalars['JSON']['output']>;
  tags_func?: Maybe<Count_Functions>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  uploaded_by?: Maybe<Directus_Users>;
  uploaded_on?: Maybe<Scalars['Date']['output']>;
  uploaded_on_func?: Maybe<Datetime_Functions>;
  width?: Maybe<Scalars['Int']['output']>;
};


export type Directus_FilesFolderArgs = {
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_FilesModified_ByArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_FilesUploaded_ByArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Files_Aggregated = {
  __typename?: 'directus_files_aggregated';
  avg?: Maybe<Directus_Files_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Files_Aggregated_Fields>;
  count?: Maybe<Directus_Files_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Files_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Files_Aggregated_Fields>;
  min?: Maybe<Directus_Files_Aggregated_Fields>;
  sum?: Maybe<Directus_Files_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Files_Aggregated_Fields>;
};

export type Directus_Files_Aggregated_Count = {
  __typename?: 'directus_files_aggregated_count';
  charset?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  embed?: Maybe<Scalars['Int']['output']>;
  filename_disk?: Maybe<Scalars['Int']['output']>;
  filename_download?: Maybe<Scalars['Int']['output']>;
  filesize?: Maybe<Scalars['Int']['output']>;
  folder?: Maybe<Scalars['Int']['output']>;
  height?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['Int']['output']>;
  metadata?: Maybe<Scalars['Int']['output']>;
  modified_by?: Maybe<Scalars['Int']['output']>;
  modified_on?: Maybe<Scalars['Int']['output']>;
  storage?: Maybe<Scalars['Int']['output']>;
  tags?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  uploaded_by?: Maybe<Scalars['Int']['output']>;
  uploaded_on?: Maybe<Scalars['Int']['output']>;
  width?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Files_Aggregated_Fields = {
  __typename?: 'directus_files_aggregated_fields';
  duration?: Maybe<Scalars['Float']['output']>;
  filesize?: Maybe<Scalars['Float']['output']>;
  height?: Maybe<Scalars['Float']['output']>;
  width?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Files_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Files_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Files_Filter>>>;
  charset?: InputMaybe<String_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  duration?: InputMaybe<Number_Filter_Operators>;
  embed?: InputMaybe<String_Filter_Operators>;
  filename_disk?: InputMaybe<String_Filter_Operators>;
  filename_download?: InputMaybe<String_Filter_Operators>;
  filesize?: InputMaybe<Number_Filter_Operators>;
  folder?: InputMaybe<Directus_Folders_Filter>;
  height?: InputMaybe<Number_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  location?: InputMaybe<String_Filter_Operators>;
  metadata?: InputMaybe<String_Filter_Operators>;
  metadata_func?: InputMaybe<Count_Function_Filter_Operators>;
  modified_by?: InputMaybe<Directus_Users_Filter>;
  modified_on?: InputMaybe<Date_Filter_Operators>;
  modified_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  storage?: InputMaybe<String_Filter_Operators>;
  tags?: InputMaybe<String_Filter_Operators>;
  tags_func?: InputMaybe<Count_Function_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  type?: InputMaybe<String_Filter_Operators>;
  uploaded_by?: InputMaybe<Directus_Users_Filter>;
  uploaded_on?: InputMaybe<Date_Filter_Operators>;
  uploaded_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  width?: InputMaybe<Number_Filter_Operators>;
};

export type Directus_Files_Mutated = {
  __typename?: 'directus_files_mutated';
  data?: Maybe<Directus_Files>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Flows = {
  __typename?: 'directus_flows';
  accountability?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  operation?: Maybe<Directus_Operations>;
  operations?: Maybe<Array<Maybe<Directus_Operations>>>;
  operations_func?: Maybe<Count_Functions>;
  options?: Maybe<Scalars['JSON']['output']>;
  options_func?: Maybe<Count_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  trigger?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
};


export type Directus_FlowsOperationArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_FlowsOperationsArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_FlowsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Flows_Aggregated = {
  __typename?: 'directus_flows_aggregated';
  count?: Maybe<Directus_Flows_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Flows_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Directus_Flows_Aggregated_Count = {
  __typename?: 'directus_flows_aggregated_count';
  accountability?: Maybe<Scalars['Int']['output']>;
  color?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  operation?: Maybe<Scalars['Int']['output']>;
  operations?: Maybe<Scalars['Int']['output']>;
  options?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  trigger?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Flows_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Flows_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Flows_Filter>>>;
  accountability?: InputMaybe<String_Filter_Operators>;
  color?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  icon?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  operation?: InputMaybe<Directus_Operations_Filter>;
  operations?: InputMaybe<Directus_Operations_Filter>;
  operations_func?: InputMaybe<Count_Function_Filter_Operators>;
  options?: InputMaybe<String_Filter_Operators>;
  options_func?: InputMaybe<Count_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  trigger?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
};

export type Directus_Flows_Mutated = {
  __typename?: 'directus_flows_mutated';
  data?: Maybe<Directus_Flows>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Folders = {
  __typename?: 'directus_folders';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  parent?: Maybe<Directus_Folders>;
};


export type Directus_FoldersParentArgs = {
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Folders_Aggregated = {
  __typename?: 'directus_folders_aggregated';
  count?: Maybe<Directus_Folders_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Folders_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Directus_Folders_Aggregated_Count = {
  __typename?: 'directus_folders_aggregated_count';
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  parent?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Folders_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Folders_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Folders_Filter>>>;
  id?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  parent?: InputMaybe<Directus_Folders_Filter>;
};

export type Directus_Folders_Mutated = {
  __typename?: 'directus_folders_mutated';
  data?: Maybe<Directus_Folders>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Notifications = {
  __typename?: 'directus_notifications';
  collection?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  item?: Maybe<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  recipient?: Maybe<Directus_Users>;
  sender?: Maybe<Directus_Users>;
  status?: Maybe<Scalars['String']['output']>;
  subject: Scalars['String']['output'];
  timestamp?: Maybe<Scalars['Date']['output']>;
  timestamp_func?: Maybe<Datetime_Functions>;
};


export type Directus_NotificationsRecipientArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_NotificationsSenderArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Notifications_Aggregated = {
  __typename?: 'directus_notifications_aggregated';
  avg?: Maybe<Directus_Notifications_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Notifications_Aggregated_Fields>;
  count?: Maybe<Directus_Notifications_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Notifications_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Notifications_Aggregated_Fields>;
  min?: Maybe<Directus_Notifications_Aggregated_Fields>;
  sum?: Maybe<Directus_Notifications_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Notifications_Aggregated_Fields>;
};

export type Directus_Notifications_Aggregated_Count = {
  __typename?: 'directus_notifications_aggregated_count';
  collection?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  item?: Maybe<Scalars['Int']['output']>;
  message?: Maybe<Scalars['Int']['output']>;
  recipient?: Maybe<Scalars['Int']['output']>;
  sender?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  subject?: Maybe<Scalars['Int']['output']>;
  timestamp?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Notifications_Aggregated_Fields = {
  __typename?: 'directus_notifications_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Notifications_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Notifications_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Notifications_Filter>>>;
  collection?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  item?: InputMaybe<String_Filter_Operators>;
  message?: InputMaybe<String_Filter_Operators>;
  recipient?: InputMaybe<Directus_Users_Filter>;
  sender?: InputMaybe<Directus_Users_Filter>;
  status?: InputMaybe<String_Filter_Operators>;
  subject?: InputMaybe<String_Filter_Operators>;
  timestamp?: InputMaybe<Date_Filter_Operators>;
  timestamp_func?: InputMaybe<Datetime_Function_Filter_Operators>;
};

export type Directus_Notifications_Mutated = {
  __typename?: 'directus_notifications_mutated';
  data?: Maybe<Directus_Notifications>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Operations = {
  __typename?: 'directus_operations';
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  flow?: Maybe<Directus_Flows>;
  id: Scalars['ID']['output'];
  key: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  options?: Maybe<Scalars['JSON']['output']>;
  options_func?: Maybe<Count_Functions>;
  position_x: Scalars['Int']['output'];
  position_y: Scalars['Int']['output'];
  reject?: Maybe<Directus_Operations>;
  resolve?: Maybe<Directus_Operations>;
  type: Scalars['String']['output'];
  user_created?: Maybe<Directus_Users>;
};


export type Directus_OperationsFlowArgs = {
  filter?: InputMaybe<Directus_Flows_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_OperationsRejectArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_OperationsResolveArgs = {
  filter?: InputMaybe<Directus_Operations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_OperationsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Operations_Aggregated = {
  __typename?: 'directus_operations_aggregated';
  avg?: Maybe<Directus_Operations_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Operations_Aggregated_Fields>;
  count?: Maybe<Directus_Operations_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Operations_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Operations_Aggregated_Fields>;
  min?: Maybe<Directus_Operations_Aggregated_Fields>;
  sum?: Maybe<Directus_Operations_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Operations_Aggregated_Fields>;
};

export type Directus_Operations_Aggregated_Count = {
  __typename?: 'directus_operations_aggregated_count';
  date_created?: Maybe<Scalars['Int']['output']>;
  flow?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  key?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  options?: Maybe<Scalars['Int']['output']>;
  position_x?: Maybe<Scalars['Int']['output']>;
  position_y?: Maybe<Scalars['Int']['output']>;
  reject?: Maybe<Scalars['Int']['output']>;
  resolve?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Operations_Aggregated_Fields = {
  __typename?: 'directus_operations_aggregated_fields';
  position_x?: Maybe<Scalars['Float']['output']>;
  position_y?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Operations_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Operations_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Operations_Filter>>>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  flow?: InputMaybe<Directus_Flows_Filter>;
  id?: InputMaybe<String_Filter_Operators>;
  key?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  options?: InputMaybe<String_Filter_Operators>;
  options_func?: InputMaybe<Count_Function_Filter_Operators>;
  position_x?: InputMaybe<Number_Filter_Operators>;
  position_y?: InputMaybe<Number_Filter_Operators>;
  reject?: InputMaybe<Directus_Operations_Filter>;
  resolve?: InputMaybe<Directus_Operations_Filter>;
  type?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
};

export type Directus_Operations_Mutated = {
  __typename?: 'directus_operations_mutated';
  data?: Maybe<Directus_Operations>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Panels = {
  __typename?: 'directus_panels';
  color?: Maybe<Scalars['String']['output']>;
  dashboard?: Maybe<Directus_Dashboards>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  height: Scalars['Int']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  options?: Maybe<Scalars['JSON']['output']>;
  options_func?: Maybe<Count_Functions>;
  position_x: Scalars['Int']['output'];
  position_y: Scalars['Int']['output'];
  show_header: Scalars['Boolean']['output'];
  type: Scalars['String']['output'];
  user_created?: Maybe<Directus_Users>;
  width: Scalars['Int']['output'];
};


export type Directus_PanelsDashboardArgs = {
  filter?: InputMaybe<Directus_Dashboards_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_PanelsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Panels_Aggregated = {
  __typename?: 'directus_panels_aggregated';
  avg?: Maybe<Directus_Panels_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Panels_Aggregated_Fields>;
  count?: Maybe<Directus_Panels_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Panels_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Panels_Aggregated_Fields>;
  min?: Maybe<Directus_Panels_Aggregated_Fields>;
  sum?: Maybe<Directus_Panels_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Panels_Aggregated_Fields>;
};

export type Directus_Panels_Aggregated_Count = {
  __typename?: 'directus_panels_aggregated_count';
  color?: Maybe<Scalars['Int']['output']>;
  dashboard?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  height?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  note?: Maybe<Scalars['Int']['output']>;
  options?: Maybe<Scalars['Int']['output']>;
  position_x?: Maybe<Scalars['Int']['output']>;
  position_y?: Maybe<Scalars['Int']['output']>;
  show_header?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  width?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Panels_Aggregated_Fields = {
  __typename?: 'directus_panels_aggregated_fields';
  height?: Maybe<Scalars['Float']['output']>;
  position_x?: Maybe<Scalars['Float']['output']>;
  position_y?: Maybe<Scalars['Float']['output']>;
  width?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Panels_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Panels_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Panels_Filter>>>;
  color?: InputMaybe<String_Filter_Operators>;
  dashboard?: InputMaybe<Directus_Dashboards_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  height?: InputMaybe<Number_Filter_Operators>;
  icon?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  note?: InputMaybe<String_Filter_Operators>;
  options?: InputMaybe<String_Filter_Operators>;
  options_func?: InputMaybe<Count_Function_Filter_Operators>;
  position_x?: InputMaybe<Number_Filter_Operators>;
  position_y?: InputMaybe<Number_Filter_Operators>;
  show_header?: InputMaybe<Boolean_Filter_Operators>;
  type?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  width?: InputMaybe<Number_Filter_Operators>;
};

export type Directus_Panels_Mutated = {
  __typename?: 'directus_panels_mutated';
  data?: Maybe<Directus_Panels>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Permissions = {
  __typename?: 'directus_permissions';
  action: Scalars['String']['output'];
  collection: Scalars['String']['output'];
  fields?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['ID']['output'];
  permissions?: Maybe<Scalars['JSON']['output']>;
  permissions_func?: Maybe<Count_Functions>;
  presets?: Maybe<Scalars['JSON']['output']>;
  presets_func?: Maybe<Count_Functions>;
  role?: Maybe<Directus_Roles>;
  validation?: Maybe<Scalars['JSON']['output']>;
  validation_func?: Maybe<Count_Functions>;
};


export type Directus_PermissionsRoleArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Permissions_Aggregated = {
  __typename?: 'directus_permissions_aggregated';
  avg?: Maybe<Directus_Permissions_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Permissions_Aggregated_Fields>;
  count?: Maybe<Directus_Permissions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Permissions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Permissions_Aggregated_Fields>;
  min?: Maybe<Directus_Permissions_Aggregated_Fields>;
  sum?: Maybe<Directus_Permissions_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Permissions_Aggregated_Fields>;
};

export type Directus_Permissions_Aggregated_Count = {
  __typename?: 'directus_permissions_aggregated_count';
  action?: Maybe<Scalars['Int']['output']>;
  collection?: Maybe<Scalars['Int']['output']>;
  fields?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  permissions?: Maybe<Scalars['Int']['output']>;
  presets?: Maybe<Scalars['Int']['output']>;
  role?: Maybe<Scalars['Int']['output']>;
  validation?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Permissions_Aggregated_Fields = {
  __typename?: 'directus_permissions_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Permissions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Permissions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Permissions_Filter>>>;
  action?: InputMaybe<String_Filter_Operators>;
  collection?: InputMaybe<String_Filter_Operators>;
  fields?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  permissions?: InputMaybe<String_Filter_Operators>;
  permissions_func?: InputMaybe<Count_Function_Filter_Operators>;
  presets?: InputMaybe<String_Filter_Operators>;
  presets_func?: InputMaybe<Count_Function_Filter_Operators>;
  role?: InputMaybe<Directus_Roles_Filter>;
  validation?: InputMaybe<String_Filter_Operators>;
  validation_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Directus_Permissions_Mutated = {
  __typename?: 'directus_permissions_mutated';
  data?: Maybe<Directus_Permissions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Presets = {
  __typename?: 'directus_presets';
  bookmark?: Maybe<Scalars['String']['output']>;
  collection?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  filter?: Maybe<Scalars['JSON']['output']>;
  filter_func?: Maybe<Count_Functions>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  layout?: Maybe<Scalars['String']['output']>;
  layout_options?: Maybe<Scalars['JSON']['output']>;
  layout_options_func?: Maybe<Count_Functions>;
  layout_query?: Maybe<Scalars['JSON']['output']>;
  layout_query_func?: Maybe<Count_Functions>;
  refresh_interval?: Maybe<Scalars['Int']['output']>;
  role?: Maybe<Directus_Roles>;
  search?: Maybe<Scalars['String']['output']>;
  user?: Maybe<Directus_Users>;
};


export type Directus_PresetsRoleArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_PresetsUserArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Presets_Aggregated = {
  __typename?: 'directus_presets_aggregated';
  avg?: Maybe<Directus_Presets_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Presets_Aggregated_Fields>;
  count?: Maybe<Directus_Presets_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Presets_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Presets_Aggregated_Fields>;
  min?: Maybe<Directus_Presets_Aggregated_Fields>;
  sum?: Maybe<Directus_Presets_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Presets_Aggregated_Fields>;
};

export type Directus_Presets_Aggregated_Count = {
  __typename?: 'directus_presets_aggregated_count';
  bookmark?: Maybe<Scalars['Int']['output']>;
  collection?: Maybe<Scalars['Int']['output']>;
  color?: Maybe<Scalars['Int']['output']>;
  filter?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  layout?: Maybe<Scalars['Int']['output']>;
  layout_options?: Maybe<Scalars['Int']['output']>;
  layout_query?: Maybe<Scalars['Int']['output']>;
  refresh_interval?: Maybe<Scalars['Int']['output']>;
  role?: Maybe<Scalars['Int']['output']>;
  search?: Maybe<Scalars['Int']['output']>;
  user?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Presets_Aggregated_Fields = {
  __typename?: 'directus_presets_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  refresh_interval?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Presets_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Presets_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Presets_Filter>>>;
  bookmark?: InputMaybe<String_Filter_Operators>;
  collection?: InputMaybe<String_Filter_Operators>;
  color?: InputMaybe<String_Filter_Operators>;
  filter?: InputMaybe<String_Filter_Operators>;
  filter_func?: InputMaybe<Count_Function_Filter_Operators>;
  icon?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  layout?: InputMaybe<String_Filter_Operators>;
  layout_options?: InputMaybe<String_Filter_Operators>;
  layout_options_func?: InputMaybe<Count_Function_Filter_Operators>;
  layout_query?: InputMaybe<String_Filter_Operators>;
  layout_query_func?: InputMaybe<Count_Function_Filter_Operators>;
  refresh_interval?: InputMaybe<Number_Filter_Operators>;
  role?: InputMaybe<Directus_Roles_Filter>;
  search?: InputMaybe<String_Filter_Operators>;
  user?: InputMaybe<Directus_Users_Filter>;
};

export type Directus_Presets_Mutated = {
  __typename?: 'directus_presets_mutated';
  data?: Maybe<Directus_Presets>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Relations = {
  __typename?: 'directus_relations';
  collection?: Maybe<Scalars['String']['output']>;
  field?: Maybe<Scalars['String']['output']>;
  meta?: Maybe<Directus_Relations_Meta>;
  related_collection?: Maybe<Scalars['String']['output']>;
  schema?: Maybe<Directus_Relations_Schema>;
};

export type Directus_Relations_Meta = {
  __typename?: 'directus_relations_meta';
  id?: Maybe<Scalars['Int']['output']>;
  junction_field?: Maybe<Scalars['String']['output']>;
  many_collection?: Maybe<Scalars['String']['output']>;
  many_field?: Maybe<Scalars['String']['output']>;
  one_allowed_collections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  one_collection?: Maybe<Scalars['String']['output']>;
  one_collection_field?: Maybe<Scalars['String']['output']>;
  one_deselect_action?: Maybe<Scalars['String']['output']>;
  one_field?: Maybe<Scalars['String']['output']>;
  sort_field?: Maybe<Scalars['String']['output']>;
};

export type Directus_Relations_Meta_Input = {
  id?: InputMaybe<Scalars['Int']['input']>;
  junction_field?: InputMaybe<Scalars['String']['input']>;
  many_collection?: InputMaybe<Scalars['String']['input']>;
  many_field?: InputMaybe<Scalars['String']['input']>;
  one_allowed_collections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  one_collection?: InputMaybe<Scalars['String']['input']>;
  one_collection_field?: InputMaybe<Scalars['String']['input']>;
  one_deselect_action?: InputMaybe<Scalars['String']['input']>;
  one_field?: InputMaybe<Scalars['String']['input']>;
  sort_field?: InputMaybe<Scalars['String']['input']>;
};

export type Directus_Relations_Schema = {
  __typename?: 'directus_relations_schema';
  column: Scalars['String']['output'];
  constraint_name?: Maybe<Scalars['String']['output']>;
  foreign_key_column: Scalars['String']['output'];
  foreign_key_table: Scalars['String']['output'];
  on_delete: Scalars['String']['output'];
  on_update: Scalars['String']['output'];
  table: Scalars['String']['output'];
};

export type Directus_Relations_Schema_Input = {
  column: Scalars['String']['input'];
  constraint_name?: InputMaybe<Scalars['String']['input']>;
  foreign_key_column: Scalars['String']['input'];
  foreign_key_table: Scalars['String']['input'];
  on_delete: Scalars['String']['input'];
  on_update: Scalars['String']['input'];
  table: Scalars['String']['input'];
};

export type Directus_Revisions = {
  __typename?: 'directus_revisions';
  activity?: Maybe<Directus_Activity>;
  collection: Scalars['String']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  data_func?: Maybe<Count_Functions>;
  delta?: Maybe<Scalars['JSON']['output']>;
  delta_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  item: Scalars['String']['output'];
  parent?: Maybe<Directus_Revisions>;
};


export type Directus_RevisionsActivityArgs = {
  filter?: InputMaybe<Directus_Activity_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_RevisionsParentArgs = {
  filter?: InputMaybe<Directus_Revisions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Revisions_Aggregated = {
  __typename?: 'directus_revisions_aggregated';
  avg?: Maybe<Directus_Revisions_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Revisions_Aggregated_Fields>;
  count?: Maybe<Directus_Revisions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Revisions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Revisions_Aggregated_Fields>;
  min?: Maybe<Directus_Revisions_Aggregated_Fields>;
  sum?: Maybe<Directus_Revisions_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Revisions_Aggregated_Fields>;
};

export type Directus_Revisions_Aggregated_Count = {
  __typename?: 'directus_revisions_aggregated_count';
  activity?: Maybe<Scalars['Int']['output']>;
  collection?: Maybe<Scalars['Int']['output']>;
  data?: Maybe<Scalars['Int']['output']>;
  delta?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  item?: Maybe<Scalars['Int']['output']>;
  parent?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Revisions_Aggregated_Fields = {
  __typename?: 'directus_revisions_aggregated_fields';
  activity?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  parent?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Revisions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Revisions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Revisions_Filter>>>;
  activity?: InputMaybe<Directus_Activity_Filter>;
  collection?: InputMaybe<String_Filter_Operators>;
  data?: InputMaybe<String_Filter_Operators>;
  data_func?: InputMaybe<Count_Function_Filter_Operators>;
  delta?: InputMaybe<String_Filter_Operators>;
  delta_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  item?: InputMaybe<String_Filter_Operators>;
  parent?: InputMaybe<Directus_Revisions_Filter>;
};

export type Directus_Revisions_Mutated = {
  __typename?: 'directus_revisions_mutated';
  data?: Maybe<Directus_Revisions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Roles = {
  __typename?: 'directus_roles';
  admin_access: Scalars['Boolean']['output'];
  app_access?: Maybe<Scalars['Boolean']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  enforce_tfa: Scalars['Boolean']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  ip_access?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  name: Scalars['String']['output'];
  users?: Maybe<Array<Maybe<Directus_Users>>>;
  users_func?: Maybe<Count_Functions>;
};


export type Directus_RolesUsersArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Roles_Aggregated = {
  __typename?: 'directus_roles_aggregated';
  count?: Maybe<Directus_Roles_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Roles_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Directus_Roles_Aggregated_Count = {
  __typename?: 'directus_roles_aggregated_count';
  admin_access?: Maybe<Scalars['Int']['output']>;
  app_access?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  enforce_tfa?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  ip_access?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  users?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Roles_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Roles_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Roles_Filter>>>;
  admin_access?: InputMaybe<Boolean_Filter_Operators>;
  app_access?: InputMaybe<Boolean_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  enforce_tfa?: InputMaybe<Boolean_Filter_Operators>;
  icon?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  ip_access?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  users?: InputMaybe<Directus_Users_Filter>;
  users_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Directus_Roles_Mutated = {
  __typename?: 'directus_roles_mutated';
  data?: Maybe<Directus_Roles>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Settings = {
  __typename?: 'directus_settings';
  auth_login_attempts?: Maybe<Scalars['Int']['output']>;
  auth_password_policy?: Maybe<Scalars['String']['output']>;
  basemaps?: Maybe<Scalars['JSON']['output']>;
  basemaps_func?: Maybe<Count_Functions>;
  custom_aspect_ratios?: Maybe<Scalars['JSON']['output']>;
  custom_aspect_ratios_func?: Maybe<Count_Functions>;
  custom_css?: Maybe<Scalars['String']['output']>;
  default_language?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  mapbox_key?: Maybe<Scalars['String']['output']>;
  module_bar?: Maybe<Scalars['JSON']['output']>;
  module_bar_func?: Maybe<Count_Functions>;
  /** $t:field_options.directus_settings.project_color_note */
  project_color?: Maybe<Scalars['String']['output']>;
  project_descriptor?: Maybe<Scalars['String']['output']>;
  project_logo?: Maybe<Directus_Files>;
  project_name?: Maybe<Scalars['String']['output']>;
  project_url?: Maybe<Scalars['String']['output']>;
  public_background?: Maybe<Directus_Files>;
  public_foreground?: Maybe<Directus_Files>;
  public_note?: Maybe<Scalars['String']['output']>;
  storage_asset_presets?: Maybe<Scalars['JSON']['output']>;
  storage_asset_presets_func?: Maybe<Count_Functions>;
  storage_asset_transform?: Maybe<Scalars['String']['output']>;
  storage_default_folder?: Maybe<Directus_Folders>;
};


export type Directus_SettingsProject_LogoArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_SettingsPublic_BackgroundArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_SettingsPublic_ForegroundArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_SettingsStorage_Default_FolderArgs = {
  filter?: InputMaybe<Directus_Folders_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Settings_Mutated = {
  __typename?: 'directus_settings_mutated';
  data?: Maybe<Directus_Settings>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Shares = {
  __typename?: 'directus_shares';
  collection: Scalars['String']['output'];
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  /** $t:shared_leave_blank_for_unlimited */
  date_end?: Maybe<Scalars['Date']['output']>;
  date_end_func?: Maybe<Datetime_Functions>;
  /** $t:shared_leave_blank_for_unlimited */
  date_start?: Maybe<Scalars['Date']['output']>;
  date_start_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  item: Scalars['String']['output'];
  /** $t:shared_leave_blank_for_unlimited */
  max_uses?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  password?: Maybe<Scalars['Hash']['output']>;
  role?: Maybe<Directus_Roles>;
  times_used?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Directus_Users>;
};


export type Directus_SharesRoleArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_SharesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Shares_Aggregated = {
  __typename?: 'directus_shares_aggregated';
  avg?: Maybe<Directus_Shares_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Shares_Aggregated_Fields>;
  count?: Maybe<Directus_Shares_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Shares_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Shares_Aggregated_Fields>;
  min?: Maybe<Directus_Shares_Aggregated_Fields>;
  sum?: Maybe<Directus_Shares_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Shares_Aggregated_Fields>;
};

export type Directus_Shares_Aggregated_Count = {
  __typename?: 'directus_shares_aggregated_count';
  collection?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_end?: Maybe<Scalars['Int']['output']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_start?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  item?: Maybe<Scalars['Int']['output']>;
  /** $t:shared_leave_blank_for_unlimited */
  max_uses?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  password?: Maybe<Scalars['Int']['output']>;
  role?: Maybe<Scalars['Int']['output']>;
  times_used?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Shares_Aggregated_Fields = {
  __typename?: 'directus_shares_aggregated_fields';
  /** $t:shared_leave_blank_for_unlimited */
  max_uses?: Maybe<Scalars['Float']['output']>;
  times_used?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Shares_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Shares_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Shares_Filter>>>;
  collection?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_end?: InputMaybe<Date_Filter_Operators>;
  date_end_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_start?: InputMaybe<Date_Filter_Operators>;
  date_start_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  item?: InputMaybe<String_Filter_Operators>;
  max_uses?: InputMaybe<Number_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  password?: InputMaybe<Hash_Filter_Operators>;
  role?: InputMaybe<Directus_Roles_Filter>;
  times_used?: InputMaybe<Number_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
};

export type Directus_Shares_Mutated = {
  __typename?: 'directus_shares_mutated';
  data?: Maybe<Directus_Shares>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Translations = {
  __typename?: 'directus_translations';
  id: Scalars['ID']['output'];
  key: Scalars['String']['output'];
  language: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type Directus_Translations_Aggregated = {
  __typename?: 'directus_translations_aggregated';
  count?: Maybe<Directus_Translations_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Translations_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Directus_Translations_Aggregated_Count = {
  __typename?: 'directus_translations_aggregated_count';
  id?: Maybe<Scalars['Int']['output']>;
  key?: Maybe<Scalars['Int']['output']>;
  language?: Maybe<Scalars['Int']['output']>;
  value?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Translations_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Translations_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Translations_Filter>>>;
  id?: InputMaybe<String_Filter_Operators>;
  key?: InputMaybe<String_Filter_Operators>;
  language?: InputMaybe<String_Filter_Operators>;
  value?: InputMaybe<String_Filter_Operators>;
};

export type Directus_Translations_Mutated = {
  __typename?: 'directus_translations_mutated';
  data?: Maybe<Directus_Translations>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Users = {
  __typename?: 'directus_users';
  address_line_1?: Maybe<Scalars['String']['output']>;
  address_line_2?: Maybe<Scalars['String']['output']>;
  agencies?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies>>>;
  agencies_func?: Maybe<Count_Functions>;
  auth_data?: Maybe<Scalars['JSON']['output']>;
  auth_data_func?: Maybe<Count_Functions>;
  avatar?: Maybe<Directus_Files>;
  city?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documents?: Maybe<Array<Maybe<Junction_Directus_Users_Documents>>>;
  documents_func?: Maybe<Count_Functions>;
  email?: Maybe<Scalars['String']['output']>;
  email_notifications?: Maybe<Scalars['Boolean']['output']>;
  exams?: Maybe<Array<Maybe<Junction_Directus_Users_Exams>>>;
  exams_func?: Maybe<Count_Functions>;
  external_identifier?: Maybe<Scalars['String']['output']>;
  first_name?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  import_student_id?: Maybe<Scalars['Int']['output']>;
  imported?: Maybe<Scalars['Boolean']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  last_access?: Maybe<Scalars['Date']['output']>;
  last_access_func?: Maybe<Datetime_Functions>;
  last_name?: Maybe<Scalars['String']['output']>;
  last_page?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  modules?: Maybe<Array<Maybe<Junction_Modules_Definition_Directus_Users>>>;
  modules_func?: Maybe<Count_Functions>;
  password?: Maybe<Scalars['Hash']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  policies?: Maybe<Array<Maybe<Junction_Directus_Users_Policies>>>;
  policies_func?: Maybe<Count_Functions>;
  provider?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Directus_Roles>;
  sc_definitions?: Maybe<Array<Maybe<Junction_Sc_Definitions_Directus_Users>>>;
  sc_definitions_func?: Maybe<Count_Functions>;
  state?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Scalars['JSON']['output']>;
  tags_func?: Maybe<Count_Functions>;
  tfa_secret?: Maybe<Scalars['Hash']['output']>;
  theme?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['Hash']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};


export type Directus_UsersAgenciesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersAvatarArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersDocumentsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersExamsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersModulesArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersPoliciesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersRoleArgs = {
  filter?: InputMaybe<Directus_Roles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Directus_UsersSc_DefinitionsArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Directus_Users_Aggregated = {
  __typename?: 'directus_users_aggregated';
  avg?: Maybe<Directus_Users_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Users_Aggregated_Fields>;
  count?: Maybe<Directus_Users_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Users_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Users_Aggregated_Fields>;
  min?: Maybe<Directus_Users_Aggregated_Fields>;
  sum?: Maybe<Directus_Users_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Users_Aggregated_Fields>;
};

export type Directus_Users_Aggregated_Count = {
  __typename?: 'directus_users_aggregated_count';
  address_line_1?: Maybe<Scalars['Int']['output']>;
  address_line_2?: Maybe<Scalars['Int']['output']>;
  agencies?: Maybe<Scalars['Int']['output']>;
  auth_data?: Maybe<Scalars['Int']['output']>;
  avatar?: Maybe<Scalars['Int']['output']>;
  city?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  documents?: Maybe<Scalars['Int']['output']>;
  email?: Maybe<Scalars['Int']['output']>;
  email_notifications?: Maybe<Scalars['Int']['output']>;
  exams?: Maybe<Scalars['Int']['output']>;
  external_identifier?: Maybe<Scalars['Int']['output']>;
  first_name?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_student_id?: Maybe<Scalars['Int']['output']>;
  imported?: Maybe<Scalars['Int']['output']>;
  language?: Maybe<Scalars['Int']['output']>;
  last_access?: Maybe<Scalars['Int']['output']>;
  last_name?: Maybe<Scalars['Int']['output']>;
  last_page?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['Int']['output']>;
  modules?: Maybe<Scalars['Int']['output']>;
  password?: Maybe<Scalars['Int']['output']>;
  phone?: Maybe<Scalars['Int']['output']>;
  policies?: Maybe<Scalars['Int']['output']>;
  provider?: Maybe<Scalars['Int']['output']>;
  role?: Maybe<Scalars['Int']['output']>;
  sc_definitions?: Maybe<Scalars['Int']['output']>;
  state?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  tags?: Maybe<Scalars['Int']['output']>;
  tfa_secret?: Maybe<Scalars['Int']['output']>;
  theme?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  token?: Maybe<Scalars['Int']['output']>;
  zip?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Users_Aggregated_Fields = {
  __typename?: 'directus_users_aggregated_fields';
  import_student_id?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Users_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Users_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Users_Filter>>>;
  address_line_1?: InputMaybe<String_Filter_Operators>;
  address_line_2?: InputMaybe<String_Filter_Operators>;
  agencies?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  agencies_func?: InputMaybe<Count_Function_Filter_Operators>;
  auth_data?: InputMaybe<String_Filter_Operators>;
  auth_data_func?: InputMaybe<Count_Function_Filter_Operators>;
  avatar?: InputMaybe<Directus_Files_Filter>;
  city?: InputMaybe<String_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  documents?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documents_func?: InputMaybe<Count_Function_Filter_Operators>;
  email?: InputMaybe<String_Filter_Operators>;
  email_notifications?: InputMaybe<Boolean_Filter_Operators>;
  exams?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  exams_func?: InputMaybe<Count_Function_Filter_Operators>;
  external_identifier?: InputMaybe<String_Filter_Operators>;
  first_name?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_student_id?: InputMaybe<Number_Filter_Operators>;
  imported?: InputMaybe<Boolean_Filter_Operators>;
  language?: InputMaybe<String_Filter_Operators>;
  last_access?: InputMaybe<Date_Filter_Operators>;
  last_access_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  last_name?: InputMaybe<String_Filter_Operators>;
  last_page?: InputMaybe<String_Filter_Operators>;
  location?: InputMaybe<String_Filter_Operators>;
  modules?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  modules_func?: InputMaybe<Count_Function_Filter_Operators>;
  password?: InputMaybe<Hash_Filter_Operators>;
  phone?: InputMaybe<String_Filter_Operators>;
  policies?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policies_func?: InputMaybe<Count_Function_Filter_Operators>;
  provider?: InputMaybe<String_Filter_Operators>;
  role?: InputMaybe<Directus_Roles_Filter>;
  sc_definitions?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  sc_definitions_func?: InputMaybe<Count_Function_Filter_Operators>;
  state?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  tags?: InputMaybe<String_Filter_Operators>;
  tags_func?: InputMaybe<Count_Function_Filter_Operators>;
  tfa_secret?: InputMaybe<Hash_Filter_Operators>;
  theme?: InputMaybe<String_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  token?: InputMaybe<Hash_Filter_Operators>;
  zip?: InputMaybe<String_Filter_Operators>;
};

export type Directus_Users_Mutated = {
  __typename?: 'directus_users_mutated';
  data?: Maybe<Directus_Users>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Directus_Webhooks = {
  __typename?: 'directus_webhooks';
  actions: Array<Maybe<Scalars['String']['output']>>;
  collections: Array<Maybe<Scalars['String']['output']>>;
  data?: Maybe<Scalars['Boolean']['output']>;
  headers?: Maybe<Scalars['JSON']['output']>;
  headers_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  method?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
};

export type Directus_Webhooks_Aggregated = {
  __typename?: 'directus_webhooks_aggregated';
  avg?: Maybe<Directus_Webhooks_Aggregated_Fields>;
  avgDistinct?: Maybe<Directus_Webhooks_Aggregated_Fields>;
  count?: Maybe<Directus_Webhooks_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Directus_Webhooks_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Directus_Webhooks_Aggregated_Fields>;
  min?: Maybe<Directus_Webhooks_Aggregated_Fields>;
  sum?: Maybe<Directus_Webhooks_Aggregated_Fields>;
  sumDistinct?: Maybe<Directus_Webhooks_Aggregated_Fields>;
};

export type Directus_Webhooks_Aggregated_Count = {
  __typename?: 'directus_webhooks_aggregated_count';
  actions?: Maybe<Scalars['Int']['output']>;
  collections?: Maybe<Scalars['Int']['output']>;
  data?: Maybe<Scalars['Int']['output']>;
  headers?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  method?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  url?: Maybe<Scalars['Int']['output']>;
};

export type Directus_Webhooks_Aggregated_Fields = {
  __typename?: 'directus_webhooks_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Directus_Webhooks_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Directus_Webhooks_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Directus_Webhooks_Filter>>>;
  actions?: InputMaybe<String_Filter_Operators>;
  collections?: InputMaybe<String_Filter_Operators>;
  data?: InputMaybe<Boolean_Filter_Operators>;
  headers?: InputMaybe<String_Filter_Operators>;
  headers_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  method?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  url?: InputMaybe<String_Filter_Operators>;
};

export type Directus_Webhooks_Mutated = {
  __typename?: 'directus_webhooks_mutated';
  data?: Maybe<Directus_Webhooks>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Documents = {
  __typename?: 'documents';
  agencies?: Maybe<Array<Maybe<Junction_Documents_Agencies>>>;
  agencies_func?: Maybe<Count_Functions>;
  categories?: Maybe<Array<Maybe<Junction_Documents_Categories>>>;
  categories_func?: Maybe<Count_Functions>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  description?: Maybe<Scalars['String']['output']>;
  directus_users?: Maybe<Array<Maybe<Junction_Directus_Users_Documents>>>;
  directus_users_func?: Maybe<Count_Functions>;
  document?: Maybe<Directus_Files>;
  id: Scalars['ID']['output'];
  import_document_id?: Maybe<Scalars['Int']['output']>;
  import_document_url?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type DocumentsAgenciesArgs = {
  filter?: InputMaybe<Junction_Documents_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DocumentsCategoriesArgs = {
  filter?: InputMaybe<Junction_Documents_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DocumentsDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DocumentsDocumentArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DocumentsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type DocumentsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Documents_Aggregated = {
  __typename?: 'documents_aggregated';
  avg?: Maybe<Documents_Aggregated_Fields>;
  avgDistinct?: Maybe<Documents_Aggregated_Fields>;
  count?: Maybe<Documents_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Documents_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Documents_Aggregated_Fields>;
  min?: Maybe<Documents_Aggregated_Fields>;
  sum?: Maybe<Documents_Aggregated_Fields>;
  sumDistinct?: Maybe<Documents_Aggregated_Fields>;
};

export type Documents_Aggregated_Count = {
  __typename?: 'documents_aggregated_count';
  agencies?: Maybe<Scalars['Int']['output']>;
  categories?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  document?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_document_id?: Maybe<Scalars['Int']['output']>;
  import_document_url?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Documents_Aggregated_Fields = {
  __typename?: 'documents_aggregated_fields';
  import_document_id?: Maybe<Scalars['Float']['output']>;
};

export type Documents_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Documents_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Documents_Filter>>>;
  agencies?: InputMaybe<Junction_Documents_Agencies_Filter>;
  agencies_func?: InputMaybe<Count_Function_Filter_Operators>;
  categories?: InputMaybe<Junction_Documents_Categories_Filter>;
  categories_func?: InputMaybe<Count_Function_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  document?: InputMaybe<Directus_Files_Filter>;
  id?: InputMaybe<String_Filter_Operators>;
  import_document_id?: InputMaybe<Number_Filter_Operators>;
  import_document_url?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Documents_Mutated = {
  __typename?: 'documents_mutated';
  data?: Maybe<Documents>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Exam_Results = {
  __typename?: 'exam_results';
  answer: Scalars['JSON']['output'];
  answer_func?: Maybe<Count_Functions>;
  assignment_id?: Maybe<Junction_Directus_Users_Exams>;
  attempt?: Maybe<Scalars['Int']['output']>;
  correct: Scalars['Boolean']['output'];
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  exam_versions_id?: Maybe<Exam_Versions>;
  exams_id?: Maybe<Exams>;
  id: Scalars['ID']['output'];
  question_versions_id?: Maybe<Question_Versions>;
  questions_id?: Maybe<Questions>;
  time_taken: Scalars['Int']['output'];
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Exam_ResultsAssignment_IdArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsExam_Versions_IdArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsQuestion_Versions_IdArgs = {
  filter?: InputMaybe<Question_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsQuestions_IdArgs = {
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_ResultsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Exam_Results_Aggregated = {
  __typename?: 'exam_results_aggregated';
  avg?: Maybe<Exam_Results_Aggregated_Fields>;
  avgDistinct?: Maybe<Exam_Results_Aggregated_Fields>;
  count?: Maybe<Exam_Results_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Exam_Results_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Exam_Results_Aggregated_Fields>;
  min?: Maybe<Exam_Results_Aggregated_Fields>;
  sum?: Maybe<Exam_Results_Aggregated_Fields>;
  sumDistinct?: Maybe<Exam_Results_Aggregated_Fields>;
};

export type Exam_Results_Aggregated_Count = {
  __typename?: 'exam_results_aggregated_count';
  answer?: Maybe<Scalars['Int']['output']>;
  assignment_id?: Maybe<Scalars['Int']['output']>;
  attempt?: Maybe<Scalars['Int']['output']>;
  correct?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  exam_versions_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  question_versions_id?: Maybe<Scalars['Int']['output']>;
  questions_id?: Maybe<Scalars['Int']['output']>;
  time_taken?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Exam_Results_Aggregated_Fields = {
  __typename?: 'exam_results_aggregated_fields';
  assignment_id?: Maybe<Scalars['Float']['output']>;
  attempt?: Maybe<Scalars['Float']['output']>;
  time_taken?: Maybe<Scalars['Float']['output']>;
};

export type Exam_Results_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Exam_Results_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Exam_Results_Filter>>>;
  answer?: InputMaybe<String_Filter_Operators>;
  answer_func?: InputMaybe<Count_Function_Filter_Operators>;
  assignment_id?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  attempt?: InputMaybe<Number_Filter_Operators>;
  correct?: InputMaybe<Boolean_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  exam_versions_id?: InputMaybe<Exam_Versions_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  id?: InputMaybe<String_Filter_Operators>;
  question_versions_id?: InputMaybe<Question_Versions_Filter>;
  questions_id?: InputMaybe<Questions_Filter>;
  time_taken?: InputMaybe<Number_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Exam_Results_Mutated = {
  __typename?: 'exam_results_mutated';
  data?: Maybe<Exam_Results>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Exam_Versions = {
  __typename?: 'exam_versions';
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  contact_hour?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  description?: Maybe<Scalars['String']['output']>;
  exam?: Maybe<Exams>;
  expiration?: Maybe<Scalars['String']['output']>;
  fail_message?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  introduction?: Maybe<Scalars['String']['output']>;
  is_proctoring?: Maybe<Scalars['Boolean']['output']>;
  outline?: Maybe<Directus_Files>;
  passing_message?: Maybe<Scalars['String']['output']>;
  passing_score?: Maybe<Scalars['Int']['output']>;
  questions?: Maybe<Array<Maybe<Junction_Exam_Versions_Questions>>>;
  questions_func?: Maybe<Count_Functions>;
  questions_to_give?: Maybe<Scalars['Int']['output']>;
  shuffle_questions?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Exam_VersionsExamArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_VersionsOutlineArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_VersionsQuestionsArgs = {
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_VersionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Exam_VersionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Exam_Versions_Aggregated = {
  __typename?: 'exam_versions_aggregated';
  avg?: Maybe<Exam_Versions_Aggregated_Fields>;
  avgDistinct?: Maybe<Exam_Versions_Aggregated_Fields>;
  count?: Maybe<Exam_Versions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Exam_Versions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Exam_Versions_Aggregated_Fields>;
  min?: Maybe<Exam_Versions_Aggregated_Fields>;
  sum?: Maybe<Exam_Versions_Aggregated_Fields>;
  sumDistinct?: Maybe<Exam_Versions_Aggregated_Fields>;
};

export type Exam_Versions_Aggregated_Count = {
  __typename?: 'exam_versions_aggregated_count';
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  contact_hour?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  exam?: Maybe<Scalars['Int']['output']>;
  expiration?: Maybe<Scalars['Int']['output']>;
  fail_message?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  introduction?: Maybe<Scalars['Int']['output']>;
  is_proctoring?: Maybe<Scalars['Int']['output']>;
  outline?: Maybe<Scalars['Int']['output']>;
  passing_message?: Maybe<Scalars['Int']['output']>;
  passing_score?: Maybe<Scalars['Int']['output']>;
  questions?: Maybe<Scalars['Int']['output']>;
  questions_to_give?: Maybe<Scalars['Int']['output']>;
  shuffle_questions?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Exam_Versions_Aggregated_Fields = {
  __typename?: 'exam_versions_aggregated_fields';
  allowed_attempts?: Maybe<Scalars['Float']['output']>;
  passing_score?: Maybe<Scalars['Float']['output']>;
  questions_to_give?: Maybe<Scalars['Float']['output']>;
};

export type Exam_Versions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Exam_Versions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Exam_Versions_Filter>>>;
  allowed_attempts?: InputMaybe<Number_Filter_Operators>;
  contact_hour?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  exam?: InputMaybe<Exams_Filter>;
  expiration?: InputMaybe<String_Filter_Operators>;
  fail_message?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  introduction?: InputMaybe<String_Filter_Operators>;
  is_proctoring?: InputMaybe<Boolean_Filter_Operators>;
  outline?: InputMaybe<Directus_Files_Filter>;
  passing_message?: InputMaybe<String_Filter_Operators>;
  passing_score?: InputMaybe<Number_Filter_Operators>;
  questions?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  questions_func?: InputMaybe<Count_Function_Filter_Operators>;
  questions_to_give?: InputMaybe<Number_Filter_Operators>;
  shuffle_questions?: InputMaybe<Boolean_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Exam_Versions_Mutated = {
  __typename?: 'exam_versions_mutated';
  data?: Maybe<Exam_Versions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Exams = {
  __typename?: 'exams';
  agencies?: Maybe<Array<Maybe<Junction_Exams_Agencies>>>;
  agencies_func?: Maybe<Count_Functions>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  directus_users?: Maybe<Array<Maybe<Junction_Directus_Users_Exams>>>;
  directus_users_func?: Maybe<Count_Functions>;
  exam_versions?: Maybe<Array<Maybe<Exam_Versions>>>;
  exam_versions_func?: Maybe<Count_Functions>;
  expiration_date?: Maybe<Scalars['Date']['output']>;
  expiration_date_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_ceu?: Maybe<Scalars['Float']['output']>;
  import_course_id?: Maybe<Scalars['Int']['output']>;
  import_is_shell?: Maybe<Scalars['Boolean']['output']>;
  modality?: Maybe<Categories>;
  specialties?: Maybe<Array<Maybe<Junction_Exams_Categories_Specialties>>>;
  specialties_func?: Maybe<Count_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  subspecialties?: Maybe<Array<Maybe<Junction_Exams_Categories_Subspecialties>>>;
  subspecialties_func?: Maybe<Count_Functions>;
  title?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type ExamsAgenciesArgs = {
  filter?: InputMaybe<Junction_Exams_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsExam_VersionsArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsModalityArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsSpecialtiesArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsSubspecialtiesArgs = {
  filter?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type ExamsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Exams_Aggregated = {
  __typename?: 'exams_aggregated';
  avg?: Maybe<Exams_Aggregated_Fields>;
  avgDistinct?: Maybe<Exams_Aggregated_Fields>;
  count?: Maybe<Exams_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Exams_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Exams_Aggregated_Fields>;
  min?: Maybe<Exams_Aggregated_Fields>;
  sum?: Maybe<Exams_Aggregated_Fields>;
  sumDistinct?: Maybe<Exams_Aggregated_Fields>;
};

export type Exams_Aggregated_Count = {
  __typename?: 'exams_aggregated_count';
  agencies?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  exam_versions?: Maybe<Scalars['Int']['output']>;
  expiration_date?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_ceu?: Maybe<Scalars['Int']['output']>;
  import_course_id?: Maybe<Scalars['Int']['output']>;
  import_is_shell?: Maybe<Scalars['Int']['output']>;
  modality?: Maybe<Scalars['Int']['output']>;
  specialties?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  subspecialties?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Exams_Aggregated_Fields = {
  __typename?: 'exams_aggregated_fields';
  import_ceu?: Maybe<Scalars['Float']['output']>;
  import_course_id?: Maybe<Scalars['Float']['output']>;
};

export type Exams_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Exams_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Exams_Filter>>>;
  agencies?: InputMaybe<Junction_Exams_Agencies_Filter>;
  agencies_func?: InputMaybe<Count_Function_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  exam_versions?: InputMaybe<Exam_Versions_Filter>;
  exam_versions_func?: InputMaybe<Count_Function_Filter_Operators>;
  expiration_date?: InputMaybe<Date_Filter_Operators>;
  expiration_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_ceu?: InputMaybe<Number_Filter_Operators>;
  import_course_id?: InputMaybe<Number_Filter_Operators>;
  import_is_shell?: InputMaybe<Boolean_Filter_Operators>;
  modality?: InputMaybe<Categories_Filter>;
  specialties?: InputMaybe<Junction_Exams_Categories_Specialties_Filter>;
  specialties_func?: InputMaybe<Count_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  subspecialties?: InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>;
  subspecialties_func?: InputMaybe<Count_Function_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Exams_Mutated = {
  __typename?: 'exams_mutated';
  data?: Maybe<Exams>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Extensions = {
  __typename?: 'extensions';
  displays?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  interfaces?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  layouts?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  modules?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Feature_Flags = {
  __typename?: 'feature_flags';
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  enabled: Scalars['Boolean']['output'];
  flag_key: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Feature_FlagsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Feature_FlagsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Feature_Flags_Aggregated = {
  __typename?: 'feature_flags_aggregated';
  avg?: Maybe<Feature_Flags_Aggregated_Fields>;
  avgDistinct?: Maybe<Feature_Flags_Aggregated_Fields>;
  count?: Maybe<Feature_Flags_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Feature_Flags_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Feature_Flags_Aggregated_Fields>;
  min?: Maybe<Feature_Flags_Aggregated_Fields>;
  sum?: Maybe<Feature_Flags_Aggregated_Fields>;
  sumDistinct?: Maybe<Feature_Flags_Aggregated_Fields>;
};

export type Feature_Flags_Aggregated_Count = {
  __typename?: 'feature_flags_aggregated_count';
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  enabled?: Maybe<Scalars['Int']['output']>;
  flag_key?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Feature_Flags_Aggregated_Fields = {
  __typename?: 'feature_flags_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Feature_Flags_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Feature_Flags_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Feature_Flags_Filter>>>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  enabled?: InputMaybe<Boolean_Filter_Operators>;
  flag_key?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Feature_Flags_Mutated = {
  __typename?: 'feature_flags_mutated';
  data?: Maybe<Feature_Flags>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export enum Graphql_Sdl_Scope {
  Items = 'items',
  System = 'system'
}

export type Hash_Filter_Operators = {
  _empty?: InputMaybe<Scalars['Boolean']['input']>;
  _nempty?: InputMaybe<Scalars['Boolean']['input']>;
  _nnull?: InputMaybe<Scalars['Boolean']['input']>;
  _null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Iframe_Tokens = {
  __typename?: 'iframe_tokens';
  agency_id?: Maybe<Agencies>;
  ats_type?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  jwt_token?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Directus_Users>;
};


export type Iframe_TokensAgency_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Iframe_TokensUser_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Iframe_Tokens_Aggregated = {
  __typename?: 'iframe_tokens_aggregated';
  count?: Maybe<Iframe_Tokens_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Iframe_Tokens_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Iframe_Tokens_Aggregated_Count = {
  __typename?: 'iframe_tokens_aggregated_count';
  agency_id?: Maybe<Scalars['Int']['output']>;
  ats_type?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  jwt_token?: Maybe<Scalars['Int']['output']>;
  token?: Maybe<Scalars['Int']['output']>;
  user_id?: Maybe<Scalars['Int']['output']>;
};

export type Iframe_Tokens_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Iframe_Tokens_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Iframe_Tokens_Filter>>>;
  agency_id?: InputMaybe<Agencies_Filter>;
  ats_type?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  jwt_token?: InputMaybe<String_Filter_Operators>;
  token?: InputMaybe<String_Filter_Operators>;
  user_id?: InputMaybe<Directus_Users_Filter>;
};

export type Iframe_Tokens_Mutated = {
  __typename?: 'iframe_tokens_mutated';
  data?: Maybe<Iframe_Tokens>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Bundles_Documents = {
  __typename?: 'junction_bundles_documents';
  bundles_id?: Maybe<Bundles>;
  documents_id?: Maybe<Documents>;
  id: Scalars['ID']['output'];
};


export type Junction_Bundles_DocumentsBundles_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Bundles_DocumentsDocuments_IdArgs = {
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Bundles_Documents_Aggregated = {
  __typename?: 'junction_bundles_documents_aggregated';
  avg?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
  count?: Maybe<Junction_Bundles_Documents_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Bundles_Documents_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
  min?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
  sum?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Bundles_Documents_Aggregated_Fields>;
};

export type Junction_Bundles_Documents_Aggregated_Count = {
  __typename?: 'junction_bundles_documents_aggregated_count';
  bundles_id?: Maybe<Scalars['Int']['output']>;
  documents_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Bundles_Documents_Aggregated_Fields = {
  __typename?: 'junction_bundles_documents_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Bundles_Documents_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Bundles_Documents_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Bundles_Documents_Filter>>>;
  bundles_id?: InputMaybe<Bundles_Filter>;
  documents_id?: InputMaybe<Documents_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Bundles_Documents_Mutated = {
  __typename?: 'junction_bundles_documents_mutated';
  data?: Maybe<Junction_Bundles_Documents>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Bundles_Exams = {
  __typename?: 'junction_bundles_exams';
  bundles_id?: Maybe<Bundles>;
  exams_id?: Maybe<Exams>;
  id: Scalars['ID']['output'];
};


export type Junction_Bundles_ExamsBundles_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Bundles_ExamsExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Bundles_Exams_Aggregated = {
  __typename?: 'junction_bundles_exams_aggregated';
  avg?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
  count?: Maybe<Junction_Bundles_Exams_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Bundles_Exams_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
  min?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
  sum?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Bundles_Exams_Aggregated_Fields>;
};

export type Junction_Bundles_Exams_Aggregated_Count = {
  __typename?: 'junction_bundles_exams_aggregated_count';
  bundles_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Bundles_Exams_Aggregated_Fields = {
  __typename?: 'junction_bundles_exams_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Bundles_Exams_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Bundles_Exams_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Bundles_Exams_Filter>>>;
  bundles_id?: InputMaybe<Bundles_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Bundles_Exams_Mutated = {
  __typename?: 'junction_bundles_exams_mutated';
  data?: Maybe<Junction_Bundles_Exams>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Bundles_Modules_Definition = {
  __typename?: 'junction_bundles_modules_definition';
  bundles_id?: Maybe<Bundles>;
  id: Scalars['ID']['output'];
  modules_definition_id?: Maybe<Modules_Definition>;
};


export type Junction_Bundles_Modules_DefinitionBundles_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Bundles_Modules_DefinitionModules_Definition_IdArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Bundles_Modules_Definition_Aggregated = {
  __typename?: 'junction_bundles_modules_definition_aggregated';
  avg?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
  count?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
  min?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
  sum?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Bundles_Modules_Definition_Aggregated_Fields>;
};

export type Junction_Bundles_Modules_Definition_Aggregated_Count = {
  __typename?: 'junction_bundles_modules_definition_aggregated_count';
  bundles_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  modules_definition_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Bundles_Modules_Definition_Aggregated_Fields = {
  __typename?: 'junction_bundles_modules_definition_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  modules_definition_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Bundles_Modules_Definition_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Bundles_Modules_Definition_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Bundles_Modules_Definition_Filter>>>;
  bundles_id?: InputMaybe<Bundles_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  modules_definition_id?: InputMaybe<Modules_Definition_Filter>;
};

export type Junction_Bundles_Modules_Definition_Mutated = {
  __typename?: 'junction_bundles_modules_definition_mutated';
  data?: Maybe<Junction_Bundles_Modules_Definition>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Bundles_Policies = {
  __typename?: 'junction_bundles_policies';
  bundles_id?: Maybe<Bundles>;
  id: Scalars['ID']['output'];
  policies_id?: Maybe<Policies>;
};


export type Junction_Bundles_PoliciesBundles_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Bundles_PoliciesPolicies_IdArgs = {
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Bundles_Policies_Aggregated = {
  __typename?: 'junction_bundles_policies_aggregated';
  avg?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
  count?: Maybe<Junction_Bundles_Policies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Bundles_Policies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
  min?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
  sum?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Bundles_Policies_Aggregated_Fields>;
};

export type Junction_Bundles_Policies_Aggregated_Count = {
  __typename?: 'junction_bundles_policies_aggregated_count';
  bundles_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  policies_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Bundles_Policies_Aggregated_Fields = {
  __typename?: 'junction_bundles_policies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Bundles_Policies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Bundles_Policies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Bundles_Policies_Filter>>>;
  bundles_id?: InputMaybe<Bundles_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  policies_id?: InputMaybe<Policies_Filter>;
};

export type Junction_Bundles_Policies_Mutated = {
  __typename?: 'junction_bundles_policies_mutated';
  data?: Maybe<Junction_Bundles_Policies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Bundles_Sc_Definitions = {
  __typename?: 'junction_bundles_sc_definitions';
  bundles_id?: Maybe<Bundles>;
  id: Scalars['ID']['output'];
  sc_definitions_id?: Maybe<Sc_Definitions>;
};


export type Junction_Bundles_Sc_DefinitionsBundles_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Bundles_Sc_DefinitionsSc_Definitions_IdArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Bundles_Sc_Definitions_Aggregated = {
  __typename?: 'junction_bundles_sc_definitions_aggregated';
  avg?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
  count?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
  min?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
  sum?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Bundles_Sc_Definitions_Aggregated_Fields>;
};

export type Junction_Bundles_Sc_Definitions_Aggregated_Count = {
  __typename?: 'junction_bundles_sc_definitions_aggregated_count';
  bundles_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sc_definitions_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Bundles_Sc_Definitions_Aggregated_Fields = {
  __typename?: 'junction_bundles_sc_definitions_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  sc_definitions_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Bundles_Sc_Definitions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Bundles_Sc_Definitions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Bundles_Sc_Definitions_Filter>>>;
  bundles_id?: InputMaybe<Bundles_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  sc_definitions_id?: InputMaybe<Sc_Definitions_Filter>;
};

export type Junction_Bundles_Sc_Definitions_Mutated = {
  __typename?: 'junction_bundles_sc_definitions_mutated';
  data?: Maybe<Junction_Bundles_Sc_Definitions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Agencies = {
  __typename?: 'junction_directus_users_agencies';
  agencies_id?: Maybe<Agencies>;
  bullhorn_id?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  departments?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies_Departments>>>;
  departments_func?: Maybe<Count_Functions>;
  directus_users_id?: Maybe<Directus_Users>;
  employee_number?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  import_student_id?: Maybe<Scalars['Int']['output']>;
  locations?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies_Locations>>>;
  locations_func?: Maybe<Count_Functions>;
  specialties?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies_Specialties>>>;
  specialties_func?: Maybe<Count_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  supervisors?: Maybe<Array<Maybe<Junction_Directus_Users_Agencies_Supervisors>>>;
  supervisors_func?: Maybe<Count_Functions>;
};


export type Junction_Directus_Users_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_AgenciesDepartmentsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_AgenciesDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_AgenciesLocationsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_AgenciesSpecialtiesArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_AgenciesSupervisorsArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Agencies_Aggregated = {
  __typename?: 'junction_directus_users_agencies_aggregated';
  avg?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Agencies_Aggregated_Fields>;
};

export type Junction_Directus_Users_Agencies_Aggregated_Count = {
  __typename?: 'junction_directus_users_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  bullhorn_id?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  departments?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  employee_number?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_student_id?: Maybe<Scalars['Int']['output']>;
  locations?: Maybe<Scalars['Int']['output']>;
  specialties?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  supervisors?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Agencies_Aggregated_Fields = {
  __typename?: 'junction_directus_users_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_student_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Agencies_Departments = {
  __typename?: 'junction_directus_users_agencies_departments';
  departments_id?: Maybe<Departments>;
  id: Scalars['ID']['output'];
  junction_directus_users_agencies_id?: Maybe<Junction_Directus_Users_Agencies>;
};


export type Junction_Directus_Users_Agencies_DepartmentsDepartments_IdArgs = {
  filter?: InputMaybe<Departments_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_Agencies_DepartmentsJunction_Directus_Users_Agencies_IdArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Agencies_Departments_Aggregated = {
  __typename?: 'junction_directus_users_agencies_departments_aggregated';
  avg?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Agencies_Departments_Aggregated_Fields>;
};

export type Junction_Directus_Users_Agencies_Departments_Aggregated_Count = {
  __typename?: 'junction_directus_users_agencies_departments_aggregated_count';
  departments_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Agencies_Departments_Aggregated_Fields = {
  __typename?: 'junction_directus_users_agencies_departments_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Agencies_Departments_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>>>;
  departments_id?: InputMaybe<Departments_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  junction_directus_users_agencies_id?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
};

export type Junction_Directus_Users_Agencies_Departments_Mutated = {
  __typename?: 'junction_directus_users_agencies_departments_mutated';
  data?: Maybe<Junction_Directus_Users_Agencies_Departments>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  bullhorn_id?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  departments?: InputMaybe<Junction_Directus_Users_Agencies_Departments_Filter>;
  departments_func?: InputMaybe<Count_Function_Filter_Operators>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  employee_number?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_student_id?: InputMaybe<Number_Filter_Operators>;
  locations?: InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>;
  locations_func?: InputMaybe<Count_Function_Filter_Operators>;
  specialties?: InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>;
  specialties_func?: InputMaybe<Count_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  supervisors?: InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>;
  supervisors_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Junction_Directus_Users_Agencies_Locations = {
  __typename?: 'junction_directus_users_agencies_locations';
  id: Scalars['ID']['output'];
  junction_directus_users_agencies_id?: Maybe<Junction_Directus_Users_Agencies>;
  locations_id?: Maybe<Locations>;
};


export type Junction_Directus_Users_Agencies_LocationsJunction_Directus_Users_Agencies_IdArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_Agencies_LocationsLocations_IdArgs = {
  filter?: InputMaybe<Locations_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Agencies_Locations_Aggregated = {
  __typename?: 'junction_directus_users_agencies_locations_aggregated';
  avg?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Agencies_Locations_Aggregated_Fields>;
};

export type Junction_Directus_Users_Agencies_Locations_Aggregated_Count = {
  __typename?: 'junction_directus_users_agencies_locations_aggregated_count';
  id?: Maybe<Scalars['Int']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Int']['output']>;
  locations_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Agencies_Locations_Aggregated_Fields = {
  __typename?: 'junction_directus_users_agencies_locations_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Agencies_Locations_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Locations_Filter>>>;
  id?: InputMaybe<Number_Filter_Operators>;
  junction_directus_users_agencies_id?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  locations_id?: InputMaybe<Locations_Filter>;
};

export type Junction_Directus_Users_Agencies_Locations_Mutated = {
  __typename?: 'junction_directus_users_agencies_locations_mutated';
  data?: Maybe<Junction_Directus_Users_Agencies_Locations>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Agencies_Mutated = {
  __typename?: 'junction_directus_users_agencies_mutated';
  data?: Maybe<Junction_Directus_Users_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Agencies_Specialties = {
  __typename?: 'junction_directus_users_agencies_specialties';
  id: Scalars['ID']['output'];
  junction_directus_users_agencies_id?: Maybe<Junction_Directus_Users_Agencies>;
  specialties_id?: Maybe<Specialties>;
};


export type Junction_Directus_Users_Agencies_SpecialtiesJunction_Directus_Users_Agencies_IdArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_Agencies_SpecialtiesSpecialties_IdArgs = {
  filter?: InputMaybe<Specialties_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Agencies_Specialties_Aggregated = {
  __typename?: 'junction_directus_users_agencies_specialties_aggregated';
  avg?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields>;
};

export type Junction_Directus_Users_Agencies_Specialties_Aggregated_Count = {
  __typename?: 'junction_directus_users_agencies_specialties_aggregated_count';
  id?: Maybe<Scalars['Int']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Int']['output']>;
  specialties_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Agencies_Specialties_Aggregated_Fields = {
  __typename?: 'junction_directus_users_agencies_specialties_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Agencies_Specialties_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Specialties_Filter>>>;
  id?: InputMaybe<Number_Filter_Operators>;
  junction_directus_users_agencies_id?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  specialties_id?: InputMaybe<Specialties_Filter>;
};

export type Junction_Directus_Users_Agencies_Specialties_Mutated = {
  __typename?: 'junction_directus_users_agencies_specialties_mutated';
  data?: Maybe<Junction_Directus_Users_Agencies_Specialties>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Agencies_Supervisors = {
  __typename?: 'junction_directus_users_agencies_supervisors';
  directus_users_id?: Maybe<Directus_Users>;
  id: Scalars['ID']['output'];
  junction_directus_users_agencies_id?: Maybe<Junction_Directus_Users_Agencies>;
};


export type Junction_Directus_Users_Agencies_SupervisorsDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_Agencies_SupervisorsJunction_Directus_Users_Agencies_IdArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Agencies_Supervisors_Aggregated = {
  __typename?: 'junction_directus_users_agencies_supervisors_aggregated';
  avg?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields>;
};

export type Junction_Directus_Users_Agencies_Supervisors_Aggregated_Count = {
  __typename?: 'junction_directus_users_agencies_supervisors_aggregated_count';
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Agencies_Supervisors_Aggregated_Fields = {
  __typename?: 'junction_directus_users_agencies_supervisors_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  junction_directus_users_agencies_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Agencies_Supervisors_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Agencies_Supervisors_Filter>>>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  junction_directus_users_agencies_id?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
};

export type Junction_Directus_Users_Agencies_Supervisors_Mutated = {
  __typename?: 'junction_directus_users_agencies_supervisors_mutated';
  data?: Maybe<Junction_Directus_Users_Agencies_Supervisors>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Documents = {
  __typename?: 'junction_directus_users_documents';
  agency?: Maybe<Agencies>;
  assigned_on?: Maybe<Scalars['Date']['output']>;
  assigned_on_func?: Maybe<Datetime_Functions>;
  bundle_id?: Maybe<Bundles>;
  directus_users_id?: Maybe<Directus_Users>;
  documents_id?: Maybe<Documents>;
  due_date?: Maybe<Scalars['Date']['output']>;
  due_date_func?: Maybe<Datetime_Functions>;
  expiration_type?: Maybe<Scalars['String']['output']>;
  expires_on?: Maybe<Scalars['Date']['output']>;
  expires_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_library_assignment_id?: Maybe<Scalars['Int']['output']>;
  read?: Maybe<Scalars['Date']['output']>;
  read_func?: Maybe<Date_Functions>;
  reassigned?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};


export type Junction_Directus_Users_DocumentsAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_DocumentsBundle_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_DocumentsDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_DocumentsDocuments_IdArgs = {
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Documents_Aggregated = {
  __typename?: 'junction_directus_users_documents_aggregated';
  avg?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Documents_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Documents_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Documents_Aggregated_Fields>;
};

export type Junction_Directus_Users_Documents_Aggregated_Count = {
  __typename?: 'junction_directus_users_documents_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  documents_id?: Maybe<Scalars['Int']['output']>;
  due_date?: Maybe<Scalars['Int']['output']>;
  expiration_type?: Maybe<Scalars['Int']['output']>;
  expires_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_library_assignment_id?: Maybe<Scalars['Int']['output']>;
  read?: Maybe<Scalars['Int']['output']>;
  reassigned?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Documents_Aggregated_Fields = {
  __typename?: 'junction_directus_users_documents_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_library_assignment_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Documents_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Documents_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Documents_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  assigned_on?: InputMaybe<Date_Filter_Operators>;
  assigned_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  bundle_id?: InputMaybe<Bundles_Filter>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  documents_id?: InputMaybe<Documents_Filter>;
  due_date?: InputMaybe<Date_Filter_Operators>;
  due_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  expiration_type?: InputMaybe<String_Filter_Operators>;
  expires_on?: InputMaybe<Date_Filter_Operators>;
  expires_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_library_assignment_id?: InputMaybe<Number_Filter_Operators>;
  read?: InputMaybe<Date_Filter_Operators>;
  read_func?: InputMaybe<Date_Function_Filter_Operators>;
  reassigned?: InputMaybe<Boolean_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
};

export type Junction_Directus_Users_Documents_Mutated = {
  __typename?: 'junction_directus_users_documents_mutated';
  data?: Maybe<Junction_Directus_Users_Documents>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Exams = {
  __typename?: 'junction_directus_users_exams';
  agency?: Maybe<Agencies>;
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Date']['output']>;
  assigned_on_func?: Maybe<Datetime_Functions>;
  attempt_due?: Maybe<Scalars['Date']['output']>;
  attempt_due_func?: Maybe<Datetime_Functions>;
  attempts_used?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Bundles>;
  cert_code?: Maybe<Scalars['String']['output']>;
  cert_expiry_date?: Maybe<Scalars['Date']['output']>;
  cert_expiry_date_func?: Maybe<Datetime_Functions>;
  directus_users_id?: Maybe<Directus_Users>;
  due_date?: Maybe<Scalars['Date']['output']>;
  due_date_func?: Maybe<Datetime_Functions>;
  exam_versions_id?: Maybe<Exam_Versions>;
  exams_id?: Maybe<Exams>;
  expiration_type?: Maybe<Scalars['String']['output']>;
  expires_on?: Maybe<Scalars['Date']['output']>;
  expires_on_func?: Maybe<Datetime_Functions>;
  finished_on?: Maybe<Scalars['Date']['output']>;
  finished_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_cert_url?: Maybe<Scalars['String']['output']>;
  import_report_url?: Maybe<Scalars['String']['output']>;
  import_subscription_id?: Maybe<Scalars['Int']['output']>;
  question_versions_list?: Maybe<Scalars['JSON']['output']>;
  question_versions_list_func?: Maybe<Count_Functions>;
  reassigned?: Maybe<Scalars['Boolean']['output']>;
  score?: Maybe<Scalars['Int']['output']>;
  score_history?: Maybe<Scalars['JSON']['output']>;
  score_history_func?: Maybe<Count_Functions>;
  started_on?: Maybe<Scalars['Date']['output']>;
  started_on_func?: Maybe<Datetime_Functions>;
  status?: Maybe<Scalars['String']['output']>;
};


export type Junction_Directus_Users_ExamsAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_ExamsBundle_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_ExamsDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_ExamsExam_Versions_IdArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_ExamsExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Exams_Aggregated = {
  __typename?: 'junction_directus_users_exams_aggregated';
  avg?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Exams_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Exams_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Exams_Aggregated_Fields>;
};

export type Junction_Directus_Users_Exams_Aggregated_Count = {
  __typename?: 'junction_directus_users_exams_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Int']['output']>;
  attempt_due?: Maybe<Scalars['Int']['output']>;
  attempts_used?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Scalars['Int']['output']>;
  cert_code?: Maybe<Scalars['Int']['output']>;
  cert_expiry_date?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  due_date?: Maybe<Scalars['Int']['output']>;
  exam_versions_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  expiration_type?: Maybe<Scalars['Int']['output']>;
  expires_on?: Maybe<Scalars['Int']['output']>;
  finished_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_cert_url?: Maybe<Scalars['Int']['output']>;
  import_report_url?: Maybe<Scalars['Int']['output']>;
  import_subscription_id?: Maybe<Scalars['Int']['output']>;
  question_versions_list?: Maybe<Scalars['Int']['output']>;
  reassigned?: Maybe<Scalars['Int']['output']>;
  score?: Maybe<Scalars['Int']['output']>;
  score_history?: Maybe<Scalars['Int']['output']>;
  started_on?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Exams_Aggregated_Fields = {
  __typename?: 'junction_directus_users_exams_aggregated_fields';
  allowed_attempts?: Maybe<Scalars['Float']['output']>;
  attempts_used?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  import_subscription_id?: Maybe<Scalars['Float']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Exams_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Exams_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Exams_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  allowed_attempts?: InputMaybe<Number_Filter_Operators>;
  assigned_on?: InputMaybe<Date_Filter_Operators>;
  assigned_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  attempt_due?: InputMaybe<Date_Filter_Operators>;
  attempt_due_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  attempts_used?: InputMaybe<Number_Filter_Operators>;
  bundle_id?: InputMaybe<Bundles_Filter>;
  cert_code?: InputMaybe<String_Filter_Operators>;
  cert_expiry_date?: InputMaybe<Date_Filter_Operators>;
  cert_expiry_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  due_date?: InputMaybe<Date_Filter_Operators>;
  due_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  exam_versions_id?: InputMaybe<Exam_Versions_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  expiration_type?: InputMaybe<String_Filter_Operators>;
  expires_on?: InputMaybe<Date_Filter_Operators>;
  expires_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  finished_on?: InputMaybe<Date_Filter_Operators>;
  finished_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_cert_url?: InputMaybe<String_Filter_Operators>;
  import_report_url?: InputMaybe<String_Filter_Operators>;
  import_subscription_id?: InputMaybe<Number_Filter_Operators>;
  question_versions_list?: InputMaybe<String_Filter_Operators>;
  question_versions_list_func?: InputMaybe<Count_Function_Filter_Operators>;
  reassigned?: InputMaybe<Boolean_Filter_Operators>;
  score?: InputMaybe<Number_Filter_Operators>;
  score_history?: InputMaybe<String_Filter_Operators>;
  score_history_func?: InputMaybe<Count_Function_Filter_Operators>;
  started_on?: InputMaybe<Date_Filter_Operators>;
  started_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
};

export type Junction_Directus_Users_Exams_Mutated = {
  __typename?: 'junction_directus_users_exams_mutated';
  data?: Maybe<Junction_Directus_Users_Exams>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Directus_Users_Policies = {
  __typename?: 'junction_directus_users_policies';
  agency?: Maybe<Agencies>;
  assigned_on?: Maybe<Scalars['Date']['output']>;
  assigned_on_func?: Maybe<Datetime_Functions>;
  bundle_id?: Maybe<Bundles>;
  directus_users_id?: Maybe<Directus_Users>;
  due_date?: Maybe<Scalars['Date']['output']>;
  due_date_func?: Maybe<Datetime_Functions>;
  expiration_type?: Maybe<Scalars['String']['output']>;
  expires_on?: Maybe<Scalars['Date']['output']>;
  expires_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_affirmation_id?: Maybe<Scalars['Int']['output']>;
  policies_id?: Maybe<Policies>;
  read?: Maybe<Scalars['Date']['output']>;
  read_func?: Maybe<Datetime_Functions>;
  reassigned?: Maybe<Scalars['Boolean']['output']>;
  signature_file?: Maybe<Directus_Files>;
  signed_on?: Maybe<Scalars['Date']['output']>;
  signed_on_func?: Maybe<Datetime_Functions>;
  status?: Maybe<Scalars['String']['output']>;
};


export type Junction_Directus_Users_PoliciesAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_PoliciesBundle_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_PoliciesDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_PoliciesPolicies_IdArgs = {
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Directus_Users_PoliciesSignature_FileArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Directus_Users_Policies_Aggregated = {
  __typename?: 'junction_directus_users_policies_aggregated';
  avg?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
  count?: Maybe<Junction_Directus_Users_Policies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Directus_Users_Policies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
  min?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
  sum?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Directus_Users_Policies_Aggregated_Fields>;
};

export type Junction_Directus_Users_Policies_Aggregated_Count = {
  __typename?: 'junction_directus_users_policies_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  due_date?: Maybe<Scalars['Int']['output']>;
  expiration_type?: Maybe<Scalars['Int']['output']>;
  expires_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_affirmation_id?: Maybe<Scalars['Int']['output']>;
  policies_id?: Maybe<Scalars['Int']['output']>;
  read?: Maybe<Scalars['Int']['output']>;
  reassigned?: Maybe<Scalars['Int']['output']>;
  signature_file?: Maybe<Scalars['Int']['output']>;
  signed_on?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Directus_Users_Policies_Aggregated_Fields = {
  __typename?: 'junction_directus_users_policies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_affirmation_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Directus_Users_Policies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Policies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Directus_Users_Policies_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  assigned_on?: InputMaybe<Date_Filter_Operators>;
  assigned_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  bundle_id?: InputMaybe<Bundles_Filter>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  due_date?: InputMaybe<Date_Filter_Operators>;
  due_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  expiration_type?: InputMaybe<String_Filter_Operators>;
  expires_on?: InputMaybe<Date_Filter_Operators>;
  expires_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_affirmation_id?: InputMaybe<Number_Filter_Operators>;
  policies_id?: InputMaybe<Policies_Filter>;
  read?: InputMaybe<Date_Filter_Operators>;
  read_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  reassigned?: InputMaybe<Boolean_Filter_Operators>;
  signature_file?: InputMaybe<Directus_Files_Filter>;
  signed_on?: InputMaybe<Date_Filter_Operators>;
  signed_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
};

export type Junction_Directus_Users_Policies_Mutated = {
  __typename?: 'junction_directus_users_policies_mutated';
  data?: Maybe<Junction_Directus_Users_Policies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Documents_Agencies = {
  __typename?: 'junction_documents_agencies';
  agencies_id?: Maybe<Agencies>;
  documents_id?: Maybe<Documents>;
  id: Scalars['ID']['output'];
};


export type Junction_Documents_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Documents_AgenciesDocuments_IdArgs = {
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Documents_Agencies_Aggregated = {
  __typename?: 'junction_documents_agencies_aggregated';
  avg?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Documents_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Documents_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Documents_Agencies_Aggregated_Fields>;
};

export type Junction_Documents_Agencies_Aggregated_Count = {
  __typename?: 'junction_documents_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  documents_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Documents_Agencies_Aggregated_Fields = {
  __typename?: 'junction_documents_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Documents_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Documents_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Documents_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  documents_id?: InputMaybe<Documents_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Documents_Agencies_Mutated = {
  __typename?: 'junction_documents_agencies_mutated';
  data?: Maybe<Junction_Documents_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Documents_Categories = {
  __typename?: 'junction_documents_categories';
  categories_id?: Maybe<Categories>;
  documents_id?: Maybe<Documents>;
  id: Scalars['ID']['output'];
};


export type Junction_Documents_CategoriesCategories_IdArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Documents_CategoriesDocuments_IdArgs = {
  filter?: InputMaybe<Documents_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Documents_Categories_Aggregated = {
  __typename?: 'junction_documents_categories_aggregated';
  avg?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
  count?: Maybe<Junction_Documents_Categories_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Documents_Categories_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
  min?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
  sum?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Documents_Categories_Aggregated_Fields>;
};

export type Junction_Documents_Categories_Aggregated_Count = {
  __typename?: 'junction_documents_categories_aggregated_count';
  categories_id?: Maybe<Scalars['Int']['output']>;
  documents_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Documents_Categories_Aggregated_Fields = {
  __typename?: 'junction_documents_categories_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Documents_Categories_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Documents_Categories_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Documents_Categories_Filter>>>;
  categories_id?: InputMaybe<Categories_Filter>;
  documents_id?: InputMaybe<Documents_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Documents_Categories_Mutated = {
  __typename?: 'junction_documents_categories_mutated';
  data?: Maybe<Junction_Documents_Categories>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Exam_Versions_Questions = {
  __typename?: 'junction_exam_versions_questions';
  exam_versions_id?: Maybe<Exam_Versions>;
  id: Scalars['ID']['output'];
  questions_id?: Maybe<Questions>;
  sort?: Maybe<Scalars['Int']['output']>;
};


export type Junction_Exam_Versions_QuestionsExam_Versions_IdArgs = {
  filter?: InputMaybe<Exam_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Exam_Versions_QuestionsQuestions_IdArgs = {
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Exam_Versions_Questions_Aggregated = {
  __typename?: 'junction_exam_versions_questions_aggregated';
  avg?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
  count?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
  min?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
  sum?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Exam_Versions_Questions_Aggregated_Fields>;
};

export type Junction_Exam_Versions_Questions_Aggregated_Count = {
  __typename?: 'junction_exam_versions_questions_aggregated_count';
  exam_versions_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  questions_id?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Exam_Versions_Questions_Aggregated_Fields = {
  __typename?: 'junction_exam_versions_questions_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Exam_Versions_Questions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Exam_Versions_Questions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Exam_Versions_Questions_Filter>>>;
  exam_versions_id?: InputMaybe<Exam_Versions_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  questions_id?: InputMaybe<Questions_Filter>;
  sort?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Exam_Versions_Questions_Mutated = {
  __typename?: 'junction_exam_versions_questions_mutated';
  data?: Maybe<Junction_Exam_Versions_Questions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Exams_Agencies = {
  __typename?: 'junction_exams_agencies';
  agencies_id?: Maybe<Agencies>;
  exams_id?: Maybe<Exams>;
  id: Scalars['ID']['output'];
};


export type Junction_Exams_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Exams_AgenciesExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Exams_Agencies_Aggregated = {
  __typename?: 'junction_exams_agencies_aggregated';
  avg?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Exams_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Exams_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Exams_Agencies_Aggregated_Fields>;
};

export type Junction_Exams_Agencies_Aggregated_Count = {
  __typename?: 'junction_exams_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Exams_Agencies_Aggregated_Fields = {
  __typename?: 'junction_exams_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Exams_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Exams_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Exams_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Exams_Agencies_Mutated = {
  __typename?: 'junction_exams_agencies_mutated';
  data?: Maybe<Junction_Exams_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Exams_Categories_Specialties = {
  __typename?: 'junction_exams_categories_specialties';
  categories_id?: Maybe<Categories>;
  exams_id?: Maybe<Exams>;
  id: Scalars['ID']['output'];
};


export type Junction_Exams_Categories_SpecialtiesCategories_IdArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Exams_Categories_SpecialtiesExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Exams_Categories_Specialties_Aggregated = {
  __typename?: 'junction_exams_categories_specialties_aggregated';
  avg?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
  count?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
  min?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
  sum?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Exams_Categories_Specialties_Aggregated_Fields>;
};

export type Junction_Exams_Categories_Specialties_Aggregated_Count = {
  __typename?: 'junction_exams_categories_specialties_aggregated_count';
  categories_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Exams_Categories_Specialties_Aggregated_Fields = {
  __typename?: 'junction_exams_categories_specialties_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Exams_Categories_Specialties_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Exams_Categories_Specialties_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Exams_Categories_Specialties_Filter>>>;
  categories_id?: InputMaybe<Categories_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Exams_Categories_Specialties_Mutated = {
  __typename?: 'junction_exams_categories_specialties_mutated';
  data?: Maybe<Junction_Exams_Categories_Specialties>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Exams_Categories_Subspecialties = {
  __typename?: 'junction_exams_categories_subspecialties';
  categories_id?: Maybe<Categories>;
  exams_id?: Maybe<Exams>;
  id: Scalars['ID']['output'];
};


export type Junction_Exams_Categories_SubspecialtiesCategories_IdArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Exams_Categories_SubspecialtiesExams_IdArgs = {
  filter?: InputMaybe<Exams_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Exams_Categories_Subspecialties_Aggregated = {
  __typename?: 'junction_exams_categories_subspecialties_aggregated';
  avg?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
  count?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
  min?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
  sum?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Exams_Categories_Subspecialties_Aggregated_Fields>;
};

export type Junction_Exams_Categories_Subspecialties_Aggregated_Count = {
  __typename?: 'junction_exams_categories_subspecialties_aggregated_count';
  categories_id?: Maybe<Scalars['Int']['output']>;
  exams_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Exams_Categories_Subspecialties_Aggregated_Fields = {
  __typename?: 'junction_exams_categories_subspecialties_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Exams_Categories_Subspecialties_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Exams_Categories_Subspecialties_Filter>>>;
  categories_id?: InputMaybe<Categories_Filter>;
  exams_id?: InputMaybe<Exams_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
};

export type Junction_Exams_Categories_Subspecialties_Mutated = {
  __typename?: 'junction_exams_categories_subspecialties_mutated';
  data?: Maybe<Junction_Exams_Categories_Subspecialties>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Modules_Definition_Agencies = {
  __typename?: 'junction_modules_definition_agencies';
  agencies_id?: Maybe<Agencies>;
  id: Scalars['ID']['output'];
  modules_definition_id?: Maybe<Modules_Definition>;
};


export type Junction_Modules_Definition_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_AgenciesModules_Definition_IdArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Modules_Definition_Agencies_Aggregated = {
  __typename?: 'junction_modules_definition_agencies_aggregated';
  avg?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Modules_Definition_Agencies_Aggregated_Fields>;
};

export type Junction_Modules_Definition_Agencies_Aggregated_Count = {
  __typename?: 'junction_modules_definition_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  modules_definition_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Modules_Definition_Agencies_Aggregated_Fields = {
  __typename?: 'junction_modules_definition_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  modules_definition_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Modules_Definition_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Modules_Definition_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Modules_Definition_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  modules_definition_id?: InputMaybe<Modules_Definition_Filter>;
};

export type Junction_Modules_Definition_Agencies_Mutated = {
  __typename?: 'junction_modules_definition_agencies_mutated';
  data?: Maybe<Junction_Modules_Definition_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Modules_Definition_Directus_Users = {
  __typename?: 'junction_modules_definition_directus_users';
  agency?: Maybe<Agencies>;
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  approved?: Maybe<Scalars['Boolean']['output']>;
  assigned_on?: Maybe<Scalars['Date']['output']>;
  assigned_on_func?: Maybe<Datetime_Functions>;
  attempts?: Maybe<Array<Maybe<Modules_Results>>>;
  attempts_func?: Maybe<Count_Functions>;
  attempts_used?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Bundles>;
  cert_code?: Maybe<Scalars['String']['output']>;
  directus_users_id?: Maybe<Directus_Users>;
  due_date?: Maybe<Scalars['Date']['output']>;
  due_date_func?: Maybe<Datetime_Functions>;
  expiration_type?: Maybe<Scalars['String']['output']>;
  expires_on?: Maybe<Scalars['Date']['output']>;
  expires_on_func?: Maybe<Datetime_Functions>;
  finished_on?: Maybe<Scalars['Date']['output']>;
  finished_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_cert_url?: Maybe<Scalars['String']['output']>;
  import_report_url?: Maybe<Scalars['String']['output']>;
  import_subscription_id?: Maybe<Scalars['Int']['output']>;
  last_attempt?: Maybe<Modules_Results>;
  module_version?: Maybe<Modules_Versions>;
  modules_definition_id?: Maybe<Modules_Definition>;
  reassigned?: Maybe<Scalars['Boolean']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
  started_on?: Maybe<Scalars['Date']['output']>;
  started_on_func?: Maybe<Datetime_Functions>;
  status?: Maybe<Scalars['String']['output']>;
};


export type Junction_Modules_Definition_Directus_UsersAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersAttemptsArgs = {
  filter?: InputMaybe<Modules_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersBundle_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersLast_AttemptArgs = {
  filter?: InputMaybe<Modules_Results_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersModule_VersionArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Modules_Definition_Directus_UsersModules_Definition_IdArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Modules_Definition_Directus_Users_Aggregated = {
  __typename?: 'junction_modules_definition_directus_users_aggregated';
  avg?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
  count?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
  min?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
  sum?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Modules_Definition_Directus_Users_Aggregated_Fields>;
};

export type Junction_Modules_Definition_Directus_Users_Aggregated_Count = {
  __typename?: 'junction_modules_definition_directus_users_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  approved?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Int']['output']>;
  attempts?: Maybe<Scalars['Int']['output']>;
  attempts_used?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Scalars['Int']['output']>;
  cert_code?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  due_date?: Maybe<Scalars['Int']['output']>;
  expiration_type?: Maybe<Scalars['Int']['output']>;
  expires_on?: Maybe<Scalars['Int']['output']>;
  finished_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_cert_url?: Maybe<Scalars['Int']['output']>;
  import_report_url?: Maybe<Scalars['Int']['output']>;
  import_subscription_id?: Maybe<Scalars['Int']['output']>;
  last_attempt?: Maybe<Scalars['Int']['output']>;
  module_version?: Maybe<Scalars['Int']['output']>;
  modules_definition_id?: Maybe<Scalars['Int']['output']>;
  reassigned?: Maybe<Scalars['Int']['output']>;
  score?: Maybe<Scalars['Int']['output']>;
  started_on?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Modules_Definition_Directus_Users_Aggregated_Fields = {
  __typename?: 'junction_modules_definition_directus_users_aggregated_fields';
  allowed_attempts?: Maybe<Scalars['Float']['output']>;
  attempts_used?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  import_subscription_id?: Maybe<Scalars['Float']['output']>;
  last_attempt?: Maybe<Scalars['Float']['output']>;
  module_version?: Maybe<Scalars['Float']['output']>;
  modules_definition_id?: Maybe<Scalars['Float']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Modules_Definition_Directus_Users_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  allowed_attempts?: InputMaybe<Number_Filter_Operators>;
  approved?: InputMaybe<Boolean_Filter_Operators>;
  assigned_on?: InputMaybe<Date_Filter_Operators>;
  assigned_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  attempts?: InputMaybe<Modules_Results_Filter>;
  attempts_func?: InputMaybe<Count_Function_Filter_Operators>;
  attempts_used?: InputMaybe<Number_Filter_Operators>;
  bundle_id?: InputMaybe<Bundles_Filter>;
  cert_code?: InputMaybe<String_Filter_Operators>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  due_date?: InputMaybe<Date_Filter_Operators>;
  due_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  expiration_type?: InputMaybe<String_Filter_Operators>;
  expires_on?: InputMaybe<Date_Filter_Operators>;
  expires_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  finished_on?: InputMaybe<Date_Filter_Operators>;
  finished_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_cert_url?: InputMaybe<String_Filter_Operators>;
  import_report_url?: InputMaybe<String_Filter_Operators>;
  import_subscription_id?: InputMaybe<Number_Filter_Operators>;
  last_attempt?: InputMaybe<Modules_Results_Filter>;
  module_version?: InputMaybe<Modules_Versions_Filter>;
  modules_definition_id?: InputMaybe<Modules_Definition_Filter>;
  reassigned?: InputMaybe<Boolean_Filter_Operators>;
  score?: InputMaybe<Number_Filter_Operators>;
  started_on?: InputMaybe<Date_Filter_Operators>;
  started_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
};

export type Junction_Modules_Definition_Directus_Users_Mutated = {
  __typename?: 'junction_modules_definition_directus_users_mutated';
  data?: Maybe<Junction_Modules_Definition_Directus_Users>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Policies_Agencies = {
  __typename?: 'junction_policies_agencies';
  agencies_id?: Maybe<Agencies>;
  id: Scalars['ID']['output'];
  policies_id?: Maybe<Policies>;
};


export type Junction_Policies_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Policies_AgenciesPolicies_IdArgs = {
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Policies_Agencies_Aggregated = {
  __typename?: 'junction_policies_agencies_aggregated';
  avg?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Policies_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Policies_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Policies_Agencies_Aggregated_Fields>;
};

export type Junction_Policies_Agencies_Aggregated_Count = {
  __typename?: 'junction_policies_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  policies_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Policies_Agencies_Aggregated_Fields = {
  __typename?: 'junction_policies_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Policies_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Policies_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Policies_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  policies_id?: InputMaybe<Policies_Filter>;
};

export type Junction_Policies_Agencies_Mutated = {
  __typename?: 'junction_policies_agencies_mutated';
  data?: Maybe<Junction_Policies_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Policies_Categories = {
  __typename?: 'junction_policies_categories';
  categories_id?: Maybe<Categories>;
  id: Scalars['ID']['output'];
  policies_id?: Maybe<Policies>;
};


export type Junction_Policies_CategoriesCategories_IdArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Policies_CategoriesPolicies_IdArgs = {
  filter?: InputMaybe<Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Policies_Categories_Aggregated = {
  __typename?: 'junction_policies_categories_aggregated';
  avg?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
  count?: Maybe<Junction_Policies_Categories_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Policies_Categories_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
  min?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
  sum?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Policies_Categories_Aggregated_Fields>;
};

export type Junction_Policies_Categories_Aggregated_Count = {
  __typename?: 'junction_policies_categories_aggregated_count';
  categories_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  policies_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Policies_Categories_Aggregated_Fields = {
  __typename?: 'junction_policies_categories_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Policies_Categories_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Policies_Categories_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Policies_Categories_Filter>>>;
  categories_id?: InputMaybe<Categories_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  policies_id?: InputMaybe<Policies_Filter>;
};

export type Junction_Policies_Categories_Mutated = {
  __typename?: 'junction_policies_categories_mutated';
  data?: Maybe<Junction_Policies_Categories>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Sc_Definitions_Agencies = {
  __typename?: 'junction_sc_definitions_agencies';
  agencies_id?: Maybe<Agencies>;
  id: Scalars['ID']['output'];
  sc_definitions_id?: Maybe<Sc_Definitions>;
};


export type Junction_Sc_Definitions_AgenciesAgencies_IdArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Sc_Definitions_AgenciesSc_Definitions_IdArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Sc_Definitions_Agencies_Aggregated = {
  __typename?: 'junction_sc_definitions_agencies_aggregated';
  avg?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
  count?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
  min?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
  sum?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Sc_Definitions_Agencies_Aggregated_Fields>;
};

export type Junction_Sc_Definitions_Agencies_Aggregated_Count = {
  __typename?: 'junction_sc_definitions_agencies_aggregated_count';
  agencies_id?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sc_definitions_id?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Sc_Definitions_Agencies_Aggregated_Fields = {
  __typename?: 'junction_sc_definitions_agencies_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  sc_definitions_id?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Sc_Definitions_Agencies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Sc_Definitions_Agencies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Sc_Definitions_Agencies_Filter>>>;
  agencies_id?: InputMaybe<Agencies_Filter>;
  id?: InputMaybe<Number_Filter_Operators>;
  sc_definitions_id?: InputMaybe<Sc_Definitions_Filter>;
};

export type Junction_Sc_Definitions_Agencies_Mutated = {
  __typename?: 'junction_sc_definitions_agencies_mutated';
  data?: Maybe<Junction_Sc_Definitions_Agencies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Junction_Sc_Definitions_Directus_Users = {
  __typename?: 'junction_sc_definitions_directus_users';
  accept_agreements?: Maybe<Scalars['Boolean']['output']>;
  agency?: Maybe<Agencies>;
  assigned_on?: Maybe<Scalars['Date']['output']>;
  assigned_on_func?: Maybe<Datetime_Functions>;
  bundle_id?: Maybe<Bundles>;
  can_retake?: Maybe<Scalars['Boolean']['output']>;
  directus_users_id?: Maybe<Directus_Users>;
  due_date?: Maybe<Scalars['Date']['output']>;
  due_date_func?: Maybe<Datetime_Functions>;
  expiration_date?: Maybe<Scalars['Date']['output']>;
  expiration_date_func?: Maybe<Datetime_Functions>;
  expiration_type?: Maybe<Scalars['String']['output']>;
  expires_on?: Maybe<Scalars['Date']['output']>;
  expires_on_func?: Maybe<Datetime_Functions>;
  finished_on?: Maybe<Scalars['Date']['output']>;
  finished_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_report_url?: Maybe<Scalars['String']['output']>;
  import_survey_subscription_id?: Maybe<Scalars['Int']['output']>;
  is_required?: Maybe<Scalars['Boolean']['output']>;
  questions?: Maybe<Scalars['JSON']['output']>;
  questions_func?: Maybe<Count_Functions>;
  reassigned?: Maybe<Scalars['Boolean']['output']>;
  sc_definitions_id?: Maybe<Sc_Definitions>;
  skillchecklist_version?: Maybe<Sc_Versions>;
  status?: Maybe<Scalars['String']['output']>;
};


export type Junction_Sc_Definitions_Directus_UsersAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Sc_Definitions_Directus_UsersBundle_IdArgs = {
  filter?: InputMaybe<Bundles_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Sc_Definitions_Directus_UsersDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Sc_Definitions_Directus_UsersSc_Definitions_IdArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Junction_Sc_Definitions_Directus_UsersSkillchecklist_VersionArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Junction_Sc_Definitions_Directus_Users_Aggregated = {
  __typename?: 'junction_sc_definitions_directus_users_aggregated';
  avg?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
  avgDistinct?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
  count?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
  min?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
  sum?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
  sumDistinct?: Maybe<Junction_Sc_Definitions_Directus_Users_Aggregated_Fields>;
};

export type Junction_Sc_Definitions_Directus_Users_Aggregated_Count = {
  __typename?: 'junction_sc_definitions_directus_users_aggregated_count';
  accept_agreements?: Maybe<Scalars['Int']['output']>;
  agency?: Maybe<Scalars['Int']['output']>;
  assigned_on?: Maybe<Scalars['Int']['output']>;
  bundle_id?: Maybe<Scalars['Int']['output']>;
  can_retake?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  due_date?: Maybe<Scalars['Int']['output']>;
  expiration_date?: Maybe<Scalars['Int']['output']>;
  expiration_type?: Maybe<Scalars['Int']['output']>;
  expires_on?: Maybe<Scalars['Int']['output']>;
  finished_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_report_url?: Maybe<Scalars['Int']['output']>;
  import_survey_subscription_id?: Maybe<Scalars['Int']['output']>;
  is_required?: Maybe<Scalars['Int']['output']>;
  questions?: Maybe<Scalars['Int']['output']>;
  reassigned?: Maybe<Scalars['Int']['output']>;
  sc_definitions_id?: Maybe<Scalars['Int']['output']>;
  skillchecklist_version?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type Junction_Sc_Definitions_Directus_Users_Aggregated_Fields = {
  __typename?: 'junction_sc_definitions_directus_users_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_survey_subscription_id?: Maybe<Scalars['Float']['output']>;
  sc_definitions_id?: Maybe<Scalars['Float']['output']>;
  skillchecklist_version?: Maybe<Scalars['Float']['output']>;
};

export type Junction_Sc_Definitions_Directus_Users_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>>>;
  accept_agreements?: InputMaybe<Boolean_Filter_Operators>;
  agency?: InputMaybe<Agencies_Filter>;
  assigned_on?: InputMaybe<Date_Filter_Operators>;
  assigned_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  bundle_id?: InputMaybe<Bundles_Filter>;
  can_retake?: InputMaybe<Boolean_Filter_Operators>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  due_date?: InputMaybe<Date_Filter_Operators>;
  due_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  expiration_date?: InputMaybe<Date_Filter_Operators>;
  expiration_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  expiration_type?: InputMaybe<String_Filter_Operators>;
  expires_on?: InputMaybe<Date_Filter_Operators>;
  expires_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  finished_on?: InputMaybe<Date_Filter_Operators>;
  finished_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_report_url?: InputMaybe<String_Filter_Operators>;
  import_survey_subscription_id?: InputMaybe<Number_Filter_Operators>;
  is_required?: InputMaybe<Boolean_Filter_Operators>;
  questions?: InputMaybe<String_Filter_Operators>;
  questions_func?: InputMaybe<Count_Function_Filter_Operators>;
  reassigned?: InputMaybe<Boolean_Filter_Operators>;
  sc_definitions_id?: InputMaybe<Sc_Definitions_Filter>;
  skillchecklist_version?: InputMaybe<Sc_Versions_Filter>;
  status?: InputMaybe<String_Filter_Operators>;
};

export type Junction_Sc_Definitions_Directus_Users_Mutated = {
  __typename?: 'junction_sc_definitions_directus_users_mutated';
  data?: Maybe<Junction_Sc_Definitions_Directus_Users>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Locations = {
  __typename?: 'locations';
  agency?: Maybe<Agencies>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type LocationsAgencyArgs = {
  filter?: InputMaybe<Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type LocationsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type LocationsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Locations_Aggregated = {
  __typename?: 'locations_aggregated';
  avg?: Maybe<Locations_Aggregated_Fields>;
  avgDistinct?: Maybe<Locations_Aggregated_Fields>;
  count?: Maybe<Locations_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Locations_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Locations_Aggregated_Fields>;
  min?: Maybe<Locations_Aggregated_Fields>;
  sum?: Maybe<Locations_Aggregated_Fields>;
  sumDistinct?: Maybe<Locations_Aggregated_Fields>;
};

export type Locations_Aggregated_Count = {
  __typename?: 'locations_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Locations_Aggregated_Fields = {
  __typename?: 'locations_aggregated_fields';
  import_id?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
};

export type Locations_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Locations_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Locations_Filter>>>;
  agency?: InputMaybe<Agencies_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  import_id?: InputMaybe<Number_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  sort?: InputMaybe<Number_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Locations_Mutated = {
  __typename?: 'locations_mutated';
  data?: Maybe<Locations>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Maintenance_Windows = {
  __typename?: 'maintenance_windows';
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  start_date_time?: Maybe<Scalars['Date']['output']>;
  start_date_time_func?: Maybe<Datetime_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Maintenance_WindowsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Maintenance_WindowsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Maintenance_Windows_Aggregated = {
  __typename?: 'maintenance_windows_aggregated';
  count?: Maybe<Maintenance_Windows_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Maintenance_Windows_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Maintenance_Windows_Aggregated_Count = {
  __typename?: 'maintenance_windows_aggregated_count';
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  notes?: Maybe<Scalars['Int']['output']>;
  start_date_time?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Maintenance_Windows_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Maintenance_Windows_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Maintenance_Windows_Filter>>>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  notes?: InputMaybe<String_Filter_Operators>;
  start_date_time?: InputMaybe<Date_Filter_Operators>;
  start_date_time_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Maintenance_Windows_Mutated = {
  __typename?: 'maintenance_windows_mutated';
  data?: Maybe<Maintenance_Windows>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Modules_Definition = {
  __typename?: 'modules_definition';
  agencies?: Maybe<Array<Maybe<Junction_Modules_Definition_Agencies>>>;
  agencies_func?: Maybe<Count_Functions>;
  copyright?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  description?: Maybe<Scalars['String']['output']>;
  directus_users?: Maybe<Array<Maybe<Junction_Modules_Definition_Directus_Users>>>;
  directus_users_func?: Maybe<Count_Functions>;
  expiration_date?: Maybe<Scalars['Date']['output']>;
  expiration_date_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  import_ceu?: Maybe<Scalars['Float']['output']>;
  import_course_id?: Maybe<Scalars['Int']['output']>;
  import_is_shell?: Maybe<Scalars['Boolean']['output']>;
  last_version?: Maybe<Modules_Versions>;
  modality?: Maybe<Categories>;
  sort?: Maybe<Scalars['Int']['output']>;
  specialty?: Maybe<Categories>;
  status?: Maybe<Scalars['String']['output']>;
  sub_specialty?: Maybe<Categories>;
  title?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  versions?: Maybe<Array<Maybe<Modules_Versions>>>;
  versions_func?: Maybe<Count_Functions>;
};


export type Modules_DefinitionAgenciesArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionLast_VersionArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionModalityArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionSpecialtyArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionSub_SpecialtyArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_DefinitionVersionsArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Modules_Definition_Aggregated = {
  __typename?: 'modules_definition_aggregated';
  avg?: Maybe<Modules_Definition_Aggregated_Fields>;
  avgDistinct?: Maybe<Modules_Definition_Aggregated_Fields>;
  count?: Maybe<Modules_Definition_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Modules_Definition_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Modules_Definition_Aggregated_Fields>;
  min?: Maybe<Modules_Definition_Aggregated_Fields>;
  sum?: Maybe<Modules_Definition_Aggregated_Fields>;
  sumDistinct?: Maybe<Modules_Definition_Aggregated_Fields>;
};

export type Modules_Definition_Aggregated_Count = {
  __typename?: 'modules_definition_aggregated_count';
  agencies?: Maybe<Scalars['Int']['output']>;
  copyright?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  expiration_date?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_ceu?: Maybe<Scalars['Int']['output']>;
  import_course_id?: Maybe<Scalars['Int']['output']>;
  import_is_shell?: Maybe<Scalars['Int']['output']>;
  last_version?: Maybe<Scalars['Int']['output']>;
  modality?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  specialty?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  sub_specialty?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  versions?: Maybe<Scalars['Int']['output']>;
};

export type Modules_Definition_Aggregated_Fields = {
  __typename?: 'modules_definition_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_ceu?: Maybe<Scalars['Float']['output']>;
  import_course_id?: Maybe<Scalars['Float']['output']>;
  last_version?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
};

export type Modules_Definition_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Modules_Definition_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Modules_Definition_Filter>>>;
  agencies?: InputMaybe<Junction_Modules_Definition_Agencies_Filter>;
  agencies_func?: InputMaybe<Count_Function_Filter_Operators>;
  copyright?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  expiration_date?: InputMaybe<Date_Filter_Operators>;
  expiration_date_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_ceu?: InputMaybe<Number_Filter_Operators>;
  import_course_id?: InputMaybe<Number_Filter_Operators>;
  import_is_shell?: InputMaybe<Boolean_Filter_Operators>;
  last_version?: InputMaybe<Modules_Versions_Filter>;
  modality?: InputMaybe<Categories_Filter>;
  sort?: InputMaybe<Number_Filter_Operators>;
  specialty?: InputMaybe<Categories_Filter>;
  status?: InputMaybe<String_Filter_Operators>;
  sub_specialty?: InputMaybe<Categories_Filter>;
  title?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  versions?: InputMaybe<Modules_Versions_Filter>;
  versions_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Modules_Definition_Mutated = {
  __typename?: 'modules_definition_mutated';
  data?: Maybe<Modules_Definition>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Modules_Results = {
  __typename?: 'modules_results';
  answers?: Maybe<Scalars['JSON']['output']>;
  answers_func?: Maybe<Count_Functions>;
  assignment_id?: Maybe<Junction_Modules_Definition_Directus_Users>;
  attempt?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  finished_on?: Maybe<Scalars['Date']['output']>;
  finished_on_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  module_definition_id?: Maybe<Modules_Definition>;
  module_version_id?: Maybe<Modules_Versions>;
  score?: Maybe<Scalars['Float']['output']>;
  started_on?: Maybe<Scalars['Date']['output']>;
  started_on_func?: Maybe<Datetime_Functions>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Modules_ResultsAssignment_IdArgs = {
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_ResultsModule_Definition_IdArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_ResultsModule_Version_IdArgs = {
  filter?: InputMaybe<Modules_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_ResultsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_ResultsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Modules_Results_Aggregated = {
  __typename?: 'modules_results_aggregated';
  avg?: Maybe<Modules_Results_Aggregated_Fields>;
  avgDistinct?: Maybe<Modules_Results_Aggregated_Fields>;
  count?: Maybe<Modules_Results_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Modules_Results_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Modules_Results_Aggregated_Fields>;
  min?: Maybe<Modules_Results_Aggregated_Fields>;
  sum?: Maybe<Modules_Results_Aggregated_Fields>;
  sumDistinct?: Maybe<Modules_Results_Aggregated_Fields>;
};

export type Modules_Results_Aggregated_Count = {
  __typename?: 'modules_results_aggregated_count';
  answers?: Maybe<Scalars['Int']['output']>;
  assignment_id?: Maybe<Scalars['Int']['output']>;
  attempt?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  finished_on?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  module_definition_id?: Maybe<Scalars['Int']['output']>;
  module_version_id?: Maybe<Scalars['Int']['output']>;
  score?: Maybe<Scalars['Int']['output']>;
  started_on?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Modules_Results_Aggregated_Fields = {
  __typename?: 'modules_results_aggregated_fields';
  assignment_id?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  module_definition_id?: Maybe<Scalars['Float']['output']>;
  module_version_id?: Maybe<Scalars['Float']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
};

export type Modules_Results_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Modules_Results_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Modules_Results_Filter>>>;
  answers?: InputMaybe<String_Filter_Operators>;
  answers_func?: InputMaybe<Count_Function_Filter_Operators>;
  assignment_id?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  attempt?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  finished_on?: InputMaybe<Date_Filter_Operators>;
  finished_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  module_definition_id?: InputMaybe<Modules_Definition_Filter>;
  module_version_id?: InputMaybe<Modules_Versions_Filter>;
  score?: InputMaybe<Number_Filter_Operators>;
  started_on?: InputMaybe<Date_Filter_Operators>;
  started_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Modules_Results_Mutated = {
  __typename?: 'modules_results_mutated';
  data?: Maybe<Modules_Results>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Modules_Versions = {
  __typename?: 'modules_versions';
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  contact_hour?: Maybe<Scalars['Float']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  definition?: Maybe<Modules_Definition>;
  entry_point?: Maybe<Scalars['String']['output']>;
  expiration?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  package?: Maybe<Directus_Files>;
  package_status?: Maybe<Scalars['String']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  version_number?: Maybe<Scalars['Float']['output']>;
};


export type Modules_VersionsDefinitionArgs = {
  filter?: InputMaybe<Modules_Definition_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_VersionsPackageArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_VersionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Modules_VersionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Modules_Versions_Aggregated = {
  __typename?: 'modules_versions_aggregated';
  avg?: Maybe<Modules_Versions_Aggregated_Fields>;
  avgDistinct?: Maybe<Modules_Versions_Aggregated_Fields>;
  count?: Maybe<Modules_Versions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Modules_Versions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Modules_Versions_Aggregated_Fields>;
  min?: Maybe<Modules_Versions_Aggregated_Fields>;
  sum?: Maybe<Modules_Versions_Aggregated_Fields>;
  sumDistinct?: Maybe<Modules_Versions_Aggregated_Fields>;
};

export type Modules_Versions_Aggregated_Count = {
  __typename?: 'modules_versions_aggregated_count';
  allowed_attempts?: Maybe<Scalars['Int']['output']>;
  contact_hour?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  definition?: Maybe<Scalars['Int']['output']>;
  entry_point?: Maybe<Scalars['Int']['output']>;
  expiration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  package?: Maybe<Scalars['Int']['output']>;
  package_status?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  version_number?: Maybe<Scalars['Int']['output']>;
};

export type Modules_Versions_Aggregated_Fields = {
  __typename?: 'modules_versions_aggregated_fields';
  allowed_attempts?: Maybe<Scalars['Float']['output']>;
  contact_hour?: Maybe<Scalars['Float']['output']>;
  definition?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
  version_number?: Maybe<Scalars['Float']['output']>;
};

export type Modules_Versions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Modules_Versions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Modules_Versions_Filter>>>;
  allowed_attempts?: InputMaybe<Number_Filter_Operators>;
  contact_hour?: InputMaybe<Number_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  definition?: InputMaybe<Modules_Definition_Filter>;
  entry_point?: InputMaybe<String_Filter_Operators>;
  expiration?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  package?: InputMaybe<Directus_Files_Filter>;
  package_status?: InputMaybe<String_Filter_Operators>;
  sort?: InputMaybe<Number_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  version_number?: InputMaybe<Number_Filter_Operators>;
};

export type Modules_Versions_Mutated = {
  __typename?: 'modules_versions_mutated';
  data?: Maybe<Modules_Versions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Number_Filter_Operators = {
  _between?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _eq?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _gt?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _gte?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _in?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _lt?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _lte?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _nbetween?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _neq?: InputMaybe<Scalars['GraphQLStringOrFloat']['input']>;
  _nin?: InputMaybe<Array<InputMaybe<Scalars['GraphQLStringOrFloat']['input']>>>;
  _nnull?: InputMaybe<Scalars['Boolean']['input']>;
  _null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Policies = {
  __typename?: 'policies';
  agencies?: Maybe<Array<Maybe<Junction_Policies_Agencies>>>;
  agencies_func?: Maybe<Count_Functions>;
  categories?: Maybe<Array<Maybe<Junction_Policies_Categories>>>;
  categories_func?: Maybe<Count_Functions>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  directus_users?: Maybe<Array<Maybe<Junction_Directus_Users_Policies>>>;
  directus_users_func?: Maybe<Count_Functions>;
  document?: Maybe<Directus_Files>;
  id: Scalars['ID']['output'];
  import_policy_id?: Maybe<Scalars['Int']['output']>;
  import_policy_url?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type PoliciesAgenciesArgs = {
  filter?: InputMaybe<Junction_Policies_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type PoliciesCategoriesArgs = {
  filter?: InputMaybe<Junction_Policies_Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type PoliciesDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type PoliciesDocumentArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type PoliciesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type PoliciesUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Policies_Aggregated = {
  __typename?: 'policies_aggregated';
  avg?: Maybe<Policies_Aggregated_Fields>;
  avgDistinct?: Maybe<Policies_Aggregated_Fields>;
  count?: Maybe<Policies_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Policies_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Policies_Aggregated_Fields>;
  min?: Maybe<Policies_Aggregated_Fields>;
  sum?: Maybe<Policies_Aggregated_Fields>;
  sumDistinct?: Maybe<Policies_Aggregated_Fields>;
};

export type Policies_Aggregated_Count = {
  __typename?: 'policies_aggregated_count';
  agencies?: Maybe<Scalars['Int']['output']>;
  categories?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  document?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_policy_id?: Maybe<Scalars['Int']['output']>;
  import_policy_url?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Policies_Aggregated_Fields = {
  __typename?: 'policies_aggregated_fields';
  import_policy_id?: Maybe<Scalars['Float']['output']>;
};

export type Policies_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Policies_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Policies_Filter>>>;
  agencies?: InputMaybe<Junction_Policies_Agencies_Filter>;
  agencies_func?: InputMaybe<Count_Function_Filter_Operators>;
  categories?: InputMaybe<Junction_Policies_Categories_Filter>;
  categories_func?: InputMaybe<Count_Function_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  document?: InputMaybe<Directus_Files_Filter>;
  id?: InputMaybe<String_Filter_Operators>;
  import_policy_id?: InputMaybe<Number_Filter_Operators>;
  import_policy_url?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Policies_Mutated = {
  __typename?: 'policies_mutated';
  data?: Maybe<Policies>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Question_Versions = {
  __typename?: 'question_versions';
  answer?: Maybe<Scalars['JSON']['output']>;
  answer_func?: Maybe<Count_Functions>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  image?: Maybe<Directus_Files>;
  question: Scalars['JSON']['output'];
  question_func?: Maybe<Count_Functions>;
  question_id?: Maybe<Questions>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type Question_VersionsImageArgs = {
  filter?: InputMaybe<Directus_Files_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Question_VersionsQuestion_IdArgs = {
  filter?: InputMaybe<Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Question_VersionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Question_VersionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Question_Versions_Aggregated = {
  __typename?: 'question_versions_aggregated';
  count?: Maybe<Question_Versions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Question_Versions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Question_Versions_Aggregated_Count = {
  __typename?: 'question_versions_aggregated_count';
  answer?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['Int']['output']>;
  question?: Maybe<Scalars['Int']['output']>;
  question_id?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Question_Versions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Question_Versions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Question_Versions_Filter>>>;
  answer?: InputMaybe<String_Filter_Operators>;
  answer_func?: InputMaybe<Count_Function_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  image?: InputMaybe<Directus_Files_Filter>;
  question?: InputMaybe<String_Filter_Operators>;
  question_func?: InputMaybe<Count_Function_Filter_Operators>;
  question_id?: InputMaybe<Questions_Filter>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Question_Versions_Mutated = {
  __typename?: 'question_versions_mutated';
  data?: Maybe<Question_Versions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Questions = {
  __typename?: 'questions';
  category?: Maybe<Categories>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  exam_versions?: Maybe<Array<Maybe<Junction_Exam_Versions_Questions>>>;
  exam_versions_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  versions?: Maybe<Array<Maybe<Question_Versions>>>;
  versions_func?: Maybe<Count_Functions>;
};


export type QuestionsCategoryArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuestionsExam_VersionsArgs = {
  filter?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuestionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuestionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QuestionsVersionsArgs = {
  filter?: InputMaybe<Question_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Questions_Aggregated = {
  __typename?: 'questions_aggregated';
  count?: Maybe<Questions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Questions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Questions_Aggregated_Count = {
  __typename?: 'questions_aggregated_count';
  category?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  exam_versions?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  versions?: Maybe<Scalars['Int']['output']>;
};

export type Questions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Questions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Questions_Filter>>>;
  category?: InputMaybe<Categories_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  exam_versions?: InputMaybe<Junction_Exam_Versions_Questions_Filter>;
  exam_versions_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  title?: InputMaybe<String_Filter_Operators>;
  type?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  versions?: InputMaybe<Question_Versions_Filter>;
  versions_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Questions_Mutated = {
  __typename?: 'questions_mutated';
  data?: Maybe<Questions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Sc_Definitions = {
  __typename?: 'sc_definitions';
  agency?: Maybe<Array<Maybe<Junction_Sc_Definitions_Agencies>>>;
  agency_func?: Maybe<Count_Functions>;
  category?: Maybe<Categories>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  directus_users?: Maybe<Array<Maybe<Junction_Sc_Definitions_Directus_Users>>>;
  directus_users_func?: Maybe<Count_Functions>;
  id: Scalars['ID']['output'];
  import_is_shell?: Maybe<Scalars['Boolean']['output']>;
  import_survey_id?: Maybe<Scalars['Int']['output']>;
  last_version?: Maybe<Sc_Versions>;
  original_item_definition?: Maybe<Sc_Definitions>;
  original_item_version?: Maybe<Sc_Versions>;
  reference_number?: Maybe<Scalars['String']['output']>;
  speciality?: Maybe<Categories>;
  status?: Maybe<Scalars['String']['output']>;
  sub_speciality?: Maybe<Categories>;
  title?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  versions?: Maybe<Array<Maybe<Sc_Versions>>>;
  versions_func?: Maybe<Count_Functions>;
};


export type Sc_DefinitionsAgencyArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsCategoryArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsDirectus_UsersArgs = {
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsLast_VersionArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsOriginal_Item_DefinitionArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsOriginal_Item_VersionArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsSpecialityArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsSub_SpecialityArgs = {
  filter?: InputMaybe<Categories_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_DefinitionsVersionsArgs = {
  filter?: InputMaybe<Sc_Versions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Sc_Definitions_Aggregated = {
  __typename?: 'sc_definitions_aggregated';
  avg?: Maybe<Sc_Definitions_Aggregated_Fields>;
  avgDistinct?: Maybe<Sc_Definitions_Aggregated_Fields>;
  count?: Maybe<Sc_Definitions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Sc_Definitions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Sc_Definitions_Aggregated_Fields>;
  min?: Maybe<Sc_Definitions_Aggregated_Fields>;
  sum?: Maybe<Sc_Definitions_Aggregated_Fields>;
  sumDistinct?: Maybe<Sc_Definitions_Aggregated_Fields>;
};

export type Sc_Definitions_Aggregated_Count = {
  __typename?: 'sc_definitions_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  category?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  directus_users?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  import_is_shell?: Maybe<Scalars['Int']['output']>;
  import_survey_id?: Maybe<Scalars['Int']['output']>;
  last_version?: Maybe<Scalars['Int']['output']>;
  original_item_definition?: Maybe<Scalars['Int']['output']>;
  original_item_version?: Maybe<Scalars['Int']['output']>;
  reference_number?: Maybe<Scalars['Int']['output']>;
  speciality?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  sub_speciality?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  versions?: Maybe<Scalars['Int']['output']>;
};

export type Sc_Definitions_Aggregated_Fields = {
  __typename?: 'sc_definitions_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  import_survey_id?: Maybe<Scalars['Float']['output']>;
  last_version?: Maybe<Scalars['Float']['output']>;
  original_item_definition?: Maybe<Scalars['Float']['output']>;
  original_item_version?: Maybe<Scalars['Float']['output']>;
};

export type Sc_Definitions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Sc_Definitions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Sc_Definitions_Filter>>>;
  agency?: InputMaybe<Junction_Sc_Definitions_Agencies_Filter>;
  agency_func?: InputMaybe<Count_Function_Filter_Operators>;
  category?: InputMaybe<Categories_Filter>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  directus_users?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  directus_users_func?: InputMaybe<Count_Function_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  import_is_shell?: InputMaybe<Boolean_Filter_Operators>;
  import_survey_id?: InputMaybe<Number_Filter_Operators>;
  last_version?: InputMaybe<Sc_Versions_Filter>;
  original_item_definition?: InputMaybe<Sc_Definitions_Filter>;
  original_item_version?: InputMaybe<Sc_Versions_Filter>;
  reference_number?: InputMaybe<String_Filter_Operators>;
  speciality?: InputMaybe<Categories_Filter>;
  status?: InputMaybe<String_Filter_Operators>;
  sub_speciality?: InputMaybe<Categories_Filter>;
  title?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  versions?: InputMaybe<Sc_Versions_Filter>;
  versions_func?: InputMaybe<Count_Function_Filter_Operators>;
};

export type Sc_Definitions_Mutated = {
  __typename?: 'sc_definitions_mutated';
  data?: Maybe<Sc_Definitions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Sc_Versions = {
  __typename?: 'sc_versions';
  agreements?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  definition?: Maybe<Sc_Definitions>;
  description?: Maybe<Scalars['String']['output']>;
  expiration?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  instructions?: Maybe<Scalars['String']['output']>;
  is_new_format?: Maybe<Scalars['Boolean']['output']>;
  questions?: Maybe<Scalars['JSON']['output']>;
  questions_func?: Maybe<Count_Functions>;
  total_questions?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
  version_number?: Maybe<Scalars['String']['output']>;
};


export type Sc_VersionsDefinitionArgs = {
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_VersionsUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type Sc_VersionsUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Sc_Versions_Aggregated = {
  __typename?: 'sc_versions_aggregated';
  avg?: Maybe<Sc_Versions_Aggregated_Fields>;
  avgDistinct?: Maybe<Sc_Versions_Aggregated_Fields>;
  count?: Maybe<Sc_Versions_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Sc_Versions_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Sc_Versions_Aggregated_Fields>;
  min?: Maybe<Sc_Versions_Aggregated_Fields>;
  sum?: Maybe<Sc_Versions_Aggregated_Fields>;
  sumDistinct?: Maybe<Sc_Versions_Aggregated_Fields>;
};

export type Sc_Versions_Aggregated_Count = {
  __typename?: 'sc_versions_aggregated_count';
  agreements?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  definition?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  expiration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  instructions?: Maybe<Scalars['Int']['output']>;
  is_new_format?: Maybe<Scalars['Int']['output']>;
  questions?: Maybe<Scalars['Int']['output']>;
  total_questions?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
  version_number?: Maybe<Scalars['Int']['output']>;
};

export type Sc_Versions_Aggregated_Fields = {
  __typename?: 'sc_versions_aggregated_fields';
  definition?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  total_questions?: Maybe<Scalars['Float']['output']>;
};

export type Sc_Versions_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Sc_Versions_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Sc_Versions_Filter>>>;
  agreements?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  definition?: InputMaybe<Sc_Definitions_Filter>;
  description?: InputMaybe<String_Filter_Operators>;
  expiration?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  instructions?: InputMaybe<String_Filter_Operators>;
  is_new_format?: InputMaybe<Boolean_Filter_Operators>;
  questions?: InputMaybe<String_Filter_Operators>;
  questions_func?: InputMaybe<Count_Function_Filter_Operators>;
  total_questions?: InputMaybe<Number_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
  version_number?: InputMaybe<String_Filter_Operators>;
};

export type Sc_Versions_Mutated = {
  __typename?: 'sc_versions_mutated';
  data?: Maybe<Sc_Versions>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Server_Info = {
  __typename?: 'server_info';
  flows?: Maybe<Server_Info_Flows>;
  project?: Maybe<Server_Info_Project>;
  queryLimit?: Maybe<Server_Info_Query_Limit>;
  rateLimit?: Maybe<Scalars['Boolean']['output']>;
  rateLimitGlobal?: Maybe<Scalars['Boolean']['output']>;
  websocket?: Maybe<Server_Info_Websocket>;
};

export type Server_Info_Flows = {
  __typename?: 'server_info_flows';
  execAllowedModules?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Server_Info_Project = {
  __typename?: 'server_info_project';
  custom_css?: Maybe<Scalars['String']['output']>;
  default_language?: Maybe<Scalars['String']['output']>;
  project_color?: Maybe<Scalars['String']['output']>;
  project_descriptor?: Maybe<Scalars['String']['output']>;
  project_logo?: Maybe<Scalars['String']['output']>;
  project_name?: Maybe<Scalars['String']['output']>;
  public_background?: Maybe<Scalars['String']['output']>;
  public_foreground?: Maybe<Scalars['String']['output']>;
  public_note?: Maybe<Scalars['String']['output']>;
};

export type Server_Info_Query_Limit = {
  __typename?: 'server_info_query_limit';
  default?: Maybe<Scalars['Int']['output']>;
  max?: Maybe<Scalars['Int']['output']>;
};

export type Server_Info_Websocket = {
  __typename?: 'server_info_websocket';
  graphql?: Maybe<Server_Info_Websocket_Graphql>;
  heartbeat?: Maybe<Scalars['Int']['output']>;
  rest?: Maybe<Server_Info_Websocket_Rest>;
};

export type Server_Info_Websocket_Graphql = {
  __typename?: 'server_info_websocket_graphql';
  authentication?: Maybe<Server_Info_Websocket_Graphql_Authentication>;
  path?: Maybe<Scalars['String']['output']>;
};

export enum Server_Info_Websocket_Graphql_Authentication {
  Handshake = 'handshake',
  Public = 'public',
  Strict = 'strict'
}

export type Server_Info_Websocket_Rest = {
  __typename?: 'server_info_websocket_rest';
  authentication?: Maybe<Server_Info_Websocket_Rest_Authentication>;
  path?: Maybe<Scalars['String']['output']>;
};

export enum Server_Info_Websocket_Rest_Authentication {
  Handshake = 'handshake',
  Public = 'public',
  Strict = 'strict'
}

export type Specialties = {
  __typename?: 'specialties';
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  date_updated?: Maybe<Scalars['Date']['output']>;
  date_updated_func?: Maybe<Datetime_Functions>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_created?: Maybe<Directus_Users>;
  user_updated?: Maybe<Directus_Users>;
};


export type SpecialtiesUser_CreatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type SpecialtiesUser_UpdatedArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Specialties_Aggregated = {
  __typename?: 'specialties_aggregated';
  count?: Maybe<Specialties_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Specialties_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type Specialties_Aggregated_Count = {
  __typename?: 'specialties_aggregated_count';
  date_created?: Maybe<Scalars['Int']['output']>;
  date_updated?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_created?: Maybe<Scalars['Int']['output']>;
  user_updated?: Maybe<Scalars['Int']['output']>;
};

export type Specialties_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Specialties_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Specialties_Filter>>>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  date_updated?: InputMaybe<Date_Filter_Operators>;
  date_updated_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  name?: InputMaybe<String_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_created?: InputMaybe<Directus_Users_Filter>;
  user_updated?: InputMaybe<Directus_Users_Filter>;
};

export type Specialties_Mutated = {
  __typename?: 'specialties_mutated';
  data?: Maybe<Specialties>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type String_Filter_Operators = {
  _contains?: InputMaybe<Scalars['String']['input']>;
  _empty?: InputMaybe<Scalars['Boolean']['input']>;
  _ends_with?: InputMaybe<Scalars['String']['input']>;
  _eq?: InputMaybe<Scalars['String']['input']>;
  _icontains?: InputMaybe<Scalars['String']['input']>;
  _iends_with?: InputMaybe<Scalars['String']['input']>;
  _in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  _istarts_with?: InputMaybe<Scalars['String']['input']>;
  _ncontains?: InputMaybe<Scalars['String']['input']>;
  _nempty?: InputMaybe<Scalars['Boolean']['input']>;
  _nends_with?: InputMaybe<Scalars['String']['input']>;
  _neq?: InputMaybe<Scalars['String']['input']>;
  _niends_with?: InputMaybe<Scalars['String']['input']>;
  _nin?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  _nistarts_with?: InputMaybe<Scalars['String']['input']>;
  _nnull?: InputMaybe<Scalars['Boolean']['input']>;
  _nstarts_with?: InputMaybe<Scalars['String']['input']>;
  _null?: InputMaybe<Scalars['Boolean']['input']>;
  _starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Agencies_Input = {
  automatic_notifications_email?: InputMaybe<Scalars['String']['input']>;
  bh_enable?: InputMaybe<Scalars['Boolean']['input']>;
  billing_code?: InputMaybe<Scalars['String']['input']>;
  certificate_logo?: InputMaybe<Update_Directus_Files_Input>;
  custom_allowed_attempts_exams?: InputMaybe<Scalars['Int']['input']>;
  custom_allowed_attempts_modules?: InputMaybe<Scalars['Int']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  default_due_date?: InputMaybe<Scalars['Int']['input']>;
  default_expiration?: InputMaybe<Scalars['String']['input']>;
  departments?: InputMaybe<Array<InputMaybe<Update_Departments_Input>>>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Input>>>;
  enable_certificate_logo?: InputMaybe<Scalars['Boolean']['input']>;
  exams?: InputMaybe<Array<InputMaybe<Update_Junction_Exams_Agencies_Input>>>;
  expiration?: InputMaybe<Scalars['Date']['input']>;
  ia_api_key?: InputMaybe<Scalars['String']['input']>;
  ia_app_id?: InputMaybe<Scalars['String']['input']>;
  ia_enable?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_agency_target_id?: InputMaybe<Scalars['String']['input']>;
  import_portal_id?: InputMaybe<Scalars['Int']['input']>;
  import_url?: InputMaybe<Scalars['String']['input']>;
  live_since?: InputMaybe<Scalars['Date']['input']>;
  locations?: InputMaybe<Array<InputMaybe<Update_Locations_Input>>>;
  logo?: InputMaybe<Update_Directus_Files_Input>;
  max_licenses?: InputMaybe<Scalars['Int']['input']>;
  max_users?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notifications_settings?: InputMaybe<Scalars['JSON']['input']>;
  sc_allow_na_option?: InputMaybe<Scalars['Boolean']['input']>;
  self_assigment_allow?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  webhook_enable?: InputMaybe<Scalars['Boolean']['input']>;
  webhook_secret?: InputMaybe<Scalars['String']['input']>;
  webhook_token?: InputMaybe<Scalars['String']['input']>;
  webhook_url?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Ancc_Reports_Input = {
  created_at?: InputMaybe<Scalars['Date']['input']>;
  created_by?: InputMaybe<Update_Directus_Users_Input>;
  file_content?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['Date']['input']>;
};

export type Update_Bh_Config_Input = {
  agency_id?: InputMaybe<Update_Agencies_Input>;
  bh_access_token?: InputMaybe<Scalars['String']['input']>;
  bh_refresh_token?: InputMaybe<Scalars['String']['input']>;
  bh_session_key?: InputMaybe<Scalars['String']['input']>;
  client_id?: InputMaybe<Scalars['String']['input']>;
  client_password?: InputMaybe<Scalars['String']['input']>;
  client_secret?: InputMaybe<Scalars['String']['input']>;
  client_username?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  is_enable_mapping_checklist?: InputMaybe<Scalars['Boolean']['input']>;
  is_verified?: InputMaybe<Scalars['Boolean']['input']>;
  rest_url?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Bundles_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  documents?: InputMaybe<Array<InputMaybe<Update_Junction_Bundles_Documents_Input>>>;
  exams?: InputMaybe<Array<InputMaybe<Update_Junction_Bundles_Exams_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_group_id?: InputMaybe<Scalars['Int']['input']>;
  modules?: InputMaybe<Array<InputMaybe<Update_Junction_Bundles_Modules_Definition_Input>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  policies?: InputMaybe<Array<InputMaybe<Update_Junction_Bundles_Policies_Input>>>;
  skills_checklists?: InputMaybe<Array<InputMaybe<Update_Junction_Bundles_Sc_Definitions_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Categories_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Data_Migration_Mappings_Input = {
  content_type?: InputMaybe<Scalars['String']['input']>;
  exclude?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  source_name?: InputMaybe<Scalars['String']['input']>;
  target_id_number?: InputMaybe<Scalars['Int']['input']>;
  target_id_string?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Data_Migration_Records_Input = {
  data_migration?: InputMaybe<Update_Data_Migrations_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  error?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Data_Migrations_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_portal_id?: InputMaybe<Scalars['Int']['input']>;
  running?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Update_Departments_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Collections_Input = {
  meta?: InputMaybe<Directus_Collections_Meta_Input>;
};

export type Update_Directus_Dashboards_Input = {
  color?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  panels?: InputMaybe<Array<InputMaybe<Update_Directus_Panels_Input>>>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Fields_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  field?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Directus_Fields_Meta_Input>;
  schema?: InputMaybe<Directus_Fields_Schema_Input>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Directus_Files_Input = {
  charset?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['Int']['input']>;
  embed?: InputMaybe<Scalars['String']['input']>;
  filename_disk?: InputMaybe<Scalars['String']['input']>;
  filename_download?: InputMaybe<Scalars['String']['input']>;
  filesize?: InputMaybe<Scalars['GraphQLBigInt']['input']>;
  folder?: InputMaybe<Update_Directus_Folders_Input>;
  height?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  modified_by?: InputMaybe<Update_Directus_Users_Input>;
  modified_on?: InputMaybe<Scalars['Date']['input']>;
  storage?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  uploaded_by?: InputMaybe<Update_Directus_Users_Input>;
  uploaded_on?: InputMaybe<Scalars['Date']['input']>;
  width?: InputMaybe<Scalars['Int']['input']>;
};

export type Update_Directus_Flows_Input = {
  accountability?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  operation?: InputMaybe<Update_Directus_Operations_Input>;
  operations?: InputMaybe<Array<InputMaybe<Update_Directus_Operations_Input>>>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  trigger?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Folders_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  parent?: InputMaybe<Update_Directus_Folders_Input>;
};

export type Update_Directus_Notifications_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  item?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  recipient?: InputMaybe<Update_Directus_Users_Input>;
  sender?: InputMaybe<Update_Directus_Users_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Date']['input']>;
};

export type Update_Directus_Operations_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  flow?: InputMaybe<Update_Directus_Flows_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  position_x?: InputMaybe<Scalars['Int']['input']>;
  position_y?: InputMaybe<Scalars['Int']['input']>;
  reject?: InputMaybe<Update_Directus_Operations_Input>;
  resolve?: InputMaybe<Update_Directus_Operations_Input>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Panels_Input = {
  color?: InputMaybe<Scalars['String']['input']>;
  dashboard?: InputMaybe<Update_Directus_Dashboards_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  height?: InputMaybe<Scalars['Int']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<Scalars['JSON']['input']>;
  position_x?: InputMaybe<Scalars['Int']['input']>;
  position_y?: InputMaybe<Scalars['Int']['input']>;
  show_header?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  width?: InputMaybe<Scalars['Int']['input']>;
};

export type Update_Directus_Permissions_Input = {
  action?: InputMaybe<Scalars['String']['input']>;
  collection?: InputMaybe<Scalars['String']['input']>;
  fields?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  permissions?: InputMaybe<Scalars['JSON']['input']>;
  presets?: InputMaybe<Scalars['JSON']['input']>;
  role?: InputMaybe<Update_Directus_Roles_Input>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
};

export type Update_Directus_Presets_Input = {
  bookmark?: InputMaybe<Scalars['String']['input']>;
  collection?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Scalars['JSON']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  layout_options?: InputMaybe<Scalars['JSON']['input']>;
  layout_query?: InputMaybe<Scalars['JSON']['input']>;
  refresh_interval?: InputMaybe<Scalars['Int']['input']>;
  role?: InputMaybe<Update_Directus_Roles_Input>;
  search?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Relations_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  field?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Directus_Relations_Meta_Input>;
  related_collection?: InputMaybe<Scalars['String']['input']>;
  schema?: InputMaybe<Directus_Relations_Schema_Input>;
};

export type Update_Directus_Roles_Input = {
  admin_access?: InputMaybe<Scalars['Boolean']['input']>;
  app_access?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  enforce_tfa?: InputMaybe<Scalars['Boolean']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  ip_access?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  users?: InputMaybe<Array<InputMaybe<Update_Directus_Users_Input>>>;
};

export type Update_Directus_Settings_Input = {
  auth_login_attempts?: InputMaybe<Scalars['Int']['input']>;
  auth_password_policy?: InputMaybe<Scalars['String']['input']>;
  basemaps?: InputMaybe<Scalars['JSON']['input']>;
  custom_aspect_ratios?: InputMaybe<Scalars['JSON']['input']>;
  custom_css?: InputMaybe<Scalars['String']['input']>;
  default_language?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  mapbox_key?: InputMaybe<Scalars['String']['input']>;
  module_bar?: InputMaybe<Scalars['JSON']['input']>;
  /** $t:field_options.directus_settings.project_color_note */
  project_color?: InputMaybe<Scalars['String']['input']>;
  project_descriptor?: InputMaybe<Scalars['String']['input']>;
  project_logo?: InputMaybe<Update_Directus_Files_Input>;
  project_name?: InputMaybe<Scalars['String']['input']>;
  project_url?: InputMaybe<Scalars['String']['input']>;
  public_background?: InputMaybe<Update_Directus_Files_Input>;
  public_foreground?: InputMaybe<Update_Directus_Files_Input>;
  public_note?: InputMaybe<Scalars['String']['input']>;
  storage_asset_presets?: InputMaybe<Scalars['JSON']['input']>;
  storage_asset_transform?: InputMaybe<Scalars['String']['input']>;
  storage_default_folder?: InputMaybe<Update_Directus_Folders_Input>;
};

export type Update_Directus_Shares_Input = {
  collection?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_end?: InputMaybe<Scalars['Date']['input']>;
  /** $t:shared_leave_blank_for_unlimited */
  date_start?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  item?: InputMaybe<Scalars['String']['input']>;
  /** $t:shared_leave_blank_for_unlimited */
  max_uses?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  password?: InputMaybe<Scalars['Hash']['input']>;
  role?: InputMaybe<Update_Directus_Roles_Input>;
  times_used?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Directus_Translations_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Directus_Users_Input = {
  address_line_1?: InputMaybe<Scalars['String']['input']>;
  address_line_2?: InputMaybe<Scalars['String']['input']>;
  agencies?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Input>>>;
  auth_data?: InputMaybe<Scalars['JSON']['input']>;
  avatar?: InputMaybe<Update_Directus_Files_Input>;
  city?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  documents?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Documents_Input>>>;
  email?: InputMaybe<Scalars['String']['input']>;
  email_notifications?: InputMaybe<Scalars['Boolean']['input']>;
  exams?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Exams_Input>>>;
  external_identifier?: InputMaybe<Scalars['String']['input']>;
  first_name?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_student_id?: InputMaybe<Scalars['Int']['input']>;
  imported?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  last_access?: InputMaybe<Scalars['Date']['input']>;
  last_name?: InputMaybe<Scalars['String']['input']>;
  last_page?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  modules?: InputMaybe<Array<InputMaybe<Update_Junction_Modules_Definition_Directus_Users_Input>>>;
  password?: InputMaybe<Scalars['Hash']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  policies?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Policies_Input>>>;
  provider?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Update_Directus_Roles_Input>;
  sc_definitions?: InputMaybe<Array<InputMaybe<Update_Junction_Sc_Definitions_Directus_Users_Input>>>;
  state?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  tfa_secret?: InputMaybe<Scalars['Hash']['input']>;
  theme?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['Hash']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Directus_Webhooks_Input = {
  actions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  collections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  data?: InputMaybe<Scalars['Boolean']['input']>;
  headers?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  method?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Documents_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Update_Junction_Documents_Agencies_Input>>>;
  categories?: InputMaybe<Array<InputMaybe<Update_Junction_Documents_Categories_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Documents_Input>>>;
  document?: InputMaybe<Update_Directus_Files_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_document_id?: InputMaybe<Scalars['Int']['input']>;
  import_document_url?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Exam_Results_Input = {
  answer?: InputMaybe<Scalars['JSON']['input']>;
  assignment_id?: InputMaybe<Update_Junction_Directus_Users_Exams_Input>;
  attempt?: InputMaybe<Scalars['Int']['input']>;
  correct?: InputMaybe<Scalars['Boolean']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  exam_versions_id?: InputMaybe<Update_Exam_Versions_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  question_versions_id?: InputMaybe<Update_Question_Versions_Input>;
  questions_id?: InputMaybe<Update_Questions_Input>;
  time_taken?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Exam_Versions_Input = {
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  contact_hour?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  exam?: InputMaybe<Update_Exams_Input>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  fail_message?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  is_proctoring?: InputMaybe<Scalars['Boolean']['input']>;
  outline?: InputMaybe<Update_Directus_Files_Input>;
  passing_message?: InputMaybe<Scalars['String']['input']>;
  passing_score?: InputMaybe<Scalars['Int']['input']>;
  questions?: InputMaybe<Array<InputMaybe<Update_Junction_Exam_Versions_Questions_Input>>>;
  questions_to_give?: InputMaybe<Scalars['Int']['input']>;
  shuffle_questions?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Exams_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Update_Junction_Exams_Agencies_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Exams_Input>>>;
  exam_versions?: InputMaybe<Array<InputMaybe<Update_Exam_Versions_Input>>>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_ceu?: InputMaybe<Scalars['Float']['input']>;
  import_course_id?: InputMaybe<Scalars['Int']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  modality?: InputMaybe<Update_Categories_Input>;
  specialties?: InputMaybe<Array<InputMaybe<Update_Junction_Exams_Categories_Specialties_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  subspecialties?: InputMaybe<Array<InputMaybe<Update_Junction_Exams_Categories_Subspecialties_Input>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Feature_Flags_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  flag_key?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Iframe_Tokens_Input = {
  agency_id?: InputMaybe<Update_Agencies_Input>;
  ats_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  jwt_token?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Junction_Bundles_Documents_Input = {
  bundles_id?: InputMaybe<Update_Bundles_Input>;
  documents_id?: InputMaybe<Update_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Bundles_Exams_Input = {
  bundles_id?: InputMaybe<Update_Bundles_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Bundles_Modules_Definition_Input = {
  bundles_id?: InputMaybe<Update_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  modules_definition_id?: InputMaybe<Update_Modules_Definition_Input>;
};

export type Update_Junction_Bundles_Policies_Input = {
  bundles_id?: InputMaybe<Update_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Update_Policies_Input>;
};

export type Update_Junction_Bundles_Sc_Definitions_Input = {
  bundles_id?: InputMaybe<Update_Bundles_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sc_definitions_id?: InputMaybe<Update_Sc_Definitions_Input>;
};

export type Update_Junction_Directus_Users_Agencies_Departments_Input = {
  departments_id?: InputMaybe<Update_Departments_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Update_Junction_Directus_Users_Agencies_Input>;
};

export type Update_Junction_Directus_Users_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  bullhorn_id?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  departments?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Departments_Input>>>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  employee_number?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_student_id?: InputMaybe<Scalars['Int']['input']>;
  locations?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Locations_Input>>>;
  specialties?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Specialties_Input>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  supervisors?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Agencies_Supervisors_Input>>>;
};

export type Update_Junction_Directus_Users_Agencies_Locations_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Update_Junction_Directus_Users_Agencies_Input>;
  locations_id?: InputMaybe<Update_Locations_Input>;
};

export type Update_Junction_Directus_Users_Agencies_Specialties_Input = {
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Update_Junction_Directus_Users_Agencies_Input>;
  specialties_id?: InputMaybe<Update_Specialties_Input>;
};

export type Update_Junction_Directus_Users_Agencies_Supervisors_Input = {
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  junction_directus_users_agencies_id?: InputMaybe<Update_Junction_Directus_Users_Agencies_Input>;
};

export type Update_Junction_Directus_Users_Documents_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Update_Bundles_Input>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  documents_id?: InputMaybe<Update_Documents_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_library_assignment_id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<Scalars['Date']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Junction_Directus_Users_Exams_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  attempt_due?: InputMaybe<Scalars['Date']['input']>;
  attempts_used?: InputMaybe<Scalars['Int']['input']>;
  bundle_id?: InputMaybe<Update_Bundles_Input>;
  cert_code?: InputMaybe<Scalars['String']['input']>;
  cert_expiry_date?: InputMaybe<Scalars['Date']['input']>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  exam_versions_id?: InputMaybe<Update_Exam_Versions_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_cert_url?: InputMaybe<Scalars['String']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  question_versions_list?: InputMaybe<Scalars['JSON']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  score?: InputMaybe<Scalars['Int']['input']>;
  score_history?: InputMaybe<Scalars['JSON']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Junction_Directus_Users_Policies_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Update_Bundles_Input>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_affirmation_id?: InputMaybe<Scalars['Int']['input']>;
  policies_id?: InputMaybe<Update_Policies_Input>;
  read?: InputMaybe<Scalars['Date']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  signature_file?: InputMaybe<Update_Directus_Files_Input>;
  signed_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Junction_Documents_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  documents_id?: InputMaybe<Update_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Documents_Categories_Input = {
  categories_id?: InputMaybe<Update_Categories_Input>;
  documents_id?: InputMaybe<Update_Documents_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Exam_Versions_Questions_Input = {
  exam_versions_id?: InputMaybe<Update_Exam_Versions_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  questions_id?: InputMaybe<Update_Questions_Input>;
  sort?: InputMaybe<Scalars['Int']['input']>;
};

export type Update_Junction_Exams_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Exams_Categories_Specialties_Input = {
  categories_id?: InputMaybe<Update_Categories_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Exams_Categories_Subspecialties_Input = {
  categories_id?: InputMaybe<Update_Categories_Input>;
  exams_id?: InputMaybe<Update_Exams_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Update_Junction_Modules_Definition_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  modules_definition_id?: InputMaybe<Update_Modules_Definition_Input>;
};

export type Update_Junction_Modules_Definition_Directus_Users_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  approved?: InputMaybe<Scalars['Boolean']['input']>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  attempts?: InputMaybe<Array<InputMaybe<Update_Modules_Results_Input>>>;
  attempts_used?: InputMaybe<Scalars['Int']['input']>;
  bundle_id?: InputMaybe<Update_Bundles_Input>;
  cert_code?: InputMaybe<Scalars['String']['input']>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_cert_url?: InputMaybe<Scalars['String']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  last_attempt?: InputMaybe<Update_Modules_Results_Input>;
  module_version?: InputMaybe<Update_Modules_Versions_Input>;
  modules_definition_id?: InputMaybe<Update_Modules_Definition_Input>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  score?: InputMaybe<Scalars['Float']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Junction_Policies_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Update_Policies_Input>;
};

export type Update_Junction_Policies_Categories_Input = {
  categories_id?: InputMaybe<Update_Categories_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  policies_id?: InputMaybe<Update_Policies_Input>;
};

export type Update_Junction_Sc_Definitions_Agencies_Input = {
  agencies_id?: InputMaybe<Update_Agencies_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  sc_definitions_id?: InputMaybe<Update_Sc_Definitions_Input>;
};

export type Update_Junction_Sc_Definitions_Directus_Users_Input = {
  accept_agreements?: InputMaybe<Scalars['Boolean']['input']>;
  agency?: InputMaybe<Update_Agencies_Input>;
  assigned_on?: InputMaybe<Scalars['Date']['input']>;
  bundle_id?: InputMaybe<Update_Bundles_Input>;
  can_retake?: InputMaybe<Scalars['Boolean']['input']>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  due_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  expiration_type?: InputMaybe<Scalars['String']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_report_url?: InputMaybe<Scalars['String']['input']>;
  import_survey_subscription_id?: InputMaybe<Scalars['Int']['input']>;
  is_required?: InputMaybe<Scalars['Boolean']['input']>;
  questions?: InputMaybe<Scalars['JSON']['input']>;
  reassigned?: InputMaybe<Scalars['Boolean']['input']>;
  sc_definitions_id?: InputMaybe<Update_Sc_Definitions_Input>;
  skillchecklist_version?: InputMaybe<Update_Sc_Versions_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Locations_Input = {
  agency?: InputMaybe<Update_Agencies_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Maintenance_Windows_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  start_date_time?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Modules_Definition_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Update_Junction_Modules_Definition_Agencies_Input>>>;
  copyright?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Modules_Definition_Directus_Users_Input>>>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_ceu?: InputMaybe<Scalars['Float']['input']>;
  import_course_id?: InputMaybe<Scalars['Int']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  last_version?: InputMaybe<Update_Modules_Versions_Input>;
  modality?: InputMaybe<Update_Categories_Input>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  specialty?: InputMaybe<Update_Categories_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  sub_specialty?: InputMaybe<Update_Categories_Input>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Update_Modules_Versions_Input>>>;
};

export type Update_Modules_Results_Input = {
  answers?: InputMaybe<Scalars['JSON']['input']>;
  assignment_id?: InputMaybe<Update_Junction_Modules_Definition_Directus_Users_Input>;
  attempt?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  module_definition_id?: InputMaybe<Update_Modules_Definition_Input>;
  module_version_id?: InputMaybe<Update_Modules_Versions_Input>;
  score?: InputMaybe<Scalars['Float']['input']>;
  started_on?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Modules_Versions_Input = {
  allowed_attempts?: InputMaybe<Scalars['Int']['input']>;
  contact_hour?: InputMaybe<Scalars['Float']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  definition?: InputMaybe<Update_Modules_Definition_Input>;
  entry_point?: InputMaybe<Scalars['String']['input']>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  package?: InputMaybe<Update_Directus_Files_Input>;
  package_status?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  version_number?: InputMaybe<Scalars['Float']['input']>;
};

export type Update_Policies_Input = {
  agencies?: InputMaybe<Array<InputMaybe<Update_Junction_Policies_Agencies_Input>>>;
  categories?: InputMaybe<Array<InputMaybe<Update_Junction_Policies_Categories_Input>>>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Directus_Users_Policies_Input>>>;
  document?: InputMaybe<Update_Directus_Files_Input>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_policy_id?: InputMaybe<Scalars['Int']['input']>;
  import_policy_url?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Question_Versions_Input = {
  answer?: InputMaybe<Scalars['JSON']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<Update_Directus_Files_Input>;
  question?: InputMaybe<Scalars['JSON']['input']>;
  question_id?: InputMaybe<Update_Questions_Input>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Questions_Input = {
  category?: InputMaybe<Update_Categories_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  exam_versions?: InputMaybe<Array<InputMaybe<Update_Junction_Exam_Versions_Questions_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Update_Question_Versions_Input>>>;
};

export type Update_Sc_Definitions_Input = {
  agency?: InputMaybe<Array<InputMaybe<Update_Junction_Sc_Definitions_Agencies_Input>>>;
  category?: InputMaybe<Update_Categories_Input>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  directus_users?: InputMaybe<Array<InputMaybe<Update_Junction_Sc_Definitions_Directus_Users_Input>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  import_is_shell?: InputMaybe<Scalars['Boolean']['input']>;
  import_survey_id?: InputMaybe<Scalars['Int']['input']>;
  last_version?: InputMaybe<Update_Sc_Versions_Input>;
  original_item_definition?: InputMaybe<Update_Sc_Definitions_Input>;
  original_item_version?: InputMaybe<Update_Sc_Versions_Input>;
  reference_number?: InputMaybe<Scalars['String']['input']>;
  speciality?: InputMaybe<Update_Categories_Input>;
  status?: InputMaybe<Scalars['String']['input']>;
  sub_speciality?: InputMaybe<Update_Categories_Input>;
  title?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  versions?: InputMaybe<Array<InputMaybe<Update_Sc_Versions_Input>>>;
};

export type Update_Sc_Versions_Input = {
  agreements?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  definition?: InputMaybe<Update_Sc_Definitions_Input>;
  description?: InputMaybe<Scalars['String']['input']>;
  expiration?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  instructions?: InputMaybe<Scalars['String']['input']>;
  is_new_format?: InputMaybe<Scalars['Boolean']['input']>;
  questions?: InputMaybe<Scalars['JSON']['input']>;
  total_questions?: InputMaybe<Scalars['Int']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
  version_number?: InputMaybe<Scalars['String']['input']>;
};

export type Update_Specialties_Input = {
  date_created?: InputMaybe<Scalars['Date']['input']>;
  date_updated?: InputMaybe<Scalars['Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_created?: InputMaybe<Update_Directus_Users_Input>;
  user_updated?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_User_Logs_Input = {
  assignment_id?: InputMaybe<Scalars['String']['input']>;
  competency_id?: InputMaybe<Scalars['String']['input']>;
  competency_type?: InputMaybe<Scalars['String']['input']>;
  created_on?: InputMaybe<Scalars['Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  directus_users_id?: InputMaybe<Update_Directus_Users_Input>;
  event_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  initiator_id?: InputMaybe<Update_Directus_Users_Input>;
};

export type Update_Webhooks_Logs_Input = {
  agency?: InputMaybe<Scalars['String']['input']>;
  assignment_id?: InputMaybe<Scalars['String']['input']>;
  competency_type?: InputMaybe<Scalars['String']['input']>;
  date_created?: InputMaybe<Scalars['Date']['input']>;
  event_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  method?: InputMaybe<Scalars['String']['input']>;
  payload?: InputMaybe<Scalars['JSON']['input']>;
  retry_count?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['String']['input']>;
};

export type User_Logs = {
  __typename?: 'user_logs';
  assignment_id?: Maybe<Scalars['String']['output']>;
  competency_id?: Maybe<Scalars['String']['output']>;
  competency_type?: Maybe<Scalars['String']['output']>;
  created_on?: Maybe<Scalars['Date']['output']>;
  created_on_func?: Maybe<Datetime_Functions>;
  description?: Maybe<Scalars['String']['output']>;
  directus_users_id?: Maybe<Directus_Users>;
  event_type?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  initiator_id?: Maybe<Directus_Users>;
};


export type User_LogsDirectus_Users_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type User_LogsInitiator_IdArgs = {
  filter?: InputMaybe<Directus_Users_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type User_Logs_Aggregated = {
  __typename?: 'user_logs_aggregated';
  count?: Maybe<User_Logs_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<User_Logs_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
};

export type User_Logs_Aggregated_Count = {
  __typename?: 'user_logs_aggregated_count';
  assignment_id?: Maybe<Scalars['Int']['output']>;
  competency_id?: Maybe<Scalars['Int']['output']>;
  competency_type?: Maybe<Scalars['Int']['output']>;
  created_on?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['Int']['output']>;
  directus_users_id?: Maybe<Scalars['Int']['output']>;
  event_type?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  initiator_id?: Maybe<Scalars['Int']['output']>;
};

export type User_Logs_Filter = {
  _and?: InputMaybe<Array<InputMaybe<User_Logs_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<User_Logs_Filter>>>;
  assignment_id?: InputMaybe<String_Filter_Operators>;
  competency_id?: InputMaybe<String_Filter_Operators>;
  competency_type?: InputMaybe<String_Filter_Operators>;
  created_on?: InputMaybe<Date_Filter_Operators>;
  created_on_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  description?: InputMaybe<String_Filter_Operators>;
  directus_users_id?: InputMaybe<Directus_Users_Filter>;
  event_type?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<String_Filter_Operators>;
  initiator_id?: InputMaybe<Directus_Users_Filter>;
};

export type User_Logs_Mutated = {
  __typename?: 'user_logs_mutated';
  data?: Maybe<User_Logs>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type Users_Me_Tfa_Generate_Data = {
  __typename?: 'users_me_tfa_generate_data';
  otpauth_url?: Maybe<Scalars['String']['output']>;
  secret?: Maybe<Scalars['String']['output']>;
};

export type Webhooks_Logs = {
  __typename?: 'webhooks_logs';
  agency?: Maybe<Scalars['String']['output']>;
  assignment_id?: Maybe<Scalars['String']['output']>;
  competency_type?: Maybe<Scalars['String']['output']>;
  date_created?: Maybe<Scalars['Date']['output']>;
  date_created_func?: Maybe<Datetime_Functions>;
  event_type?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  method?: Maybe<Scalars['String']['output']>;
  payload?: Maybe<Scalars['JSON']['output']>;
  payload_func?: Maybe<Count_Functions>;
  retry_count?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['String']['output']>;
};

export type Webhooks_Logs_Aggregated = {
  __typename?: 'webhooks_logs_aggregated';
  avg?: Maybe<Webhooks_Logs_Aggregated_Fields>;
  avgDistinct?: Maybe<Webhooks_Logs_Aggregated_Fields>;
  count?: Maybe<Webhooks_Logs_Aggregated_Count>;
  countAll?: Maybe<Scalars['Int']['output']>;
  countDistinct?: Maybe<Webhooks_Logs_Aggregated_Count>;
  group?: Maybe<Scalars['JSON']['output']>;
  max?: Maybe<Webhooks_Logs_Aggregated_Fields>;
  min?: Maybe<Webhooks_Logs_Aggregated_Fields>;
  sum?: Maybe<Webhooks_Logs_Aggregated_Fields>;
  sumDistinct?: Maybe<Webhooks_Logs_Aggregated_Fields>;
};

export type Webhooks_Logs_Aggregated_Count = {
  __typename?: 'webhooks_logs_aggregated_count';
  agency?: Maybe<Scalars['Int']['output']>;
  assignment_id?: Maybe<Scalars['Int']['output']>;
  competency_type?: Maybe<Scalars['Int']['output']>;
  date_created?: Maybe<Scalars['Int']['output']>;
  event_type?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  method?: Maybe<Scalars['Int']['output']>;
  payload?: Maybe<Scalars['Int']['output']>;
  retry_count?: Maybe<Scalars['Int']['output']>;
  sort?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  user_id?: Maybe<Scalars['Int']['output']>;
};

export type Webhooks_Logs_Aggregated_Fields = {
  __typename?: 'webhooks_logs_aggregated_fields';
  id?: Maybe<Scalars['Float']['output']>;
  retry_count?: Maybe<Scalars['Float']['output']>;
  sort?: Maybe<Scalars['Float']['output']>;
};

export type Webhooks_Logs_Filter = {
  _and?: InputMaybe<Array<InputMaybe<Webhooks_Logs_Filter>>>;
  _or?: InputMaybe<Array<InputMaybe<Webhooks_Logs_Filter>>>;
  agency?: InputMaybe<String_Filter_Operators>;
  assignment_id?: InputMaybe<String_Filter_Operators>;
  competency_type?: InputMaybe<String_Filter_Operators>;
  date_created?: InputMaybe<Date_Filter_Operators>;
  date_created_func?: InputMaybe<Datetime_Function_Filter_Operators>;
  event_type?: InputMaybe<String_Filter_Operators>;
  id?: InputMaybe<Number_Filter_Operators>;
  method?: InputMaybe<String_Filter_Operators>;
  payload?: InputMaybe<String_Filter_Operators>;
  payload_func?: InputMaybe<Count_Function_Filter_Operators>;
  retry_count?: InputMaybe<Number_Filter_Operators>;
  sort?: InputMaybe<Number_Filter_Operators>;
  status?: InputMaybe<String_Filter_Operators>;
  user_id?: InputMaybe<String_Filter_Operators>;
};

export type Webhooks_Logs_Mutated = {
  __typename?: 'webhooks_logs_mutated';
  data?: Maybe<Webhooks_Logs>;
  event?: Maybe<EventEnum>;
  key: Scalars['ID']['output'];
};

export type UserFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null, phone?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, role?: { __typename?: 'directus_roles', id: string, name: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, custom_allowed_attempts_exams?: number | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, exams_id?: { __typename?: 'exams', id: string, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string } | null } | null> | null };

export type UserForAssignmentFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string } | null } | null> | null };

export type UserForReportsFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, last_access?: Date | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string, custom_allowed_attempts_exams?: number | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, documents_id?: { __typename?: 'documents', title?: string | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null } | null> | null };

export type UserForComplianceSummaryFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, status?: string | null, documents_id?: { __typename?: 'documents', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null };

export type SysUsersForComplianceSummaryQueryVariables = Exact<{
  completedAssignmentsFilter?: InputMaybe<Directus_Users_Filter>;
  incompletedAssignmentsFilter?: InputMaybe<Directus_Users_Filter>;
  noLoginFilters?: InputMaybe<Directus_Users_Filter>;
  allAttemptsUsedFilters?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersForComplianceSummaryQuery = { __typename?: 'Query', cliniciansWithCompletedAssignments: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, status?: string | null, documents_id?: { __typename?: 'documents', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null }>, cliniciansWithIncompletedAssignments: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, status?: string | null, documents_id?: { __typename?: 'documents', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null }>, assignmentsAwaitingUserLogin: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, status?: string | null, documents_id?: { __typename?: 'documents', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, status?: string | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null }>, allAttemptsUsed: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null }> };

export type SysUserForCreationQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type SysUserForCreationQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, email?: string | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null, id: string } | null } | null> | null }> };

export type SysUserQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type SysUserQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, role?: { __typename?: 'directus_roles', id: string, name: string } | null }> };

export type SysUsersTableFragmentFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null, role?: { __typename?: 'directus_roles', id: string, name: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, bullhorn_id?: string | null, status?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null };

export type SysUsersTableQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersTableQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null, role?: { __typename?: 'directus_roles', id: string, name: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, bullhorn_id?: string | null, status?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null }>, users_aggregated: Array<{ __typename?: 'directus_users_aggregated', countDistinct?: { __typename?: 'directus_users_aggregated_count', id?: number | null } | null }> };

export type SysUsersQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string } | null } | null> | null }> };

export type SysUserForAssigmentQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type SysUserForAssigmentQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string } | null } | null> | null }> };

export type UserExamsFragment = { __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, finished_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, attempt_due?: Date | null, started_on?: Date | null, score?: number | null, expires_on?: Date | null, import_subscription_id?: number | null, import_report_url?: string | null, import_cert_url?: string | null, exams_id?: { __typename?: 'exams', id: string, import_is_shell?: boolean | null, title?: string | null, expiration_date?: Date | null, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', description?: string | null, passing_score?: number | null, is_proctoring?: boolean | null } | null> | null } | null, agency?: { __typename?: 'agencies', name?: string | null, ia_enable?: boolean | null } | null };

export type SysUsersExamsQueryVariables = Exact<{
  userFilters?: InputMaybe<Directus_Users_Filter>;
  examFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type SysUsersExamsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, finished_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, attempt_due?: Date | null, started_on?: Date | null, score?: number | null, expires_on?: Date | null, import_subscription_id?: number | null, import_report_url?: string | null, import_cert_url?: string | null, exams_id?: { __typename?: 'exams', id: string, import_is_shell?: boolean | null, title?: string | null, expiration_date?: Date | null, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', description?: string | null, passing_score?: number | null, is_proctoring?: boolean | null } | null> | null } | null, agency?: { __typename?: 'agencies', name?: string | null, ia_enable?: boolean | null } | null } | null> | null }> };

export type SysUsersTotalPagesQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type SysUsersTotalPagesQuery = { __typename?: 'Query', users_aggregated: Array<{ __typename?: 'directus_users_aggregated', count?: { __typename?: 'directus_users_aggregated_count', id?: number | null } | null }> };

export type SysUsersForReportsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersForReportsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, last_access?: Date | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string, custom_allowed_attempts_exams?: number | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, documents_id?: { __typename?: 'documents', title?: string | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null } | null> | null }>, userTotal: Array<{ __typename?: 'directus_users_aggregated', countDistinct?: { __typename?: 'directus_users_aggregated_count', id?: number | null } | null }> };

export type SysUsersForReportsExportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersForReportsExportQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, last_access?: Date | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', status?: string | null, agencies_id?: { __typename?: 'agencies', id: string, custom_allowed_attempts_exams?: number | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, exams_id?: { __typename?: 'exams', title?: string | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', title?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, read?: Date | null, due_date?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, documents_id?: { __typename?: 'documents', title?: string | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, expires_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', name?: string | null } | null } | null> | null }> };

export type UserForCrudFragment = { __typename?: 'directus_users', status?: string | null, email?: string | null, first_name?: string | null, last_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null, imported?: boolean | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, status?: string | null, employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null };

export type SysUserForCrudQueryVariables = Exact<{
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUserForCrudQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', status?: string | null, email?: string | null, first_name?: string | null, last_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null, imported?: boolean | null, role?: { __typename?: 'directus_roles', id: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, status?: string | null, employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null }> };

export type SysDeleteUserMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SysDeleteUserMutation = { __typename?: 'Mutation', update_users_item?: { __typename?: 'directus_users', id: string, status?: string | null } | null };

export type SysUpdateUserMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Directus_Users_Input;
}>;


export type SysUpdateUserMutation = { __typename?: 'Mutation', update_users_item?: { __typename?: 'directus_users', id: string } | null };

export type SysCreateUserMutationVariables = Exact<{
  data: Create_Directus_Users_Input;
}>;


export type SysCreateUserMutation = { __typename?: 'Mutation', create_users_item?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null, phone?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, role?: { __typename?: 'directus_roles', id: string, name: string } | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, custom_allowed_attempts_exams?: number | null } | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string } | null } | null> | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string } | null } | null> | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', id: string, exams_id?: { __typename?: 'exams', id: string, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string } | null } | null> | null } | null };

export type CreateUserForAgencyMutationVariables = Exact<{
  data: Create_Junction_Directus_Users_Agencies_Input;
}>;


export type CreateUserForAgencyMutation = { __typename?: 'Mutation', create_junction_directus_users_agencies_item?: { __typename?: 'junction_directus_users_agencies', id: string } | null };

export type UpdateUserForAgencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Agencies_Input;
}>;


export type UpdateUserForAgencyMutation = { __typename?: 'Mutation', update_junction_directus_users_agencies_item?: { __typename?: 'junction_directus_users_agencies', id: string } | null };

export type UserForClinicianFragment = { __typename?: 'directus_users', first_name?: string | null, last_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null };

export type SysUserForClinicianQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type SysUserForClinicianQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', first_name?: string | null, last_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null }> };

export type SysUpdateForClinicianUserMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Directus_Users_Input;
}>;


export type SysUpdateForClinicianUserMutation = { __typename?: 'Mutation', update_users_item?: { __typename?: 'directus_users', id: string } | null };

export type SysUserForReportDetailsFragment = { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null };

export type SysUserDetailsQueryVariables = Exact<{
  filter?: InputMaybe<Directus_Users_Filter>;
  filter_agency?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
  filter_exams?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  filter_modules?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  filter_sc?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  filter_policies?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  filter_documents?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type SysUserDetailsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, status?: string | null, last_access?: Date | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, date_created?: Date | null, employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, exams?: Array<{ __typename?: 'junction_directus_users_exams', finished_on?: Date | null, assigned_on?: Date | null, score?: number | null, status?: string | null, attempts_used?: number | null, allowed_attempts?: number | null, started_on?: Date | null, expires_on?: Date | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null } | null, agency?: { __typename?: 'agencies', name?: string | null } | null, exam_versions_id?: { __typename?: 'exam_versions', expiration?: string | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, started_on?: Date | null, score?: number | null, attempts_used?: number | null, allowed_attempts?: number | null, expires_on?: Date | null, status?: string | null, finished_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null } | null, module_version?: { __typename?: 'modules_versions', expiration?: string | null, allowed_attempts?: number | null } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, assigned_on?: Date | null, finished_on?: Date | null, expires_on?: Date | null, status?: string | null, agency?: { __typename?: 'agencies', name?: string | null } | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', id: string, signed_on?: Date | null, expires_on?: Date | null, read?: Date | null, assigned_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, read?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null } | null } | null> | null }> };

export type GetUserDetailsAvgQueryVariables = Exact<{
  examFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  modulesFilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
}>;


export type GetUserDetailsAvgQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'junction_directus_users_exams_aggregated', avg?: { __typename?: 'junction_directus_users_exams_aggregated_fields', allowed_attempts?: number | null, attempts_used?: number | null, score?: number | null } | null }>, modules: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', avg?: { __typename?: 'junction_modules_definition_directus_users_aggregated_fields', allowed_attempts?: number | null, attempts_used?: number | null, score?: number | null } | null }> };

export type AgencyFragment = { __typename?: 'agencies', id: string, name?: string | null, custom_allowed_attempts_exams?: number | null, notifications_settings?: Object | null, automatic_notifications_email?: string | null, custom_allowed_attempts_modules?: number | null, default_due_date?: number | null, default_expiration?: string | null, max_licenses?: number | null, enable_certificate_logo?: boolean | null, sc_allow_na_option?: boolean | null, self_assigment_allow?: boolean | null, webhook_enable?: boolean | null, webhook_url?: string | null, webhook_token?: string | null, webhook_secret?: string | null, ia_enable?: boolean | null, ia_app_id?: string | null, ia_api_key?: string | null, bh_enable?: boolean | null, logo?: { __typename?: 'directus_files', id: string, filename_download: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string, filename_download: string } | null };

export type GetAllAgenciesQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Agencies_Filter>;
}>;


export type GetAllAgenciesQuery = { __typename?: 'Query', agencies: Array<{ __typename?: 'agencies', id: string, name?: string | null, custom_allowed_attempts_exams?: number | null, notifications_settings?: Object | null, automatic_notifications_email?: string | null, custom_allowed_attempts_modules?: number | null, default_due_date?: number | null, default_expiration?: string | null, max_licenses?: number | null, enable_certificate_logo?: boolean | null, sc_allow_na_option?: boolean | null, self_assigment_allow?: boolean | null, webhook_enable?: boolean | null, webhook_url?: string | null, webhook_token?: string | null, webhook_secret?: string | null, ia_enable?: boolean | null, ia_app_id?: string | null, ia_api_key?: string | null, bh_enable?: boolean | null, logo?: { __typename?: 'directus_files', id: string, filename_download: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string, filename_download: string } | null }> };

export type AgencyForAdminFragment = { __typename?: 'agencies', id: string, name?: string | null, import_portal_id?: number | null, live_since?: Date | null };

export type GetAllAgenciesForAdminQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Agencies_Filter>;
}>;


export type GetAllAgenciesForAdminQuery = { __typename?: 'Query', agencies: Array<{ __typename?: 'agencies', id: string, name?: string | null, import_portal_id?: number | null, live_since?: Date | null }>, agencies_aggregated: Array<{ __typename?: 'agencies_aggregated', count?: { __typename?: 'agencies_aggregated_count', id?: number | null } | null }> };

export type AgencyQueryVariables = Exact<{ [key: string]: never; }>;


export type AgencyQuery = { __typename?: 'Query', agencies: Array<{ __typename?: 'agencies', id: string, name?: string | null, custom_allowed_attempts_exams?: number | null }> };

export type GetAllAgenciesForBillingQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAllAgenciesForBillingQuery = { __typename?: 'Query', agencies: Array<{ __typename?: 'agencies', id: string, name?: string | null }> };

export type GetAgencyByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetAgencyByIdQuery = { __typename?: 'Query', agencies_by_id?: { __typename?: 'agencies', id: string, name?: string | null, custom_allowed_attempts_exams?: number | null } | null };

export type GetLicensesQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetLicensesQuery = { __typename?: 'Query', agencies_by_id?: { __typename?: 'agencies', id: string, directus_users?: Array<{ __typename?: 'junction_directus_users_agencies', id: string } | null> | null } | null };

export type CreateAgencyMutationVariables = Exact<{
  data: Create_Agencies_Input;
}>;


export type CreateAgencyMutation = { __typename?: 'Mutation', create_agencies_item?: { __typename?: 'agencies', id: string } | null };

export type UpdateAgencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Agencies_Input;
}>;


export type UpdateAgencyMutation = { __typename?: 'Mutation', update_agencies_item?: { __typename?: 'agencies', id: string } | null };

export type DeleteAgencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteAgencyMutation = { __typename?: 'Mutation', update_agencies_item?: { __typename?: 'agencies', id: string } | null };

export type DeleteCategoryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCategoryMutation = { __typename?: 'Mutation', update_categories_item?: { __typename?: 'categories', id: string } | null };

export type CompetenciesExamFragment = { __typename?: 'junction_directus_users_exams', expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, due_date?: Date | null, status?: string | null, finished_on?: Date | null, cert_expiry_date?: Date | null, cert_code?: string | null, started_on?: Date | null, id: string, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, score_history?: Object | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', contact_hour?: string | null } | null> | null } | null, exam_versions_id?: { __typename?: 'exam_versions', id: string, title?: string | null, contact_hour?: string | null, expiration?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type CompetenciesModuleFragment = { __typename?: 'junction_modules_definition_directus_users', id: string, assigned_on?: Date | null, finished_on?: Date | null, expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, status?: string | null, approved?: boolean | null, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, last_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null } | null, module_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type UserCompetenciesQueryVariables = Exact<{
  user: Scalars['String']['input'];
  agencies: Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type UserCompetenciesQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'junction_directus_users_exams', expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, due_date?: Date | null, status?: string | null, finished_on?: Date | null, cert_expiry_date?: Date | null, cert_code?: string | null, started_on?: Date | null, id: string, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, score_history?: Object | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', contact_hour?: string | null } | null> | null } | null, exam_versions_id?: { __typename?: 'exam_versions', id: string, title?: string | null, contact_hour?: string | null, expiration?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, policies: Array<{ __typename?: 'junction_directus_users_policies', id: string, assigned_on?: Date | null, expires_on?: Date | null, read?: Date | null, signed_on?: Date | null, due_date?: Date | null, status?: string | null, reassigned?: boolean | null, expiration_type?: string | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, documents: Array<{ __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, expires_on?: Date | null, read?: Date | null, due_date?: Date | null, status?: string | null, reassigned?: boolean | null, expiration_type?: string | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, modules: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, assigned_on?: Date | null, finished_on?: Date | null, expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, status?: string | null, approved?: boolean | null, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, last_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null } | null, module_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, skills_checklists: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, status?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, sc_definitions_id?: { __typename?: 'sc_definitions', import_is_shell?: boolean | null, id: string, title?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }> };

export type UserCompetenciesHshAdminViewQueryVariables = Exact<{
  user: Scalars['String']['input'];
  agencies: Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type UserCompetenciesHshAdminViewQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'junction_directus_users_exams', expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, due_date?: Date | null, status?: string | null, finished_on?: Date | null, cert_expiry_date?: Date | null, cert_code?: string | null, started_on?: Date | null, id: string, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, score_history?: Object | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', contact_hour?: string | null } | null> | null } | null, exam_versions_id?: { __typename?: 'exam_versions', id: string, title?: string | null, contact_hour?: string | null, expiration?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, policies: Array<{ __typename?: 'junction_directus_users_policies', id: string, assigned_on?: Date | null, expires_on?: Date | null, read?: Date | null, signed_on?: Date | null, due_date?: Date | null, status?: string | null, reassigned?: boolean | null, expiration_type?: string | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, documents: Array<{ __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, expires_on?: Date | null, read?: Date | null, due_date?: Date | null, status?: string | null, reassigned?: boolean | null, expiration_type?: string | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, modules: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, assigned_on?: Date | null, finished_on?: Date | null, expires_on?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, due_date?: Date | null, status?: string | null, approved?: boolean | null, score?: number | null, import_cert_url?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, import_is_shell?: boolean | null, import_ceu?: number | null, last_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null } | null, module_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, skills_checklists: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, status?: string | null, import_report_url?: string | null, reassigned?: boolean | null, expiration_type?: string | null, sc_definitions_id?: { __typename?: 'sc_definitions', import_is_shell?: boolean | null, id: string, title?: string | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }> };

export type ExamFragment = { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', id: string, allowed_attempts?: number | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null };

export type ExamAssignmentFragment = { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null };

export type AllExamsForListFragment = { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null };

export type GetAllExamsForAssignCompetencyQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Exams_Filter>;
}>;


export type GetAllExamsForAssignCompetencyQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null }> };

export type GetAllExamsForReportsFilterQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<Exams_Filter>;
}>;


export type GetAllExamsForReportsFilterQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'exams', id: string, title?: string | null }> };

export type GetAllExamsForUserFilterQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetAllExamsForUserFilterQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', exams_id?: { __typename?: 'exams', id: string, title?: string | null } | null }> };

export type GetAllExamsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Exams_Filter>;
}>;


export type GetAllExamsQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null }>, exams_aggregated: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }> };

export type GetExamForCrudQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetExamForCrudQuery = { __typename?: 'Query', exams_by_id?: { __typename?: 'exams', id: string, status?: string | null, expiration_date?: Date | null, modality?: { __typename?: 'categories', id: string } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, expiration?: string | null, passing_score?: number | null, allowed_attempts?: number | null, questions_to_give?: number | null, introduction?: string | null, description?: string | null, passing_message?: string | null, fail_message?: string | null, shuffle_questions?: boolean | null, is_proctoring?: boolean | null, contact_hour?: string | null, outline?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string } | null, questions?: Array<{ __typename?: 'junction_exam_versions_questions', questions_id?: { __typename?: 'questions', id: string } | null } | null> | null } | null> | null } | null };

export type CreateExamMutationVariables = Exact<{
  data: Create_Exams_Input;
}>;


export type CreateExamMutation = { __typename?: 'Mutation', create_exams_item?: { __typename?: 'exams', id: string } | null };

export type UpdateExamMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Exams_Input;
}>;


export type UpdateExamMutation = { __typename?: 'Mutation', update_exams_item?: { __typename?: 'exams', id: string } | null };

export type CreateExamVersionMutationVariables = Exact<{
  data: Create_Exam_Versions_Input;
}>;


export type CreateExamVersionMutation = { __typename?: 'Mutation', create_exam_versions_item?: { __typename?: 'exam_versions', id: string } | null };

export type UpdateExamVersionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Exam_Versions_Input;
}>;


export type UpdateExamVersionMutation = { __typename?: 'Mutation', update_exam_versions_item?: { __typename?: 'exam_versions', id: string } | null };

export type UserExamReportsFragment = { __typename?: 'junction_directus_users_exams', id: string, status?: string | null, score?: number | null, finished_on?: Date | null, started_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, import_report_url?: string | null, import_cert_url?: string | null, expiration_type?: string | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_ceu?: number | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null } | null, exam_versions_id?: { __typename?: 'exam_versions', expiration?: string | null, contact_hour?: string | null } | null, agency?: { __typename?: 'agencies', date_created?: Date | null, name?: string | null } | null };

export type UserExamQuestionsFragment = { __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, started_on?: Date | null, finished_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, question_versions_list?: Object | null, attempt_due?: Date | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_is_shell?: boolean | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', questions_to_give?: number | null, shuffle_questions?: boolean | null, id: string, title?: string | null, description?: string | null, passing_score?: number | null, is_proctoring?: boolean | null, questions?: Array<{ __typename?: 'junction_exam_versions_questions', id: string } | null> | null, outline?: { __typename?: 'directus_files', id: string } | null } | null> | null } | null };

export type UserExamQuestionsDetailsFragment = { __typename?: 'junction_directus_users_exams', id: string, attempt_due?: Date | null, started_on?: Date | null, question_versions_list?: Object | null, exams_id?: { __typename?: 'exams', id: string, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', title?: string | null } | null> | null } | null };

export type GetUserExamQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetUserExamQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, assigned_on?: Date | null, started_on?: Date | null, finished_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, question_versions_list?: Object | null, attempt_due?: Date | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_is_shell?: boolean | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', questions_to_give?: number | null, shuffle_questions?: boolean | null, id: string, title?: string | null, description?: string | null, passing_score?: number | null, is_proctoring?: boolean | null, questions?: Array<{ __typename?: 'junction_exam_versions_questions', id: string } | null> | null, outline?: { __typename?: 'directus_files', id: string } | null } | null> | null } | null }> };

export type GetUserExamDetailsQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetUserExamDetailsQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, attempt_due?: Date | null, started_on?: Date | null, question_versions_list?: Object | null, exams_id?: { __typename?: 'exams', id: string, modality?: { __typename?: 'categories', title?: string | null } | null, exam_versions?: Array<{ __typename?: 'exam_versions', title?: string | null } | null> | null } | null }> };

export type GetAllUserExamQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetAllUserExamQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, score?: number | null, finished_on?: Date | null, started_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, allowed_attempts?: number | null, attempts_used?: number | null, import_report_url?: string | null, import_cert_url?: string | null, expiration_type?: string | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, import_ceu?: number | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null } | null> | null } | null, exam_versions_id?: { __typename?: 'exam_versions', expiration?: string | null, contact_hour?: string | null } | null, agency?: { __typename?: 'agencies', date_created?: Date | null, name?: string | null } | null }>, junction_directus_users_exams_aggregated: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }> };

export type OverviewExamsFragment = { __typename?: 'exams', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', allowed_attempts?: number | null, attempts_used?: number | null, score?: number | null, due_date?: Date | null, finished_on?: Date | null, started_on?: Date | null, status?: string | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', allowed_attempts?: number | null, passing_score?: number | null } | null> | null };

export type OverviewModulesFragment = { __typename?: 'modules_definition', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_modules_definition_directus_users', score?: number | null, due_date?: Date | null, finished_on?: Date | null, started_on?: Date | null, approved?: boolean | null, status?: string | null, attempts_used?: number | null, allowed_attempts?: number | null } | null> | null };

export type OverviewDocumentsFragment = { __typename?: 'documents', id: string, title?: string | null, document?: { __typename?: 'directus_files', id: string } | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_documents', expires_on?: Date | null, read?: Date | null } | null> | null };

export type OverviewPoliciesFragment = { __typename?: 'policies', id: string, name?: string | null, document?: { __typename?: 'directus_files', id: string } | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_policies', expires_on?: Date | null, signed_on?: Date | null, read?: Date | null } | null> | null };

export type OverviewSkillsChecklistsFragment = { __typename?: 'sc_definitions', id: string, title?: string | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_sc_definitions_directus_users', expires_on?: Date | null, due_date?: Date | null, finished_on?: Date | null, status?: string | null } | null> | null };

export type GetOverviewExamsReportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Exams_Filter>;
}>;


export type GetOverviewExamsReportQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'exams', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', allowed_attempts?: number | null, attempts_used?: number | null, score?: number | null, due_date?: Date | null, finished_on?: Date | null, started_on?: Date | null, status?: string | null, agency?: { __typename?: 'agencies', id: string } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', allowed_attempts?: number | null, passing_score?: number | null } | null> | null }>, exams_aggregated: Array<{ __typename?: 'exams_aggregated', countDistinct?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }> };

export type GetOverviewModulesReportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Modules_Definition_Filter>;
}>;


export type GetOverviewModulesReportQuery = { __typename?: 'Query', modules_definition: Array<{ __typename?: 'modules_definition', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_modules_definition_directus_users', score?: number | null, due_date?: Date | null, finished_on?: Date | null, started_on?: Date | null, approved?: boolean | null, status?: string | null, attempts_used?: number | null, allowed_attempts?: number | null } | null> | null }>, modules_definition_aggregated: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }> };

export type GetOverviewDocumentsReportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Documents_Filter>;
}>;


export type GetOverviewDocumentsReportQuery = { __typename?: 'Query', documents: Array<{ __typename?: 'documents', id: string, title?: string | null, document?: { __typename?: 'directus_files', id: string } | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_documents', expires_on?: Date | null, read?: Date | null } | null> | null }>, documents_aggregated: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }> };

export type GetOverviewPoliciesReportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Policies_Filter>;
}>;


export type GetOverviewPoliciesReportQuery = { __typename?: 'Query', policies: Array<{ __typename?: 'policies', id: string, name?: string | null, document?: { __typename?: 'directus_files', id: string } | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_directus_users_policies', expires_on?: Date | null, signed_on?: Date | null, read?: Date | null } | null> | null }>, policies_aggregated: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }> };

export type GetOverviewSkillsChecklistsReportQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Sc_Definitions_Filter>;
}>;


export type GetOverviewSkillsChecklistsReportQuery = { __typename?: 'Query', sc_definitions: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, directus_users?: Array<{ __typename?: 'junction_sc_definitions_directus_users', expires_on?: Date | null, due_date?: Date | null, finished_on?: Date | null, status?: string | null } | null> | null }>, sc_definitions_aggregated: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }> };

export type GetUserExamsAnalyticsOverviewReportsQueryVariables = Exact<{
  notStartedfilters?: InputMaybe<Exams_Filter>;
  passedFilters?: InputMaybe<Exams_Filter>;
  failedFilters?: InputMaybe<Exams_Filter>;
  inProgressFilters?: InputMaybe<Exams_Filter>;
  inReviewFilters?: InputMaybe<Exams_Filter>;
  invalidFilters?: InputMaybe<Exams_Filter>;
  expiredFilters?: InputMaybe<Exams_Filter>;
  totalFilters?: InputMaybe<Exams_Filter>;
  scoreFilters?: InputMaybe<Exams_Filter>;
}>;


export type GetUserExamsAnalyticsOverviewReportsQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, passed: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, failed: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, inProgress: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, inReview: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, invalid: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'exams_aggregated', count?: { __typename?: 'exams_aggregated_count', id?: number | null } | null }>, scores: Array<{ __typename?: 'exams', directus_users?: Array<{ __typename?: 'junction_directus_users_exams', score?: number | null } | null> | null }> };

export type GetModulesAnalyticsOverviewReportsQueryVariables = Exact<{
  notStartedfilters?: InputMaybe<Modules_Definition_Filter>;
  passedFilters?: InputMaybe<Modules_Definition_Filter>;
  failedFilters?: InputMaybe<Modules_Definition_Filter>;
  inProgressFilters?: InputMaybe<Modules_Definition_Filter>;
  expiredFilters?: InputMaybe<Modules_Definition_Filter>;
  totalFilters?: InputMaybe<Modules_Definition_Filter>;
  scoreFilters?: InputMaybe<Modules_Definition_Filter>;
}>;


export type GetModulesAnalyticsOverviewReportsQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, passed: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, failed: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, inProgress: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, scores: Array<{ __typename?: 'modules_definition', directus_users?: Array<{ __typename?: 'junction_modules_definition_directus_users', score?: number | null } | null> | null }> };

export type GetDocumentsAnalyticsOverviewReportsQueryVariables = Exact<{
  unreadFilter?: InputMaybe<Documents_Filter>;
  readfilter?: InputMaybe<Documents_Filter>;
  expiredFilter?: InputMaybe<Documents_Filter>;
  totalFilter?: InputMaybe<Documents_Filter>;
}>;


export type GetDocumentsAnalyticsOverviewReportsQuery = { __typename?: 'Query', unread: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }>, read: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }> };

export type GetPoliciesAnalyticsOverviewReportsQueryVariables = Exact<{
  readFilters?: InputMaybe<Policies_Filter>;
  unreadFilters?: InputMaybe<Policies_Filter>;
  signedFilters?: InputMaybe<Policies_Filter>;
  expiredFilters?: InputMaybe<Policies_Filter>;
  totalFilter?: InputMaybe<Policies_Filter>;
}>;


export type GetPoliciesAnalyticsOverviewReportsQuery = { __typename?: 'Query', read: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }>, unread: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }>, signed: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }> };

export type GetAllSkillCheckAnalyticsOverviewReportsQueryVariables = Exact<{
  notStarted?: InputMaybe<Sc_Definitions_Filter>;
  inProgressFilter?: InputMaybe<Sc_Definitions_Filter>;
  completed?: InputMaybe<Sc_Definitions_Filter>;
  expiredFilter?: InputMaybe<Sc_Definitions_Filter>;
  totalFilter?: InputMaybe<Sc_Definitions_Filter>;
}>;


export type GetAllSkillCheckAnalyticsOverviewReportsQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }>, inProgress: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }>, completed: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }> };

export type GetUsersOnOverviewReportQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Directus_Users_Agencies_Filter>;
}>;


export type GetUsersOnOverviewReportQuery = { __typename?: 'Query', junction_directus_users_agencies: Array<{ __typename?: 'junction_directus_users_agencies', directus_users_id?: { __typename?: 'directus_users', id: string } | null }> };

export type GetUserExamAttemptQueryVariables = Exact<{
  user: Scalars['String']['input'];
  assignment_id: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetUserExamAttemptQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, status?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, assigned_on?: Date | null, started_on?: Date | null, score_history?: Object | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, modality?: { __typename?: 'categories', title?: string | null } | null } | null, exam_versions_id?: { __typename?: 'exam_versions', passing_score?: number | null, fail_message?: string | null, passing_message?: string | null, description?: string | null, contact_hour?: string | null, outline?: { __typename?: 'directus_files', id: string } | null } | null }> };

export type GetUserExamAttemptForResultQueryVariables = Exact<{
  user: Scalars['String']['input'];
  assignment_id: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetUserExamAttemptForResultQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, attempts_used?: number | null, status?: string | null, allowed_attempts?: number | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null, modality?: { __typename?: 'categories', title?: string | null } | null } | null, exam_versions_id?: { __typename?: 'exam_versions', passing_score?: number | null, passing_message?: string | null, fail_message?: string | null, outline?: { __typename?: 'directus_files', id: string } | null } | null }> };

export type GetUserExamsResultsByAttemptQueryVariables = Exact<{
  assignment_id: Scalars['GraphQLStringOrFloat']['input'];
  exam_id: Scalars['String']['input'];
  attempt: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetUserExamsResultsByAttemptQuery = { __typename?: 'Query', exam_results: Array<{ __typename?: 'exam_results', correct: boolean }> };

export type GetUserExamsResultsDetailByAttemptQueryVariables = Exact<{
  exam_id: Scalars['String']['input'];
  assignment_id: Scalars['GraphQLStringOrFloat']['input'];
  attempt: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetUserExamsResultsDetailByAttemptQuery = { __typename?: 'Query', exam_results: Array<{ __typename?: 'exam_results', date_created?: Date | null, correct: boolean, time_taken: number, answer: Object, question_versions_id?: { __typename?: 'question_versions', question: Object, image?: { __typename?: 'directus_files', id: string } | null } | null, questions_id?: { __typename?: 'questions', category?: { __typename?: 'categories', title?: string | null } | null } | null, assignment_id?: { __typename?: 'junction_directus_users_exams', agency?: { __typename?: 'agencies', name?: string | null } | null } | null }> };

export type GetUserExamCerificateDetailsQueryVariables = Exact<{
  user: Scalars['String']['input'];
  assignment_id: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetUserExamCerificateDetailsQuery = { __typename?: 'Query', junction_directus_users_exams: Array<{ __typename?: 'junction_directus_users_exams', cert_code?: string | null, cert_expiry_date?: Date | null, expires_on?: Date | null, score?: number | null, finished_on?: Date | null, status?: string | null, agency?: { __typename?: 'agencies', name?: string | null, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null, exams_id?: { __typename?: 'exams', title?: string | null, modality?: { __typename?: 'categories', title?: string | null } | null } | null, exam_versions_id?: { __typename?: 'exam_versions', passing_score?: number | null, contact_hour?: string | null } | null }> };

export type GetUserExamsAverageAttemptsQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetUserExamsAverageAttemptsQuery = { __typename?: 'Query', junction_directus_users_exams_aggregated: Array<{ __typename?: 'junction_directus_users_exams_aggregated', avg?: { __typename?: 'junction_directus_users_exams_aggregated_fields', attempts_used?: number | null, allowed_attempts?: number | null, score?: number | null } | null }> };

export type GetUserExamsByStatusReportsQueryVariables = Exact<{
  notStartedfilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  passedFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  failedFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  inProgressFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  inReviewFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  invalidFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  expiredFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  totalFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
}>;


export type GetUserExamsByStatusReportsQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, passed: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, failed: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, inProgress: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, inReview: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, invalid: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, expired: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }>, total: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', status?: number | null } | null }> };

export type SysUsersWithExamsQueryVariables = Exact<{
  filter?: InputMaybe<Directus_Users_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type SysUsersWithExamsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null }> };

export type AllQuestionsForListFragment = { __typename?: 'questions', id: string, type?: string | null, title?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, versions?: Array<{ __typename?: 'question_versions', id: string, question: Object, answer?: Object | null, image?: { __typename?: 'directus_files', id: string } | null } | null> | null };

export type GetAllQuestionsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Questions_Filter>;
}>;


export type GetAllQuestionsQuery = { __typename?: 'Query', questions: Array<{ __typename?: 'questions', id: string, type?: string | null, title?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, versions?: Array<{ __typename?: 'question_versions', id: string, question: Object, answer?: Object | null, image?: { __typename?: 'directus_files', id: string } | null } | null> | null }>, questions_aggregated: Array<{ __typename?: 'questions_aggregated', count?: { __typename?: 'questions_aggregated_count', id?: number | null } | null }> };

export type CreateQuestionMutationVariables = Exact<{
  data: Create_Questions_Input;
}>;


export type CreateQuestionMutation = { __typename?: 'Mutation', create_questions_item?: { __typename?: 'questions', id: string } | null };

export type UpdateQuestionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Questions_Input;
}>;


export type UpdateQuestionMutation = { __typename?: 'Mutation', update_questions_item?: { __typename?: 'questions', id: string } | null };

export type UpdateQuestionsMutationVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>;
  data: Update_Questions_Input;
}>;


export type UpdateQuestionsMutation = { __typename?: 'Mutation', update_questions_items: Array<{ __typename?: 'questions', id: string }> };

export type CreateQuestionVersionMutationVariables = Exact<{
  data: Create_Question_Versions_Input;
}>;


export type CreateQuestionVersionMutation = { __typename?: 'Mutation', create_question_versions_item?: { __typename?: 'question_versions', id: string } | null };

export type GetQuestionVersionQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type GetQuestionVersionQuery = { __typename?: 'Query', question_versions: Array<{ __typename?: 'question_versions', id: string, question: Object, question_id?: { __typename?: 'questions', id: string, type?: string | null } | null }> };

export type SaveAnswerMutationVariables = Exact<{
  data: Create_Exam_Results_Input;
}>;


export type SaveAnswerMutation = { __typename?: 'Mutation', create_exam_results_item?: { __typename?: 'exam_results', id: string } | null };

export type CategoryFragment = { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type GetAllCategoriesQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Categories_Filter>;
}>;


export type GetAllCategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, categories_aggregated: Array<{ __typename?: 'categories_aggregated', count?: { __typename?: 'categories_aggregated_count', id?: number | null } | null }> };

export type CreateCategoryMutationVariables = Exact<{
  data: Create_Categories_Input;
}>;


export type CreateCategoryMutation = { __typename?: 'Mutation', create_categories_item?: { __typename?: 'categories', id: string } | null };

export type UpdateCategoriesMutationVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>;
  data: Update_Categories_Input;
}>;


export type UpdateCategoriesMutation = { __typename?: 'Mutation', update_categories_items: Array<{ __typename?: 'categories', id: string }> };

export type UpdateCategoryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Categories_Input;
}>;


export type UpdateCategoryMutation = { __typename?: 'Mutation', update_categories_item?: { __typename?: 'categories', id: string } | null };

export type PoliciesFragment = { __typename?: 'policies', id: string, status?: string | null, name?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', id: string, categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string } | null };

export type PoliciesAssignmentsFragment = { __typename?: 'junction_directus_users_policies', id: string, read?: Date | null, signed_on?: Date | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, status?: string | null, expiration_type?: string | null, agency?: { __typename?: 'agencies', name?: string | null } | null, signature_file?: { __typename?: 'directus_files', id: string } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null, import_policy_id?: number | null, import_policy_url?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filesize?: number | null, storage: string, filename_download: string } | null } | null };

export type PoliciesForListingFragment = { __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null };

export type PoliciesForReportFragment = { __typename?: 'junction_directus_users_policies', id: string, read?: Date | null, signed_on?: Date | null, assigned_on?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null } | null };

export type GetAllPoliciesQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Policies_Filter>;
}>;


export type GetAllPoliciesQuery = { __typename?: 'Query', policies: Array<{ __typename?: 'policies', id: string, status?: string | null, name?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', id: string, categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string } | null }> };

export type GetAllPoliciesTotalItemsQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Policies_Filter>;
}>;


export type GetAllPoliciesTotalItemsQuery = { __typename?: 'Query', policies_aggregated: Array<{ __typename?: 'policies_aggregated', count?: { __typename?: 'policies_aggregated_count', id?: number | null } | null }> };

export type GetAllPoliciesForAssignmentQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Policies_Filter>;
}>;


export type GetAllPoliciesForAssignmentQuery = { __typename?: 'Query', policies: Array<{ __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null }> };

export type GetAllPoliciesAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
}>;


export type GetAllPoliciesAssignmentsQuery = { __typename?: 'Query', junction_directus_users_policies: Array<{ __typename?: 'junction_directus_users_policies', id: string, read?: Date | null, signed_on?: Date | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, status?: string | null, expiration_type?: string | null, agency?: { __typename?: 'agencies', name?: string | null } | null, signature_file?: { __typename?: 'directus_files', id: string } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null, import_policy_id?: number | null, import_policy_url?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filesize?: number | null, storage: string, filename_download: string } | null } | null }>, junction_directus_users_policies_aggregated: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }> };

export type GetAllPoliciesOnReportQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Policies_Filter>;
}>;


export type GetAllPoliciesOnReportQuery = { __typename?: 'Query', policies: Array<{ __typename?: 'policies', id: string, name?: string | null }> };

export type GetAllPoliciesForUserFilterQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
}>;


export type GetAllPoliciesForUserFilterQuery = { __typename?: 'Query', junction_directus_users_policies: Array<{ __typename?: 'junction_directus_users_policies', policies_id?: { __typename?: 'policies', id: string, name?: string | null } | null }> };

export type SysUsersWithPoliciesQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersWithPoliciesQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null }> };

export type GetPolicyDetailQueryVariables = Exact<{
  policyId: Scalars['ID']['input'];
}>;


export type GetPolicyDetailQuery = { __typename?: 'Query', policies_by_id?: { __typename?: 'policies', id: string, status?: string | null, name?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', id: string, categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string } | null } | null };

export type GetPolicyAssignmentQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetPolicyAssignmentQuery = { __typename?: 'Query', junction_directus_users_policies_by_id?: { __typename?: 'junction_directus_users_policies', id: string, read?: Date | null, signed_on?: Date | null, assigned_on?: Date | null, expires_on?: Date | null, due_date?: Date | null, status?: string | null, expiration_type?: string | null, agency?: { __typename?: 'agencies', name?: string | null } | null, signature_file?: { __typename?: 'directus_files', id: string } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null, import_policy_id?: number | null, import_policy_url?: string | null, categories?: Array<{ __typename?: 'junction_policies_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filesize?: number | null, storage: string, filename_download: string } | null } | null } | null };

export type GetPoliciesCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPoliciesCategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null }> };

export type GetPoliciesByStatusReportsQueryVariables = Exact<{
  unreadFilters?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  readAndUnsignedFilters?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  readAndSignedFilters?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  expiredFilters?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  totalFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
}>;


export type GetPoliciesByStatusReportsQuery = { __typename?: 'Query', unread: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, readAndUnsigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, readAndSigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }> };

export type GetAllPoliciesForReportQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
}>;


export type GetAllPoliciesForReportQuery = { __typename?: 'Query', junction_directus_users_policies: Array<{ __typename?: 'junction_directus_users_policies', id: string, read?: Date | null, signed_on?: Date | null, assigned_on?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null } | null }>, junction_directus_users_policies_aggregated: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }> };

export type CreatePolicyMutationVariables = Exact<{
  data: Create_Policies_Input;
}>;


export type CreatePolicyMutation = { __typename?: 'Mutation', create_policies_item?: { __typename?: 'policies', id: string } | null };

export type UpdatePoliciesMutationVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>;
  data: Update_Policies_Input;
}>;


export type UpdatePoliciesMutation = { __typename?: 'Mutation', update_policies_items: Array<{ __typename?: 'policies', id: string }> };

export type UpdatePolicyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Policies_Input;
}>;


export type UpdatePolicyMutation = { __typename?: 'Mutation', update_policies_item?: { __typename?: 'policies', id: string } | null };

export type DeletePolicyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeletePolicyMutation = { __typename?: 'Mutation', update_policies_item?: { __typename?: 'policies', id: string } | null };

export type DeletePolicyAgenciesMutationVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>;
}>;


export type DeletePolicyAgenciesMutation = { __typename?: 'Mutation', delete_junction_policies_agencies_items?: { __typename?: 'delete_many', ids: Array<string | null> } | null };

export type UpdatePoliciesAssignmentMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Policies_Input;
}>;


export type UpdatePoliciesAssignmentMutation = { __typename?: 'Mutation', update_junction_directus_users_policies_item?: { __typename?: 'junction_directus_users_policies', id: string } | null };

export type UpdateExamCompetencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Exams_Input;
}>;


export type UpdateExamCompetencyMutation = { __typename?: 'Mutation', update_junction_directus_users_exams_item?: { __typename?: 'junction_directus_users_exams', id: string } | null };

export type UpdatePolicyCompetencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Policies_Input;
}>;


export type UpdatePolicyCompetencyMutation = { __typename?: 'Mutation', update_junction_directus_users_policies_item?: { __typename?: 'junction_directus_users_policies', id: string } | null };

export type UpdateDocumentCompetencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Documents_Input;
}>;


export type UpdateDocumentCompetencyMutation = { __typename?: 'Mutation', update_junction_directus_users_documents_item?: { __typename?: 'junction_directus_users_documents', id: string } | null };

export type UpdateModuleCompetencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Modules_Definition_Directus_Users_Input;
}>;


export type UpdateModuleCompetencyMutation = { __typename?: 'Mutation', update_junction_modules_definition_directus_users_item?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null };

export type UpdateSkillChecklistCompetencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Sc_Definitions_Directus_Users_Input;
}>;


export type UpdateSkillChecklistCompetencyMutation = { __typename?: 'Mutation', update_junction_sc_definitions_directus_users_item?: { __typename?: 'junction_sc_definitions_directus_users', id: string } | null };

export type SkillChecklistFragment = { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null };

export type GetCategoriesForScQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetCategoriesForScQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null }> };

export type SysUsersWithSkillChecklistsQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersWithSkillChecklistsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null }> };

export type GetAllSkillChecklistsOnReportQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Sc_Definitions_Filter>;
}>;


export type GetAllSkillChecklistsOnReportQuery = { __typename?: 'Query', sc_definitions: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null }> };

export type GetAllSkillChecklistsForUserFilterQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
}>;


export type GetAllSkillChecklistsForUserFilterQuery = { __typename?: 'Query', junction_sc_definitions_directus_users: Array<{ __typename?: 'junction_sc_definitions_directus_users', sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null } | null }> };

export type GetAllSkillChecklistsTotalsReportsQueryVariables = Exact<{
  notStartedFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  completedFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  expiredFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  totalFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
}>;


export type GetAllSkillChecklistsTotalsReportsQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, completed: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }> };

export type GetAllAssignedSkillChecklistOnReportQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
}>;


export type GetAllAssignedSkillChecklistOnReportQuery = { __typename?: 'Query', junction_sc_definitions_directus_users: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expiration_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, expiration_type?: string | null, import_report_url?: string | null, import_survey_subscription_id?: number | null, questions?: Object | null, accept_agreements?: boolean | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, import_is_shell?: boolean | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', total_questions?: number | null, agreements?: string | null, instructions?: string | null, questions?: Object | null, id: string, version_number?: string | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null } | null, skillchecklist_version?: { __typename?: 'sc_versions', id: string, version_number?: string | null, questions?: Object | null, total_questions?: number | null, agreements?: string | null, instructions?: string | null, description?: string | null, is_new_format?: boolean | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, junction_sc_definitions_directus_users_aggregated: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }> };

export type GetSkillChecklistsAssignmentsQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
}>;


export type GetSkillChecklistsAssignmentsQuery = { __typename?: 'Query', junction_sc_definitions_directus_users: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expiration_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, expiration_type?: string | null, import_report_url?: string | null, import_survey_subscription_id?: number | null, questions?: Object | null, accept_agreements?: boolean | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, import_is_shell?: boolean | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', total_questions?: number | null, agreements?: string | null, instructions?: string | null, questions?: Object | null, id: string, version_number?: string | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null } | null, skillchecklist_version?: { __typename?: 'sc_versions', id: string, version_number?: string | null, questions?: Object | null, total_questions?: number | null, agreements?: string | null, instructions?: string | null, description?: string | null, is_new_format?: boolean | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }> };

export type GetTableSkillsChecklistsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Sc_Definitions_Filter>;
}>;


export type GetTableSkillsChecklistsQuery = { __typename?: 'Query', sc_definitions: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }> };

export type GetTableSkillsChecklistsTotalPagesQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Sc_Definitions_Filter>;
}>;


export type GetTableSkillsChecklistsTotalPagesQuery = { __typename?: 'Query', sc_definitions_aggregated: Array<{ __typename?: 'sc_definitions_aggregated', count?: { __typename?: 'sc_definitions_aggregated_count', id?: number | null } | null }> };

export type GetSkillChecklistDetailQueryVariables = Exact<{
  checklistId: Scalars['ID']['input'];
}>;


export type GetSkillChecklistDetailQuery = { __typename?: 'Query', sc_definitions_by_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null };

export type GetSkillChecklistsDetailsQueryVariables = Exact<{
  filter?: InputMaybe<Sc_Definitions_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetSkillChecklistsDetailsQuery = { __typename?: 'Query', sc_definitions: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }> };

export type GetSkillsChecklistsCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSkillsChecklistsCategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null }> };

export type StartSkillChecklistMutationVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
  versionId: Scalars['ID']['input'];
  questions?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type StartSkillChecklistMutation = { __typename?: 'Mutation', update_junction_sc_definitions_directus_users_item?: { __typename?: 'junction_sc_definitions_directus_users', id: string } | null };

export type UpdateSkillChecklistAssignmentMutationVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
  data: Update_Junction_Sc_Definitions_Directus_Users_Input;
}>;


export type UpdateSkillChecklistAssignmentMutation = { __typename?: 'Mutation', update_junction_sc_definitions_directus_users_item?: { __typename?: 'junction_sc_definitions_directus_users', id: string } | null };

export type CreateSkillChecklistMutationVariables = Exact<{
  data: Create_Sc_Definitions_Input;
}>;


export type CreateSkillChecklistMutation = { __typename?: 'Mutation', create_sc_definitions_item?: { __typename?: 'sc_definitions', id: string, versions?: Array<{ __typename?: 'sc_versions', id: string } | null> | null } | null };

export type UpdateSkillChecklistMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Sc_Definitions_Input;
}>;


export type UpdateSkillChecklistMutation = { __typename?: 'Mutation', update_sc_definitions_item?: { __typename?: 'sc_definitions', id: string, last_version?: { __typename?: 'sc_versions', id: string } | null } | null };

export type CreateSkillChecklistVersionMutationVariables = Exact<{
  data: Create_Sc_Versions_Input;
}>;


export type CreateSkillChecklistVersionMutation = { __typename?: 'Mutation', create_sc_versions_item?: { __typename?: 'sc_versions', id: string } | null };

export type DeleteSkillChecklistMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSkillChecklistMutation = { __typename?: 'Mutation', update_sc_definitions_item?: { __typename?: 'sc_definitions', id: string } | null };

export type UpdateSkillChecklistVersionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Sc_Versions_Input;
}>;


export type UpdateSkillChecklistVersionMutation = { __typename?: 'Mutation', update_sc_versions_item?: { __typename?: 'sc_versions', id: string } | null };

export type SkillChecklistAssignmentFragment = { __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expiration_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, expiration_type?: string | null, import_report_url?: string | null, import_survey_subscription_id?: number | null, questions?: Object | null, accept_agreements?: boolean | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, import_is_shell?: boolean | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', total_questions?: number | null, agreements?: string | null, instructions?: string | null, questions?: Object | null, id: string, version_number?: string | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null } | null, skillchecklist_version?: { __typename?: 'sc_versions', id: string, version_number?: string | null, questions?: Object | null, total_questions?: number | null, agreements?: string | null, instructions?: string | null, description?: string | null, is_new_format?: boolean | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type GetSkillsChecklistsAssignmentsQueryVariables = Exact<{
  category?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  userId: Scalars['String']['input'];
}>;


export type GetSkillsChecklistsAssignmentsQuery = { __typename?: 'Query', junction_sc_definitions_directus_users: Array<{ __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expiration_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, expiration_type?: string | null, import_report_url?: string | null, import_survey_subscription_id?: number | null, questions?: Object | null, accept_agreements?: boolean | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, import_is_shell?: boolean | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', total_questions?: number | null, agreements?: string | null, instructions?: string | null, questions?: Object | null, id: string, version_number?: string | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null } | null, skillchecklist_version?: { __typename?: 'sc_versions', id: string, version_number?: string | null, questions?: Object | null, total_questions?: number | null, agreements?: string | null, instructions?: string | null, description?: string | null, is_new_format?: boolean | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }> };

export type GetSkillChecklistAssignmentQueryVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
}>;


export type GetSkillChecklistAssignmentQuery = { __typename?: 'Query', junction_sc_definitions_directus_users_by_id?: { __typename?: 'junction_sc_definitions_directus_users', id: string, status?: string | null, assigned_on?: Date | null, due_date?: Date | null, expiration_date?: Date | null, expires_on?: Date | null, finished_on?: Date | null, expiration_type?: string | null, import_report_url?: string | null, import_survey_subscription_id?: number | null, questions?: Object | null, accept_agreements?: boolean | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, import_is_shell?: boolean | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', total_questions?: number | null, agreements?: string | null, instructions?: string | null, questions?: Object | null, id: string, version_number?: string | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null } | null, skillchecklist_version?: { __typename?: 'sc_versions', id: string, version_number?: string | null, questions?: Object | null, total_questions?: number | null, agreements?: string | null, instructions?: string | null, description?: string | null, is_new_format?: boolean | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null };

export type SetSkillChecklistAssignmentQuestionsMutationVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
  finished_on?: InputMaybe<Scalars['Date']['input']>;
  expires_on?: InputMaybe<Scalars['Date']['input']>;
  questions: Scalars['JSON']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
}>;


export type SetSkillChecklistAssignmentQuestionsMutation = { __typename?: 'Mutation', update_junction_sc_definitions_directus_users_item?: { __typename?: 'junction_sc_definitions_directus_users', id: string } | null };

export type GetExamResultsQueryVariables = Exact<{
  exams_id: Scalars['String']['input'];
}>;


export type GetExamResultsQuery = { __typename?: 'Query', exam_results: Array<{ __typename?: 'exam_results', id: string, time_taken: number, attempt?: number | null, correct: boolean, assignment_id?: { __typename?: 'junction_directus_users_exams', status?: string | null, attempts_used?: number | null } | null, question_versions_id?: { __typename?: 'question_versions', question: Object } | null }> };

export type DocumentFragment = { __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null };

export type AllDocumentsForListFragment = { __typename?: 'documents', id: string, title?: string | null, status?: string | null, document?: { __typename?: 'directus_files', type?: string | null } | null, categories?: Array<{ __typename?: 'junction_documents_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null };

export type DocumentsAssigmentsFragment = { __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, expiration_type?: string | null, status?: string | null, read?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null, description?: string | null, status?: string | null, import_document_id?: number | null, import_document_url?: string | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string, filesize?: number | null } | null, categories?: Array<{ __typename?: 'junction_documents_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null };

export type GetAllDocumentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Documents_Filter>;
}>;


export type GetAllDocumentsQuery = { __typename?: 'Query', documents: Array<{ __typename?: 'documents', id: string, title?: string | null, status?: string | null, document?: { __typename?: 'directus_files', type?: string | null } | null, categories?: Array<{ __typename?: 'junction_documents_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }>, documents_aggregated: Array<{ __typename?: 'documents_aggregated', count?: { __typename?: 'documents_aggregated_count', id?: number | null } | null }> };

export type GetAllDocumentForAssignCompetencyQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Documents_Filter>;
}>;


export type GetAllDocumentForAssignCompetencyQuery = { __typename?: 'Query', documents: Array<{ __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null }> };

export type GetDocumentByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetDocumentByIdQuery = { __typename?: 'Query', documents_by_id?: { __typename?: 'documents', id: string, title?: string | null, description?: string | null, status?: string | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string } | null, categories?: Array<{ __typename?: 'junction_documents_categories', id: string, categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', id: string, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null };

export type GetDocumentsAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type GetDocumentsAssignmentsQuery = { __typename?: 'Query', junction_directus_users_documents: Array<{ __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, expiration_type?: string | null, status?: string | null, read?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null, description?: string | null, status?: string | null, import_document_id?: number | null, import_document_url?: string | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string, filesize?: number | null } | null, categories?: Array<{ __typename?: 'junction_documents_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null }> };

export type GetAllDocumentsAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type GetAllDocumentsAssignmentsQuery = { __typename?: 'Query', junction_directus_users_documents: Array<{ __typename?: 'junction_directus_users_documents', id: string, assigned_on?: Date | null, expiration_type?: string | null, status?: string | null, read?: Date | null, expires_on?: Date | null, agency?: { __typename?: 'agencies', name?: string | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null } | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null, description?: string | null, status?: string | null, import_document_id?: number | null, import_document_url?: string | null, document?: { __typename?: 'directus_files', id: string, title?: string | null, filename_download: string, storage: string, filesize?: number | null } | null, categories?: Array<{ __typename?: 'junction_documents_categories', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null }>, junction_directus_users_documents_aggregated: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }> };

export type SysUsersWithDocumentsQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Directus_Users_Filter>;
}>;


export type SysUsersWithDocumentsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null }> };

export type GetAllDocumentsOnReportQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Documents_Filter>;
}>;


export type GetAllDocumentsOnReportQuery = { __typename?: 'Query', documents: Array<{ __typename?: 'documents', id: string, title?: string | null }> };

export type GetAllDocumentsForUserFilterQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit: Scalars['Int']['input'];
  filter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type GetAllDocumentsForUserFilterQuery = { __typename?: 'Query', junction_directus_users_documents: Array<{ __typename?: 'junction_directus_users_documents', documents_id?: { __typename?: 'documents', id: string, title?: string | null } | null }> };

export type GetAllAssignedDocumentsTotalReportsQueryVariables = Exact<{
  unreadFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  readfilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  expiredFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  totalFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type GetAllAssignedDocumentsTotalReportsQuery = { __typename?: 'Query', unread: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, read: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, expired: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, total: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }> };

export type CreateDocumentMutationVariables = Exact<{
  data: Create_Documents_Input;
}>;


export type CreateDocumentMutation = { __typename?: 'Mutation', create_documents_item?: { __typename?: 'documents', id: string } | null };

export type UpdateDocumentMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Documents_Input;
}>;


export type UpdateDocumentMutation = { __typename?: 'Mutation', update_documents_item?: { __typename?: 'documents', id: string } | null };

export type DeleteDocumentAgenciesMutationVariables = Exact<{
  ids: Array<InputMaybe<Scalars['ID']['input']>> | InputMaybe<Scalars['ID']['input']>;
}>;


export type DeleteDocumentAgenciesMutation = { __typename?: 'Mutation', delete_junction_documents_agencies_items?: { __typename?: 'delete_many', ids: Array<string | null> } | null };

export type UpdateAssignedDocumentMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Documents_Input;
}>;


export type UpdateAssignedDocumentMutation = { __typename?: 'Mutation', update_junction_directus_users_documents_item?: { __typename?: 'junction_directus_users_documents', id: string } | null };

export type ModuleVersionFragment = { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null };

export type ModuleDefinitionFragment = { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null };

export type ModuleAttemptFragment = { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null };

export type ModuleAssignmentFragment = { __typename?: 'junction_modules_definition_directus_users', id: string, finished_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, status?: string | null, started_on?: Date | null, approved?: boolean | null, score?: number | null, cert_code?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, import_cert_url?: string | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_access?: Date | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', last_name?: string | null, first_name?: string | null, email?: string | null, id: string } | null } | null> | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, attempts?: Array<{ __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null> | null, last_attempt?: { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null, agency?: { __typename?: 'agencies', name?: string | null, id: string, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null };

export type GetModulesCategoriesQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetModulesCategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }> };

export type GetModulesDefinitionsQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  filter?: InputMaybe<Modules_Definition_Filter>;
}>;


export type GetModulesDefinitionsQuery = { __typename?: 'Query', modules_definition: Array<{ __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null }> };

export type GetModulesDefinitionsForAssignmentQueryVariables = Exact<{
  filter?: InputMaybe<Modules_Definition_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetModulesDefinitionsForAssignmentQuery = { __typename?: 'Query', modules_definition: Array<{ __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null }> };

export type GetModulesDefinitionsTotalPagesQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetModulesDefinitionsTotalPagesQuery = { __typename?: 'Query', modules_definition_aggregated: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }> };

export type GetModuleDefinitionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetModuleDefinitionQuery = { __typename?: 'Query', modules_definition_by_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null };

export type GetModulesAssignmentsQueryVariables = Exact<{
  category?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  userId: Scalars['String']['input'];
}>;


export type GetModulesAssignmentsQuery = { __typename?: 'Query', junction_modules_definition_directus_users: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, finished_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, status?: string | null, started_on?: Date | null, approved?: boolean | null, score?: number | null, cert_code?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, import_cert_url?: string | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_access?: Date | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', last_name?: string | null, first_name?: string | null, email?: string | null, id: string } | null } | null> | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, attempts?: Array<{ __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null> | null, last_attempt?: { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null, agency?: { __typename?: 'agencies', name?: string | null, id: string, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null }> };

export type GetReportModulesAssignmentsQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
}>;


export type GetReportModulesAssignmentsQuery = { __typename?: 'Query', assignments: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, finished_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, status?: string | null, started_on?: Date | null, approved?: boolean | null, score?: number | null, cert_code?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, import_cert_url?: string | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_access?: Date | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', last_name?: string | null, first_name?: string | null, email?: string | null, id: string } | null } | null> | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, attempts?: Array<{ __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null> | null, last_attempt?: { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null, agency?: { __typename?: 'agencies', name?: string | null, id: string, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null }>, totalItems: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }> };

export type GetModuleassignmentByUserIdQueryVariables = Exact<{
  userId: Scalars['String']['input'];
  assignmentId: Scalars['GraphQLStringOrFloat']['input'];
}>;


export type GetModuleassignmentByUserIdQuery = { __typename?: 'Query', junction_modules_definition_directus_users: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, finished_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, status?: string | null, started_on?: Date | null, approved?: boolean | null, score?: number | null, cert_code?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, import_cert_url?: string | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_access?: Date | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', last_name?: string | null, first_name?: string | null, email?: string | null, id: string } | null } | null> | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, attempts?: Array<{ __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null> | null, last_attempt?: { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null, agency?: { __typename?: 'agencies', name?: string | null, id: string, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null }> };

export type SysUsersWithModulesQueryVariables = Exact<{
  filter?: InputMaybe<Directus_Users_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type SysUsersWithModulesQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null }> };

export type GetModulesForFilterQueryVariables = Exact<{
  filter?: InputMaybe<Modules_Definition_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetModulesForFilterQuery = { __typename?: 'Query', modules_definition: Array<{ __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null }> };

export type GetModulesForUserFilterQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetModulesForUserFilterQuery = { __typename?: 'Query', junction_modules_definition_directus_users: Array<{ __typename?: 'junction_modules_definition_directus_users', modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null } | null }> };

export type GetModulesAverageScoreQueryVariables = Exact<{
  filter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
}>;


export type GetModulesAverageScoreQuery = { __typename?: 'Query', junction_modules_definition_directus_users_aggregated: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', avg?: { __typename?: 'junction_modules_definition_directus_users_aggregated_fields', score?: number | null } | null }> };

export type GetModulesReportByStatusQueryVariables = Exact<{
  notStartedfilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  passedFilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  failedFilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  inProgressFilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  expiredFilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  totalFilters?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
}>;


export type GetModulesReportByStatusQuery = { __typename?: 'Query', notStarted: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }>, passed: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }>, failed: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }>, inProgress: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }>, expired: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }>, total: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', status?: number | null } | null }> };

export type GetModuleAssignmentQueryVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
}>;


export type GetModuleAssignmentQuery = { __typename?: 'Query', junction_modules_definition_directus_users_by_id?: { __typename?: 'junction_modules_definition_directus_users', id: string, finished_on?: Date | null, assigned_on?: Date | null, due_date?: Date | null, expires_on?: Date | null, status?: string | null, started_on?: Date | null, approved?: boolean | null, score?: number | null, cert_code?: string | null, allowed_attempts?: number | null, attempts_used?: number | null, import_cert_url?: string | null, expiration_type?: string | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null, module_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_access?: Date | null, last_name?: string | null, email?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', employee_number?: string | null, agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', last_name?: string | null, first_name?: string | null, email?: string | null, id: string } | null } | null> | null, specialties?: Array<{ __typename?: 'junction_directus_users_agencies_specialties', specialties_id?: { __typename?: 'specialties', id: string, name?: string | null } | null } | null> | null } | null> | null } | null, attempts?: Array<{ __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null> | null, last_attempt?: { __typename?: 'modules_results', id: string, score?: number | null, attempt?: string | null, answers?: Object | null, finished_on?: Date | null, status?: string | null, started_on?: Date | null, module_definition_id?: { __typename?: 'modules_definition', id: string } | null, module_version_id?: { __typename?: 'modules_versions', id: string } | null, assignment_id?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null } | null, agency?: { __typename?: 'agencies', name?: string | null, id: string, enable_certificate_logo?: boolean | null, logo?: { __typename?: 'directus_files', id: string } | null, certificate_logo?: { __typename?: 'directus_files', id: string } | null } | null } | null };

export type StartModuleMutationVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
  versionId: Scalars['ID']['input'];
}>;


export type StartModuleMutation = { __typename?: 'Mutation', update_junction_modules_definition_directus_users_item?: { __typename?: 'junction_modules_definition_directus_users', id: string } | null };

export type CreateAttemptMutationVariables = Exact<{
  assignmentId: Scalars['ID']['input'];
  moduleId: Scalars['ID']['input'];
  moduleVersionId: Scalars['ID']['input'];
}>;


export type CreateAttemptMutation = { __typename?: 'Mutation', create_modules_results_item?: { __typename?: 'modules_results', id: string } | null };

export type CreateModuleDefinitionMutationVariables = Exact<{
  data: Create_Modules_Definition_Input;
}>;


export type CreateModuleDefinitionMutation = { __typename?: 'Mutation', create_modules_definition_item?: { __typename?: 'modules_definition', id: string, versions?: Array<{ __typename?: 'modules_versions', id: string } | null> | null } | null };

export type UpdateModuleDefinitionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Modules_Definition_Input;
}>;


export type UpdateModuleDefinitionMutation = { __typename?: 'Mutation', update_modules_definition_item?: { __typename?: 'modules_definition', id: string } | null };

export type CreateModuleVersionMutationVariables = Exact<{
  data: Create_Modules_Versions_Input;
}>;


export type CreateModuleVersionMutation = { __typename?: 'Mutation', create_modules_versions_item?: { __typename?: 'modules_versions', id: string } | null };

export type UpdateModuleVersionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Modules_Versions_Input;
}>;


export type UpdateModuleVersionMutation = { __typename?: 'Mutation', update_modules_versions_item?: { __typename?: 'modules_versions', id: string } | null };

export type DeleteModuleDefinitionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteModuleDefinitionMutation = { __typename?: 'Mutation', update_modules_definition_item?: { __typename?: 'modules_definition', id: string } | null };

export type BundleFragment = { __typename?: 'bundles', id: string, name?: string | null, status?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null, exams?: Array<{ __typename?: 'junction_bundles_exams', exams_id?: { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', id: string, allowed_attempts?: number | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_bundles_modules_definition', modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null } | null> | null, skills_checklists?: Array<{ __typename?: 'junction_bundles_sc_definitions', sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_bundles_policies', policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_bundles_documents', documents_id?: { __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null };

export type GetAllBundlesForAssignCompetencyQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Bundles_Filter>;
}>;


export type GetAllBundlesForAssignCompetencyQuery = { __typename?: 'Query', bundles: Array<{ __typename?: 'bundles', id: string, name?: string | null, status?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null, exams?: Array<{ __typename?: 'junction_bundles_exams', exams_id?: { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', id: string, allowed_attempts?: number | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_bundles_modules_definition', modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null } | null> | null, skills_checklists?: Array<{ __typename?: 'junction_bundles_sc_definitions', sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_bundles_policies', policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_bundles_documents', documents_id?: { __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null }> };

export type GetAllBundlesQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Bundles_Filter>;
}>;


export type GetAllBundlesQuery = { __typename?: 'Query', bundles: Array<{ __typename?: 'bundles', id: string, name?: string | null, status?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null, exams?: Array<{ __typename?: 'junction_bundles_exams', exams_id?: { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', id: string, allowed_attempts?: number | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_bundles_modules_definition', modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null } | null> | null, skills_checklists?: Array<{ __typename?: 'junction_bundles_sc_definitions', sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_bundles_policies', policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_bundles_documents', documents_id?: { __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null }>, bundles_aggregated: Array<{ __typename?: 'bundles_aggregated', count?: { __typename?: 'bundles_aggregated_count', id?: number | null } | null }> };

export type GetBundleByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetBundleByIdQuery = { __typename?: 'Query', bundles_by_id?: { __typename?: 'bundles', id: string, name?: string | null, status?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null, exams?: Array<{ __typename?: 'junction_bundles_exams', exams_id?: { __typename?: 'exams', id: string, status?: string | null, title?: string | null, date_created?: Date | null, directus_users?: Array<{ __typename?: 'junction_directus_users_exams', id: string, allowed_attempts?: number | null } | null> | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null, modality?: { __typename?: 'categories', id: string, title?: string | null } | null, specialties?: Array<{ __typename?: 'junction_exams_categories_specialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, subspecialties?: Array<{ __typename?: 'junction_exams_categories_subspecialties', categories_id?: { __typename?: 'categories', id: string, title?: string | null } | null } | null> | null, exam_versions?: Array<{ __typename?: 'exam_versions', id: string, title?: string | null, allowed_attempts?: number | null, description?: string | null, fail_message?: string | null, introduction?: string | null, passing_message?: string | null, passing_score?: number | null, questions_to_give?: number | null, shuffle_questions?: boolean | null, expiration?: string | null, is_proctoring?: boolean | null } | null> | null } | null } | null> | null, modules?: Array<{ __typename?: 'junction_bundles_modules_definition', modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null } | null } | null> | null, skills_checklists?: Array<{ __typename?: 'junction_bundles_sc_definitions', sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null, reference_number?: string | null, status?: string | null, category?: { __typename?: 'categories', id: string, title?: string | null } | null, speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, sub_speciality?: { __typename?: 'categories', id: string, title?: string | null } | null, last_version?: { __typename?: 'sc_versions', id: string, instructions?: string | null, agreements?: string | null, questions?: Object | null, version_number?: string | null, total_questions?: number | null, description?: string | null, expiration?: string | null, is_new_format?: boolean | null } | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null } | null } | null> | null, policies?: Array<{ __typename?: 'junction_bundles_policies', policies_id?: { __typename?: 'policies', id: string, name?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null, documents?: Array<{ __typename?: 'junction_bundles_documents', documents_id?: { __typename?: 'documents', id: string, title?: string | null, status?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null } | null } | null> | null } | null };

export type CreateBundleMutationVariables = Exact<{
  data: Create_Bundles_Input;
}>;


export type CreateBundleMutation = { __typename?: 'Mutation', create_bundles_item?: { __typename?: 'bundles', id: string } | null };

export type UpdateBundleMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Bundles_Input;
}>;


export type UpdateBundleMutation = { __typename?: 'Mutation', update_bundles_item?: { __typename?: 'bundles', id: string } | null };

export type DeleteBundleMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteBundleMutation = { __typename?: 'Mutation', update_bundles_item?: { __typename?: 'bundles', id: string } | null };

export type UserForSettingsFragment = { __typename?: 'directus_users', id: string, email?: string | null, last_name?: string | null, first_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, employee_number?: string | null, date_created?: Date | null, agencies_id?: { __typename?: 'agencies', id: string } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null, role?: { __typename?: 'directus_roles', id: string, name: string, description?: string | null } | null };

export type SysUserForSettingsQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type SysUserForSettingsQuery = { __typename?: 'Query', users: Array<{ __typename?: 'directus_users', id: string, email?: string | null, last_name?: string | null, first_name?: string | null, address_line_1?: string | null, address_line_2?: string | null, city?: string | null, state?: string | null, zip?: string | null, phone?: string | null, agencies?: Array<{ __typename?: 'junction_directus_users_agencies', id: string, employee_number?: string | null, date_created?: Date | null, agencies_id?: { __typename?: 'agencies', id: string } | null, departments?: Array<{ __typename?: 'junction_directus_users_agencies_departments', departments_id?: { __typename?: 'departments', id: string, name?: string | null } | null } | null> | null, locations?: Array<{ __typename?: 'junction_directus_users_agencies_locations', locations_id?: { __typename?: 'locations', id: string, name?: string | null } | null } | null> | null, supervisors?: Array<{ __typename?: 'junction_directus_users_agencies_supervisors', directus_users_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null } | null> | null } | null> | null, role?: { __typename?: 'directus_roles', id: string, name: string, description?: string | null } | null }> };

export type GetAllDepartmentsForSelectQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAllDepartmentsForSelectQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null }> };

export type GetAllLocationsForSelectQueryVariables = Exact<{
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAllLocationsForSelectQuery = { __typename?: 'Query', locations: Array<{ __typename?: 'locations', id: string, name?: string | null }> };

export type UpdateJunctionUserAgencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Junction_Directus_Users_Agencies_Input;
}>;


export type UpdateJunctionUserAgencyMutation = { __typename?: 'Mutation', update_junction_directus_users_agencies_item?: { __typename?: 'junction_directus_users_agencies', id: string } | null };

export type DepartmentFragment = { __typename?: 'departments', id: string, name?: string | null };

export type DepartmentForListFragment = { __typename?: 'departments', id: string, name?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Departments_Filter>;
}>;


export type GetAllDepartmentsForFilterUsersOnAssignmentsQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null }> };

export type GetAllDepartmentsForListingQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Departments_Filter>;
}>;


export type GetAllDepartmentsForListingQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, total: Array<{ __typename?: 'departments_aggregated', count?: { __typename?: 'departments_aggregated_count', id?: number | null } | null }> };

export type DepartmentsQueryVariables = Exact<{
  filter?: InputMaybe<Departments_Filter>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type DepartmentsQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null }> };

export type CreateDepartmentMutationVariables = Exact<{
  data: Create_Departments_Input;
}>;


export type CreateDepartmentMutation = { __typename?: 'Mutation', create_departments_item?: { __typename?: 'departments', id: string } | null };

export type UpdateDepartmentMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Departments_Input;
}>;


export type UpdateDepartmentMutation = { __typename?: 'Mutation', update_departments_item?: { __typename?: 'departments', id: string } | null };

export type DeleteDepartmentMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteDepartmentMutation = { __typename?: 'Mutation', update_departments_item?: { __typename?: 'departments', id: string } | null };

export type LocationFragment = { __typename?: 'locations', id: string, name?: string | null };

export type LocationForListFragment = { __typename?: 'locations', id: string, name?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null };

export type GetAllLocationsForFilterUsersOnAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Locations_Filter>;
}>;


export type GetAllLocationsForFilterUsersOnAssignmentsQuery = { __typename?: 'Query', locations: Array<{ __typename?: 'locations', id: string, name?: string | null }> };

export type GetAllLocationsForListingQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Locations_Filter>;
}>;


export type GetAllLocationsForListingQuery = { __typename?: 'Query', locations: Array<{ __typename?: 'locations', id: string, name?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null }>, total: Array<{ __typename?: 'locations_aggregated', count?: { __typename?: 'locations_aggregated_count', id?: number | null } | null }> };

export type LocationsQueryVariables = Exact<{
  filter?: InputMaybe<Locations_Filter>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type LocationsQuery = { __typename?: 'Query', locations: Array<{ __typename?: 'locations', id: string, name?: string | null }> };

export type CreateLocationMutationVariables = Exact<{
  data: Create_Locations_Input;
}>;


export type CreateLocationMutation = { __typename?: 'Mutation', create_locations_item?: { __typename?: 'locations', id: string } | null };

export type UpdateLocationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Locations_Input;
}>;


export type UpdateLocationMutation = { __typename?: 'Mutation', update_locations_item?: { __typename?: 'locations', id: string } | null };

export type DeleteLocationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteLocationMutation = { __typename?: 'Mutation', update_locations_item?: { __typename?: 'locations', id: string } | null };

export type SpecialtyFragment = { __typename?: 'specialties', id: string, name?: string | null };

export type SpecialtyForListFragment = { __typename?: 'specialties', id: string, name?: string | null, date_created?: Date | null };

export type GetAllSpecialtiesForListingQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Specialties_Filter>;
}>;


export type GetAllSpecialtiesForListingQuery = { __typename?: 'Query', specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null, date_created?: Date | null }>, total: Array<{ __typename?: 'specialties_aggregated', count?: { __typename?: 'specialties_aggregated_count', id?: number | null } | null }> };

export type GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Specialties_Filter>;
}>;


export type GetAllSpecialtiesForFilterUsersOnAssignmentsQuery = { __typename?: 'Query', specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }> };

export type SpecialtiesQueryVariables = Exact<{
  filter?: InputMaybe<Specialties_Filter>;
  sort?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>> | InputMaybe<Scalars['String']['input']>>;
  search?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type SpecialtiesQuery = { __typename?: 'Query', specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }> };

export type CreateSpecialtyMutationVariables = Exact<{
  data: Create_Specialties_Input;
}>;


export type CreateSpecialtyMutation = { __typename?: 'Mutation', create_specialties_item?: { __typename?: 'specialties', id: string } | null };

export type UpdateSpecialtyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Specialties_Input;
}>;


export type UpdateSpecialtyMutation = { __typename?: 'Mutation', update_specialties_item?: { __typename?: 'specialties', id: string } | null };

export type DeleteSpecialtyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSpecialtyMutation = { __typename?: 'Mutation', update_specialties_item?: { __typename?: 'specialties', id: string } | null };

export type UpdateAgencyEmailNotificationsSettingsMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  notificationsSettings: Scalars['JSON']['input'];
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
}>;


export type UpdateAgencyEmailNotificationsSettingsMutation = { __typename?: 'Mutation', update_agencies_item?: { __typename?: 'agencies', id: string } | null };

export type GetDashboardCertificatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetDashboardCertificatesQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'junction_directus_users_exams', id: string, import_cert_url?: string | null, finished_on?: Date | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null } | null }>, modules: Array<{ __typename?: 'junction_modules_definition_directus_users', id: string, import_cert_url?: string | null, finished_on?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', title?: string | null } | null }> };

export type GetClinicianDashboardItemsQueryVariables = Exact<{
  examsfilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  modulesfilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  scfilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  policiesfilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  documentsfilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
}>;


export type GetClinicianDashboardItemsQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'junction_directus_users_exams', status?: string | null, due_date?: Date | null, exams_id?: { __typename?: 'exams', id: string, title?: string | null } | null }>, modules: Array<{ __typename?: 'junction_modules_definition_directus_users', status?: string | null, due_date?: Date | null, modules_definition_id?: { __typename?: 'modules_definition', id: string, title?: string | null } | null }>, skills_checklists: Array<{ __typename?: 'junction_sc_definitions_directus_users', status?: string | null, due_date?: Date | null, sc_definitions_id?: { __typename?: 'sc_definitions', id: string, title?: string | null } | null }>, policies: Array<{ __typename?: 'junction_directus_users_policies', status?: string | null, due_date?: Date | null, policies_id?: { __typename?: 'policies', id: string, name?: string | null } | null }>, documents: Array<{ __typename?: 'junction_directus_users_documents', status?: string | null, due_date?: Date | null, documents_id?: { __typename?: 'documents', id: string, title?: string | null } | null }> };

export type GetClinicianDashboardAnalyticsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetClinicianDashboardAnalyticsQuery = { __typename?: 'Query', exam_avg: Array<{ __typename?: 'junction_directus_users_exams_aggregated', avg?: { __typename?: 'junction_directus_users_exams_aggregated_fields', score?: number | null } | null }>, exam_ceus: Array<{ __typename?: 'junction_directus_users_exams', exam_versions_id?: { __typename?: 'exam_versions', contact_hour?: string | null } | null }>, module_avg: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', avg?: { __typename?: 'junction_modules_definition_directus_users_aggregated_fields', score?: number | null } | null }>, module_ceus: Array<{ __typename?: 'junction_modules_definition_directus_users', modules_definition_id?: { __typename?: 'modules_definition', last_version?: { __typename?: 'modules_versions', contact_hour?: number | null } | null } | null }> };

export type GetClinicianDashboardCompetenciesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetClinicianDashboardCompetenciesQuery = { __typename?: 'Query', total_exams: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, total_exams_completed: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, total_modules: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, total_modules_completed: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, total_skills_checklists: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, total_skills_checklists_completed: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, total_policies: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, total_policies_completed: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, total_documents: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, total_documents_completed: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }> };

export type GetModulesOverviewFiltersQueryVariables = Exact<{
  limit: Scalars['Int']['input'];
  moduleSearch?: InputMaybe<Scalars['String']['input']>;
  moduleFilters?: InputMaybe<Modules_Definition_Filter>;
  modalitySearch?: InputMaybe<Scalars['String']['input']>;
  specialitySearch?: InputMaybe<Scalars['String']['input']>;
  subSpecialitySearch?: InputMaybe<Scalars['String']['input']>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  departmentsFilters?: InputMaybe<Departments_Filter>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsFilters?: InputMaybe<Locations_Filter>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesFilters?: InputMaybe<Specialties_Filter>;
}>;


export type GetModulesOverviewFiltersQuery = { __typename?: 'Query', modalities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, specialities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, subSpecialities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, modules: Array<{ __typename?: 'modules_definition', id: string, title?: string | null, description?: string | null, copyright?: string | null, import_is_shell?: boolean | null, expiration_date?: Date | null, status?: string | null, import_ceu?: number | null, date_created?: Date | null, agencies?: Array<{ __typename?: 'junction_modules_definition_agencies', agencies_id?: { __typename?: 'agencies', name?: string | null } | null } | null> | null, last_version?: { __typename?: 'modules_versions', id: string, version_number?: number | null, expiration?: string | null, package_status?: string | null, entry_point?: string | null, allowed_attempts?: number | null, contact_hour?: number | null, package?: { __typename?: 'directus_files', id: string, filename_download: string, title?: string | null, storage: string } | null } | null, modality?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, sub_specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null, specialty?: { __typename?: 'categories', id: string, title?: string | null, type?: string | null, agency?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null }>, departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }> };

export type GetPoliciesOverviewFiltersQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  departmentsFilter?: InputMaybe<Departments_Filter>;
  locationsFilter?: InputMaybe<Locations_Filter>;
  specialtiesFilter?: InputMaybe<Specialties_Filter>;
  policiesFilters?: InputMaybe<Policies_Filter>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
  categorySearch?: InputMaybe<Scalars['String']['input']>;
  policiesSearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetPoliciesOverviewFiltersQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null }>, departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }>, policies: Array<{ __typename?: 'policies', id: string, name?: string | null }> };

export type GetDocumentsOverviewFiltersQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  departmentsFilter?: InputMaybe<Departments_Filter>;
  locationsFilter?: InputMaybe<Locations_Filter>;
  specialtiesFilter?: InputMaybe<Specialties_Filter>;
  documentsFilters?: InputMaybe<Documents_Filter>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
  categorySearch?: InputMaybe<Scalars['String']['input']>;
  documentsSearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetDocumentsOverviewFiltersQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'categories', id: string, title?: string | null }>, departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }>, documents: Array<{ __typename?: 'documents', id: string, title?: string | null }> };

export type GetSkillsChecklistOverviewFiltersQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  modalitySearch?: InputMaybe<Scalars['String']['input']>;
  specialitySearch?: InputMaybe<Scalars['String']['input']>;
  subSpecialitySearch?: InputMaybe<Scalars['String']['input']>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  departmentsFilters?: InputMaybe<Departments_Filter>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsFilters?: InputMaybe<Locations_Filter>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesFilters?: InputMaybe<Specialties_Filter>;
  skillsChecklistFilter?: InputMaybe<Sc_Definitions_Filter>;
  skillsChecklistSearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetSkillsChecklistOverviewFiltersQuery = { __typename?: 'Query', modalities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, specialities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, subSpecialities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }>, skillsChecklist: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null }> };

export type GetExamsOverviewFiltersQueryVariables = Exact<{
  limit: Scalars['Int']['input'];
  modalitySearch?: InputMaybe<Scalars['String']['input']>;
  specialitySearch?: InputMaybe<Scalars['String']['input']>;
  subSpecialitySearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetExamsOverviewFiltersQuery = { __typename?: 'Query', modalities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, specialities: Array<{ __typename?: 'categories', id: string, title?: string | null }>, subSpecialities: Array<{ __typename?: 'categories', id: string, title?: string | null }> };

export type SummaryFiltersOptionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  departmentsFilter?: InputMaybe<Departments_Filter>;
  locationsFilter?: InputMaybe<Locations_Filter>;
  specialtiesFilter?: InputMaybe<Specialties_Filter>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type SummaryFiltersOptionsQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }> };

export type GetUserAndGroupsFiltersQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  departmentsFilters?: InputMaybe<Departments_Filter>;
  locationsFilters?: InputMaybe<Locations_Filter>;
  specialtiesFilters?: InputMaybe<Specialties_Filter>;
  departmentsSearch?: InputMaybe<Scalars['String']['input']>;
  locationsSearch?: InputMaybe<Scalars['String']['input']>;
  specialtiesSearch?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetUserAndGroupsFiltersQuery = { __typename?: 'Query', departments: Array<{ __typename?: 'departments', id: string, name?: string | null }>, specialties: Array<{ __typename?: 'specialties', id: string, name?: string | null }>, locations: Array<{ __typename?: 'locations', id: string, name?: string | null }> };

export type GetAssignmentsTotalReportsQueryVariables = Exact<{
  documentsUnreadFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documentsReadFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documentsExpiredFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documentsTotalFilters?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  policiesUnsignedFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesSignedFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesExpiredFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesUnreadFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesTotalFilters?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  examsNotStartedFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsDoneFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsInProgressFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsExpiredFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsTotalFilters?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  modulesNotStartedFilter?: InputMaybe<Modules_Definition_Filter>;
  modulesPassedFilter?: InputMaybe<Modules_Definition_Filter>;
  modulesInProgressFilter?: InputMaybe<Modules_Definition_Filter>;
  modulesExpiredFilter?: InputMaybe<Modules_Definition_Filter>;
  modulesTotalFilters?: InputMaybe<Modules_Definition_Filter>;
  skillsChecklistsTodoFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  skillsChecklistsDoneFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  skillsChecklistsExpiredFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  skillsCheklistsTotalFilters?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
}>;


export type GetAssignmentsTotalReportsQuery = { __typename?: 'Query', documentsUnread: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, documentsRead: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, documentsExpired: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, policiesUnsigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesSigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesExpired: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesUnread: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, examsNotStarted: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsDone: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsInProgress: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsExpired: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, modulesNotStarted: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, modulesPassed: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, modulesInProgress: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, modulesExpired: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, skillsChecklistsTodo: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, skillsChecklistsDone: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, skillsChecklistsExpired: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, examsTotal: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, modulesTotal: Array<{ __typename?: 'modules_definition_aggregated', count?: { __typename?: 'modules_definition_aggregated_count', id?: number | null } | null }>, skillsChecklistTotal: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, documentsTotal: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, policiesTotal: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }> };

export type GetUserAndGroupsOverviewAssignmentsQueryVariables = Exact<{
  documentsUnreadFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documentsReadFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  documentsExpiredFilter?: InputMaybe<Junction_Directus_Users_Documents_Filter>;
  policiesUnsignedFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesSignedFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesExpiredFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  policiesUnreadFilter?: InputMaybe<Junction_Directus_Users_Policies_Filter>;
  examsNotStartedFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsDoneFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsInProgressFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  examsExpiredFilter?: InputMaybe<Junction_Directus_Users_Exams_Filter>;
  modulesNotStartedFilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  modulesPassedFilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  modulesInProgressFilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  modulesExpiredFilter?: InputMaybe<Junction_Modules_Definition_Directus_Users_Filter>;
  skillsChecklistsTodoFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  skillsChecklistsDoneFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
  skillsChecklistsExpiredFilter?: InputMaybe<Junction_Sc_Definitions_Directus_Users_Filter>;
}>;


export type GetUserAndGroupsOverviewAssignmentsQuery = { __typename?: 'Query', documentsUnread: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, documentsRead: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, documentsExpired: Array<{ __typename?: 'junction_directus_users_documents_aggregated', count?: { __typename?: 'junction_directus_users_documents_aggregated_count', id?: number | null } | null }>, policiesUnsigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesSigned: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesExpired: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, policiesUnread: Array<{ __typename?: 'junction_directus_users_policies_aggregated', count?: { __typename?: 'junction_directus_users_policies_aggregated_count', id?: number | null } | null }>, examsNotStarted: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsDone: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsInProgress: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, examsExpired: Array<{ __typename?: 'junction_directus_users_exams_aggregated', count?: { __typename?: 'junction_directus_users_exams_aggregated_count', id?: number | null } | null }>, modulesNotStarted: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, modulesPassed: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, modulesInProgress: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, modulesExpired: Array<{ __typename?: 'junction_modules_definition_directus_users_aggregated', count?: { __typename?: 'junction_modules_definition_directus_users_aggregated_count', id?: number | null } | null }>, skillsChecklistsTodo: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, skillsChecklistsDone: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }>, skillsChecklistsExpired: Array<{ __typename?: 'junction_sc_definitions_directus_users_aggregated', count?: { __typename?: 'junction_sc_definitions_directus_users_aggregated_count', id?: number | null } | null }> };

export type GetRunningDataMigrationQueryVariables = Exact<{ [key: string]: never; }>;


export type GetRunningDataMigrationQuery = { __typename?: 'Query', data_migrations: Array<{ __typename?: 'data_migrations', id: string, import_portal_id?: number | null }> };

export type GetMigrationRecordsQueryVariables = Exact<{
  filters?: InputMaybe<Data_Migration_Records_Filter>;
}>;


export type GetMigrationRecordsQuery = { __typename?: 'Query', data_migration_records: Array<{ __typename?: 'data_migration_records', id: string, level?: string | null, message?: string | null }> };

export type GetMappingsQueryVariables = Exact<{
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetMappingsQuery = { __typename?: 'Query', data_migration_mappings: Array<{ __typename?: 'data_migration_mappings', id: string, content_type?: string | null, source_name?: string | null, target_id_string?: string | null, target_id_number?: number | null, exclude?: boolean | null }>, data_migration_mappings_aggregated: Array<{ __typename?: 'data_migration_mappings_aggregated', count?: { __typename?: 'data_migration_mappings_aggregated_count', id?: number | null } | null }> };

export type MappingFragment = { __typename?: 'data_migration_mappings', id: string, content_type?: string | null, source_name?: string | null, target_id_string?: string | null, target_id_number?: number | null, exclude?: boolean | null };

export type GetMappedMappingsQueryVariables = Exact<{
  filter?: InputMaybe<Data_Migration_Mappings_Filter>;
}>;


export type GetMappedMappingsQuery = { __typename?: 'Query', data_migration_mappings_aggregated: Array<{ __typename?: 'data_migration_mappings_aggregated', count?: { __typename?: 'data_migration_mappings_aggregated_count', id?: number | null } | null }> };

export type UpdateDataMappingItemMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: Update_Data_Migration_Mappings_Input;
}>;


export type UpdateDataMappingItemMutation = { __typename?: 'Mutation', update_data_migration_mappings_item?: { __typename?: 'data_migration_mappings', id: string } | null };

export type GetAllExistingContentForMappingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllExistingContentForMappingsQuery = { __typename?: 'Query', exams: Array<{ __typename?: 'exams', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_exams_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }>, modules_definition: Array<{ __typename?: 'modules_definition', id: string, title?: string | null }>, sc_definitions: Array<{ __typename?: 'sc_definitions', id: string, title?: string | null, agency?: Array<{ __typename?: 'junction_sc_definitions_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }>, policies: Array<{ __typename?: 'policies', id: string, name?: string | null, agencies?: Array<{ __typename?: 'junction_policies_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }>, documents: Array<{ __typename?: 'documents', id: string, title?: string | null, agencies?: Array<{ __typename?: 'junction_documents_agencies', agencies_id?: { __typename?: 'agencies', id: string, name?: string | null } | null } | null> | null }> };

export type SysUserByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SysUserByIdQuery = { __typename?: 'Query', users_by_id?: { __typename?: 'directus_users', id: string, first_name?: string | null, last_name?: string | null, email?: string | null } | null };

export type GetAllMaintenanceWindowsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllMaintenanceWindowsQuery = { __typename?: 'Query', maintenance_windows: Array<{ __typename?: 'maintenance_windows', id: string, start_date_time?: Date | null }> };

export type SysGetUserCrudCompetenciesQueryVariables = Exact<{
  id: Scalars['ID']['input'];
  agency: Scalars['String']['input'];
}>;


export type SysGetUserCrudCompetenciesQuery = { __typename?: 'Query', users_by_id?: { __typename?: 'directus_users', exams?: Array<{ __typename?: 'junction_directus_users_exams', exams_id?: { __typename?: 'exams', id: string } | null } | null> | null, modules?: Array<{ __typename?: 'junction_modules_definition_directus_users', modules_definition_id?: { __typename?: 'modules_definition', id: string } | null } | null> | null, documents?: Array<{ __typename?: 'junction_directus_users_documents', documents_id?: { __typename?: 'documents', id: string } | null } | null> | null, policies?: Array<{ __typename?: 'junction_directus_users_policies', policies_id?: { __typename?: 'policies', id: string } | null } | null> | null, sc_definitions?: Array<{ __typename?: 'junction_sc_definitions_directus_users', sc_definitions_id?: { __typename?: 'sc_definitions', id: string } | null } | null> | null } | null };

export type GetFeatureFlagsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetFeatureFlagsQuery = { __typename?: 'Query', feature_flags: Array<{ __typename?: 'feature_flags', id: string, flag_key: string, enabled: boolean }> };

export const ModuleVersionFragmentDoc = gql`
    fragment ModuleVersion on modules_versions {
  id
  version_number
  expiration
  package {
    id
    filename_download
    title
    storage
  }
  package_status
  entry_point
  allowed_attempts
  contact_hour
}
    `;
export const CategoryFragmentDoc = gql`
    fragment Category on categories {
  id
  title
  type
  agency {
    id
    name
  }
}
    `;
export const ModuleDefinitionFragmentDoc = gql`
    fragment ModuleDefinition on modules_definition {
  id
  title
  description
  copyright
  import_is_shell
  expiration_date
  agencies {
    agencies_id {
      name
    }
  }
  last_version {
    ...ModuleVersion
  }
  modality {
    ...Category
  }
  sub_specialty {
    ...Category
  }
  specialty {
    ...Category
  }
  status
  import_ceu
  date_created
}
    ${ModuleVersionFragmentDoc}
${CategoryFragmentDoc}`;
export const UserFragmentDoc = gql`
    fragment User on directus_users {
  id
  first_name
  last_name
  email
  role {
    id
    name
  }
  status
  last_access
  agencies {
    agencies_id {
      id
      custom_allowed_attempts_exams
    }
    employee_number
    specialties {
      specialties_id {
        id
      }
    }
    locations {
      locations_id {
        id
      }
    }
    departments {
      departments_id {
        id
      }
    }
  }
  exams {
    id
    exams_id {
      id
      exam_versions {
        id
        title
      }
    }
  }
  sc_definitions {
    sc_definitions_id {
      id
      title
    }
    id
  }
  modules {
    id
    modules_definition_id {
      ...ModuleDefinition
    }
    module_version {
      id
    }
  }
  phone
  address_line_1
  address_line_2
  city
  state
  zip
}
    ${ModuleDefinitionFragmentDoc}`;
export const UserForAssignmentFragmentDoc = gql`
    fragment UserForAssignment on directus_users {
  id
  first_name
  last_name
  email
  role {
    id
  }
  agencies {
    agencies_id {
      id
    }
    status
  }
}
    `;
export const UserForReportsFragmentDoc = gql`
    fragment UserForReports on directus_users {
  id
  first_name
  last_name
  email
  last_access
  status
  agencies {
    agencies_id {
      id
      custom_allowed_attempts_exams
    }
    status
    specialties {
      specialties_id {
        id
        name
      }
    }
    locations {
      locations_id {
        id
        name
      }
    }
    departments {
      departments_id {
        id
        name
      }
    }
    supervisors {
      directus_users_id {
        id
        first_name
        last_name
      }
    }
  }
  exams(
    filter: {exams_id: {status: {_neq: "archived"}}, status: {_neq: "archived"}}
  ) {
    id
    status
    exams_id {
      title
    }
    assigned_on
    due_date
    expires_on
  }
  sc_definitions(
    filter: {sc_definitions_id: {status: {_neq: "archived"}}, status: {_neq: "archived"}}
  ) {
    id
    status
    sc_definitions_id {
      title
    }
    assigned_on
    due_date
    expires_on
  }
  modules(
    filter: {modules_definition_id: {status: {_neq: "archived"}}, status: {_neq: "archived"}}
  ) {
    id
    status
    modules_definition_id {
      title
    }
    assigned_on
    due_date
    expires_on
  }
  documents(
    filter: {documents_id: {status: {_neq: "archived"}}, status: {_neq: "archived"}}
  ) {
    id
    read
    documents_id {
      title
    }
    due_date
    expires_on
    assigned_on
  }
  policies(
    filter: {policies_id: {status: {_neq: "archived"}}, status: {_neq: "archived"}}
  ) {
    id
    signed_on
    policies_id {
      name
    }
    expires_on
    assigned_on
    due_date
  }
}
    `;
export const UserForComplianceSummaryFragmentDoc = gql`
    fragment UserForComplianceSummary on directus_users {
  id
  first_name
  last_name
  agencies {
    id
    specialties {
      specialties_id {
        id
        name
      }
    }
    locations {
      locations_id {
        id
        name
      }
    }
    departments {
      departments_id {
        id
        name
      }
    }
    agencies_id {
      id
      name
    }
    supervisors {
      directus_users_id {
        id
        first_name
        last_name
      }
    }
  }
  email
  exams {
    id
    status
    allowed_attempts
    attempts_used
    due_date
    expires_on
    assigned_on
    status
    exams_id {
      title
    }
    agency {
      id
    }
  }
  sc_definitions {
    id
    status
    expires_on
    assigned_on
    status
    due_date
    sc_definitions_id {
      title
    }
    agency {
      id
    }
  }
  modules {
    id
    status
    allowed_attempts
    attempts_used
    assigned_on
    expires_on
    due_date
    modules_definition_id {
      title
    }
    agency {
      id
    }
  }
  documents {
    id
    read
    documents_id {
      title
    }
    due_date
    expires_on
    assigned_on
    status
    agency {
      id
    }
  }
  policies {
    id
    signed_on
    status
    expires_on
    assigned_on
    due_date
    policies_id {
      name
    }
    agency {
      id
    }
  }
}
    `;
export const SysUsersTableFragmentFragmentDoc = gql`
    fragment sysUsersTableFragment on directus_users {
  id
  first_name
  last_name
  email
  role {
    id
    name
  }
  agencies {
    id
    bullhorn_id
    status
    agencies_id {
      id
      name
    }
    specialties {
      specialties_id {
        id
        name
      }
    }
    locations {
      locations_id {
        id
        name
      }
    }
    departments {
      departments_id {
        id
        name
      }
    }
    supervisors {
      directus_users_id {
        id
        first_name
        last_name
        email
      }
    }
  }
  status
  last_access
}
    `;
export const UserExamsFragmentDoc = gql`
    fragment userExams on junction_directus_users_exams {
  id
  status
  assigned_on
  finished_on
  due_date
  allowed_attempts
  attempts_used
  attempt_due
  started_on
  score
  expires_on
  exams_id {
    id
    import_is_shell
    title
    expiration_date
    modality {
      title
    }
    exam_versions(sort: "-date_created", limit: 1) {
      description
      passing_score
      is_proctoring
    }
  }
  agency {
    name
    ia_enable
  }
  import_subscription_id
  import_report_url
  import_cert_url
}
    `;
export const UserForCrudFragmentDoc = gql`
    fragment UserForCRUD on directus_users {
  status
  email
  first_name
  last_name
  address_line_1
  address_line_2
  city
  state
  zip
  phone
  imported
  role {
    id
  }
  agencies {
    id
    agencies_id {
      id
      name
    }
    status
    employee_number
    specialties {
      specialties_id {
        id
        name
      }
    }
    locations {
      locations_id {
        id
        name
      }
    }
    departments {
      departments_id {
        id
        name
      }
    }
    supervisors {
      directus_users_id {
        id
        first_name
        last_name
        email
      }
    }
  }
}
    `;
export const UserForClinicianFragmentDoc = gql`
    fragment userForClinician on directus_users {
  first_name
  last_name
  address_line_1
  address_line_2
  city
  state
  zip
  phone
}
    `;
export const SysUserForReportDetailsFragmentDoc = gql`
    fragment sysUserForReportDetails on directus_users {
  id
  first_name
  last_name
  email
  status
  last_access
}
    `;
export const AgencyFragmentDoc = gql`
    fragment Agency on agencies {
  id
  name
  custom_allowed_attempts_exams
  notifications_settings
  automatic_notifications_email
  custom_allowed_attempts_modules
  default_due_date
  default_expiration
  max_licenses
  enable_certificate_logo
  sc_allow_na_option
  self_assigment_allow
  logo {
    id
    filename_download
  }
  certificate_logo {
    id
    filename_download
  }
  webhook_enable
  webhook_url
  webhook_token
  webhook_secret
  ia_enable
  ia_app_id
  ia_api_key
  bh_enable
}
    `;
export const AgencyForAdminFragmentDoc = gql`
    fragment AgencyForAdmin on agencies {
  id
  name
  import_portal_id
  live_since
}
    `;
export const CompetenciesExamFragmentDoc = gql`
    fragment CompetenciesExam on junction_directus_users_exams {
  exams_id {
    id
    title
    import_is_shell
    modality {
      title
    }
    exam_versions(sort: "-date_created", limit: 1) {
      contact_hour
    }
    import_ceu
  }
  exam_versions_id {
    id
    title
    contact_hour
    expiration
  }
  agency {
    id
    name
  }
  expires_on
  allowed_attempts
  attempts_used
  assigned_on
  due_date
  status
  finished_on
  cert_expiry_date
  cert_code
  started_on
  id
  score
  import_cert_url
  import_report_url
  reassigned
  expiration_type
  score_history
}
    `;
export const CompetenciesModuleFragmentDoc = gql`
    fragment CompetenciesModule on junction_modules_definition_directus_users {
  id
  assigned_on
  finished_on
  expires_on
  allowed_attempts
  attempts_used
  due_date
  status
  approved
  score
  import_cert_url
  import_report_url
  reassigned
  expiration_type
  modules_definition_id {
    id
    title
    import_is_shell
    import_ceu
    last_version {
      contact_hour
    }
  }
  module_version {
    contact_hour
  }
  agency {
    id
    name
  }
}
    `;
export const ExamAssignmentFragmentDoc = gql`
    fragment ExamAssignment on exams {
  id
  status
  title
  date_created
  agencies {
    agencies_id {
      id
      name
    }
  }
  modality {
    id
    title
  }
  specialties {
    categories_id {
      id
      title
    }
  }
  subspecialties {
    categories_id {
      id
      title
    }
  }
  exam_versions(sort: "-date_created", limit: 1) {
    id
    title
    allowed_attempts
    description
    fail_message
    introduction
    passing_message
    passing_score
    questions_to_give
    shuffle_questions
    expiration
    is_proctoring
  }
}
    `;
export const AllExamsForListFragmentDoc = gql`
    fragment AllExamsForList on exams {
  id
  status
  title
  date_created
  agencies {
    agencies_id {
      id
      name
    }
  }
  modality {
    id
    title
  }
  specialties {
    categories_id {
      id
      title
    }
  }
  subspecialties {
    categories_id {
      id
      title
    }
  }
  exam_versions(sort: "-date_created", limit: 1) {
    id
    title
  }
}
    `;
export const UserExamReportsFragmentDoc = gql`
    fragment UserExamReports on junction_directus_users_exams {
  id
  status
  score
  finished_on
  started_on
  expires_on
  due_date
  allowed_attempts
  attempts_used
  import_report_url
  import_cert_url
  expiration_type
  directus_users_id {
    id
    first_name
    last_name
    email
    agencies {
      agencies_id {
        id
        name
      }
      employee_number
      departments {
        departments_id {
          id
          name
        }
      }
    }
  }
  exams_id {
    id
    title
    import_ceu
    exam_versions(sort: "-date_created", limit: 1) {
      id
      title
    }
  }
  exam_versions_id {
    expiration
    contact_hour
  }
  agency {
    date_created
    name
  }
}
    `;
export const UserExamQuestionsFragmentDoc = gql`
    fragment UserExamQuestions on junction_directus_users_exams {
  id
  status
  assigned_on
  started_on
  finished_on
  due_date
  allowed_attempts
  attempts_used
  question_versions_list
  attempt_due
  exams_id {
    id
    title
    import_is_shell
    modality {
      id
      title
    }
    exam_versions(sort: "-date_created", limit: 1) {
      questions_to_give
      shuffle_questions
      id
      title
      description
      passing_score
      is_proctoring
      questions {
        id
      }
      outline {
        id
      }
    }
  }
}
    `;
export const UserExamQuestionsDetailsFragmentDoc = gql`
    fragment UserExamQuestionsDetails on junction_directus_users_exams {
  id
  attempt_due
  started_on
  question_versions_list
  exams_id {
    modality {
      title
    }
    id
    exam_versions(sort: "-date_created", limit: 1) {
      title
    }
  }
}
    `;
export const OverviewExamsFragmentDoc = gql`
    fragment OverviewExams on exams {
  id
  title
  agencies {
    agencies_id {
      name
    }
  }
  directus_users(filter: {status: {_neq: "archived"}}) {
    agency {
      id
    }
    allowed_attempts
    attempts_used
    score
    due_date
    finished_on
    started_on
    status
  }
  exam_versions(sort: "-date_created", limit: 1) {
    allowed_attempts
    passing_score
  }
}
    `;
export const OverviewModulesFragmentDoc = gql`
    fragment OverviewModules on modules_definition {
  id
  title
  agencies {
    id
    agencies_id {
      id
      name
    }
  }
  directus_users(filter: {status: {_neq: "archived"}}) {
    score
    due_date
    finished_on
    started_on
    approved
    status
    attempts_used
    allowed_attempts
  }
}
    `;
export const OverviewDocumentsFragmentDoc = gql`
    fragment OverviewDocuments on documents {
  id
  title
  document {
    id
  }
  agencies {
    agencies_id {
      name
    }
  }
  directus_users(filter: {status: {_neq: "archived"}}) {
    expires_on
    read
  }
}
    `;
export const OverviewPoliciesFragmentDoc = gql`
    fragment OverviewPolicies on policies {
  id
  name
  document {
    id
  }
  agencies {
    agencies_id {
      name
    }
  }
  directus_users(filter: {status: {_neq: "archived"}}) {
    expires_on
    signed_on
    read
  }
}
    `;
export const OverviewSkillsChecklistsFragmentDoc = gql`
    fragment OverviewSkillsChecklists on sc_definitions {
  id
  title
  agency {
    agencies_id {
      name
    }
  }
  directus_users(filter: {status: {_neq: "archived"}}) {
    expires_on
    due_date
    finished_on
    status
  }
}
    `;
export const AllQuestionsForListFragmentDoc = gql`
    fragment AllQuestionsForList on questions {
  id
  type
  title
  category {
    id
    title
  }
  versions(sort: "-date_created", limit: 1) {
    id
    question
    answer
    image {
      id
    }
  }
}
    `;
export const PoliciesFragmentDoc = gql`
    fragment Policies on policies {
  id
  status
  name
  categories {
    id
    categories_id {
      id
      title
    }
  }
  agencies {
    id
    agencies_id {
      id
      name
    }
  }
  document {
    id
    title
    filename_download
    storage
  }
}
    `;
export const PoliciesAssignmentsFragmentDoc = gql`
    fragment PoliciesAssignments on junction_directus_users_policies {
  id
  agency {
    name
  }
  read
  signed_on
  assigned_on
  expires_on
  due_date
  status
  expiration_type
  signature_file {
    id
  }
  directus_users_id {
    id
    first_name
    last_name
    email
  }
  policies_id {
    id
    name
    import_policy_id
    import_policy_url
    categories {
      categories_id {
        id
        title
      }
    }
    document {
      id
      title
      filesize
      storage
      filename_download
    }
  }
}
    `;
export const PoliciesForReportFragmentDoc = gql`
    fragment PoliciesForReport on junction_directus_users_policies {
  id
  read
  signed_on
  assigned_on
  agency {
    name
  }
  expires_on
  directus_users_id {
    id
    first_name
    last_name
  }
  policies_id {
    id
    name
    status
  }
}
    `;
export const SkillChecklistAssignmentFragmentDoc = gql`
    fragment SkillChecklistAssignment on junction_sc_definitions_directus_users {
  id
  status
  assigned_on
  due_date
  expiration_date
  expires_on
  finished_on
  expiration_type
  import_report_url
  import_survey_subscription_id
  sc_definitions_id {
    id
    title
    import_is_shell
    category {
      id
      title
    }
    last_version {
      total_questions
      agreements
      instructions
      questions
      id
      version_number
      description
      expiration
      is_new_format
    }
  }
  skillchecklist_version {
    id
    version_number
    questions
    total_questions
    agreements
    instructions
    description
    is_new_format
  }
  directus_users_id {
    id
    first_name
    last_name
    email
    agencies {
      agencies_id {
        name
      }
      employee_number
    }
  }
  questions
  accept_agreements
  agency {
    id
    name
  }
}
    `;
export const AllDocumentsForListFragmentDoc = gql`
    fragment AllDocumentsForList on documents {
  id
  title
  status
  document {
    type
  }
  categories {
    categories_id {
      id
      title
    }
  }
  agencies {
    agencies_id {
      id
      name
    }
  }
}
    `;
export const DocumentsAssigmentsFragmentDoc = gql`
    fragment DocumentsAssigments on junction_directus_users_documents {
  id
  agency {
    name
  }
  assigned_on
  expiration_type
  status
  directus_users_id {
    id
    first_name
    last_name
  }
  documents_id {
    id
    title
    description
    status
    import_document_id
    import_document_url
    document {
      id
      title
      filename_download
      storage
      filesize
    }
    categories {
      categories_id {
        id
        title
      }
    }
    agencies {
      agencies_id {
        id
        name
      }
    }
  }
  read
  expires_on
}
    `;
export const ModuleAttemptFragmentDoc = gql`
    fragment ModuleAttempt on modules_results {
  id
  score
  attempt
  answers
  finished_on
  status
  started_on
  module_definition_id {
    id
  }
  module_version_id {
    id
  }
  assignment_id {
    id
  }
}
    `;
export const ModuleAssignmentFragmentDoc = gql`
    fragment ModuleAssignment on junction_modules_definition_directus_users {
  id
  modules_definition_id {
    ...ModuleDefinition
  }
  module_version {
    ...ModuleVersion
  }
  finished_on
  assigned_on
  due_date
  expires_on
  status
  started_on
  approved
  score
  cert_code
  allowed_attempts
  attempts_used
  import_cert_url
  expiration_type
  directus_users_id {
    id
    first_name
    last_access
    last_name
    email
    agencies {
      agencies_id {
        id
        name
      }
      employee_number
      departments {
        departments_id {
          id
          name
        }
      }
      locations {
        locations_id {
          id
          name
        }
      }
      supervisors {
        directus_users_id {
          last_name
          first_name
          email
          id
        }
      }
      specialties {
        specialties_id {
          id
          name
        }
      }
    }
  }
  attempts(sort: "-date_created") {
    ...ModuleAttempt
  }
  attempts_used
  last_attempt {
    ...ModuleAttempt
  }
  agency {
    name
    id
    logo {
      id
    }
    certificate_logo {
      id
    }
    enable_certificate_logo
  }
  attempts(sort: "-date_created") {
    ...ModuleAttempt
  }
  attempts_used
  last_attempt {
    ...ModuleAttempt
  }
  agency {
    name
  }
}
    ${ModuleDefinitionFragmentDoc}
${ModuleVersionFragmentDoc}
${ModuleAttemptFragmentDoc}`;
export const ExamFragmentDoc = gql`
    fragment Exam on exams {
  id
  status
  directus_users {
    id
    allowed_attempts
  }
  title
  date_created
  agencies {
    agencies_id {
      id
      name
    }
  }
  modality {
    id
    title
  }
  specialties {
    categories_id {
      id
      title
    }
  }
  subspecialties {
    categories_id {
      id
      title
    }
  }
  exam_versions(sort: "-date_created", limit: 1) {
    id
    title
    allowed_attempts
    description
    fail_message
    introduction
    passing_message
    passing_score
    questions_to_give
    shuffle_questions
    expiration
    is_proctoring
  }
}
    `;
export const SkillChecklistFragmentDoc = gql`
    fragment SkillChecklist on sc_definitions {
  id
  title
  reference_number
  category {
    id
    title
  }
  speciality {
    id
    title
  }
  sub_speciality {
    id
    title
  }
  status
  last_version {
    id
    instructions
    agreements
    questions
    version_number
    total_questions
    description
    expiration
    is_new_format
  }
  agency {
    agencies_id {
      id
      name
    }
  }
}
    `;
export const PoliciesForListingFragmentDoc = gql`
    fragment PoliciesForListing on policies {
  id
  name
  status
  agencies {
    agencies_id {
      name
    }
  }
}
    `;
export const DocumentFragmentDoc = gql`
    fragment Document on documents {
  id
  title
  status
  agencies {
    agencies_id {
      name
    }
  }
}
    `;
export const BundleFragmentDoc = gql`
    fragment Bundle on bundles {
  id
  name
  status
  agency {
    id
    name
  }
  exams {
    exams_id {
      ...Exam
    }
  }
  modules {
    modules_definition_id {
      ...ModuleDefinition
    }
  }
  skills_checklists {
    sc_definitions_id {
      ...SkillChecklist
    }
  }
  policies {
    policies_id {
      ...PoliciesForListing
    }
  }
  documents {
    documents_id {
      ...Document
    }
  }
}
    ${ExamFragmentDoc}
${ModuleDefinitionFragmentDoc}
${SkillChecklistFragmentDoc}
${PoliciesForListingFragmentDoc}
${DocumentFragmentDoc}`;
export const UserForSettingsFragmentDoc = gql`
    fragment UserForSettings on directus_users {
  id
  email
  last_name
  first_name
  agencies {
    id
    employee_number
    date_created
    agencies_id {
      id
    }
    departments {
      departments_id {
        id
        name
      }
    }
    locations {
      locations_id {
        id
        name
      }
    }
    supervisors {
      directus_users_id {
        id
        first_name
        last_name
        email
      }
    }
  }
  role {
    id
    name
    description
  }
  address_line_1
  address_line_2
  city
  state
  zip
  phone
}
    `;
export const DepartmentFragmentDoc = gql`
    fragment Department on departments {
  id
  name
}
    `;
export const DepartmentForListFragmentDoc = gql`
    fragment DepartmentForList on departments {
  id
  name
  agency {
    id
    name
  }
}
    `;
export const LocationFragmentDoc = gql`
    fragment Location on locations {
  id
  name
}
    `;
export const LocationForListFragmentDoc = gql`
    fragment LocationForList on locations {
  id
  name
  agency {
    id
    name
  }
}
    `;
export const SpecialtyFragmentDoc = gql`
    fragment Specialty on specialties {
  id
  name
}
    `;
export const SpecialtyForListFragmentDoc = gql`
    fragment SpecialtyForList on specialties {
  id
  name
  date_created
}
    `;
export const MappingFragmentDoc = gql`
    fragment mapping on data_migration_mappings {
  id
  content_type
  source_name
  target_id_string
  target_id_number
  exclude
}
    `;
export const SysUsersForComplianceSummaryDocument = gql`
    query sysUsersForComplianceSummary($completedAssignmentsFilter: directus_users_filter, $incompletedAssignmentsFilter: directus_users_filter, $noLoginFilters: directus_users_filter, $allAttemptsUsedFilters: directus_users_filter) {
  cliniciansWithCompletedAssignments: users(
    sort: "last_access"
    filter: $completedAssignmentsFilter
  ) {
    ...UserForComplianceSummary
  }
  cliniciansWithIncompletedAssignments: users(
    sort: "last_access"
    filter: $incompletedAssignmentsFilter
  ) {
    ...UserForComplianceSummary
  }
  assignmentsAwaitingUserLogin: users(
    sort: "last_access"
    filter: $noLoginFilters
  ) {
    ...UserForComplianceSummary
  }
  allAttemptsUsed: users(sort: "last_access", filter: $allAttemptsUsedFilters) {
    id
    first_name
    last_name
    agencies {
      id
      specialties {
        specialties_id {
          id
          name
        }
      }
      locations {
        locations_id {
          id
          name
        }
      }
      departments {
        departments_id {
          id
          name
        }
      }
      agencies_id {
        id
        name
      }
      supervisors {
        directus_users_id {
          id
          first_name
          last_name
        }
      }
    }
    email
    exams(filter: {status: {_in: ["FAILED", "COMPLETED"]}}) {
      id
      status
      allowed_attempts
      attempts_used
      due_date
      expires_on
      assigned_on
      status
      exams_id {
        title
      }
      agency {
        id
      }
    }
    modules(filter: {status: {_eq: "FINISHED"}}) {
      id
      status
      allowed_attempts
      attempts_used
      assigned_on
      expires_on
      due_date
      modules_definition_id {
        title
      }
      agency {
        id
      }
    }
  }
}
    ${UserForComplianceSummaryFragmentDoc}`;

/**
 * __useSysUsersForComplianceSummaryQuery__
 *
 * To run a query within a React component, call `useSysUsersForComplianceSummaryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersForComplianceSummaryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersForComplianceSummaryQuery({
 *   variables: {
 *      completedAssignmentsFilter: // value for 'completedAssignmentsFilter'
 *      incompletedAssignmentsFilter: // value for 'incompletedAssignmentsFilter'
 *      noLoginFilters: // value for 'noLoginFilters'
 *      allAttemptsUsedFilters: // value for 'allAttemptsUsedFilters'
 *   },
 * });
 */
export function useSysUsersForComplianceSummaryQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersForComplianceSummaryQuery, SysUsersForComplianceSummaryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersForComplianceSummaryQuery, SysUsersForComplianceSummaryQueryVariables>(SysUsersForComplianceSummaryDocument, options);
      }
export function useSysUsersForComplianceSummaryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersForComplianceSummaryQuery, SysUsersForComplianceSummaryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersForComplianceSummaryQuery, SysUsersForComplianceSummaryQueryVariables>(SysUsersForComplianceSummaryDocument, options);
        }
export type SysUsersForComplianceSummaryQueryHookResult = ReturnType<typeof useSysUsersForComplianceSummaryQuery>;
export type SysUsersForComplianceSummaryLazyQueryHookResult = ReturnType<typeof useSysUsersForComplianceSummaryLazyQuery>;
export type SysUsersForComplianceSummaryQueryResult = Apollo.QueryResult<SysUsersForComplianceSummaryQuery, SysUsersForComplianceSummaryQueryVariables>;
export const SysUserForCreationDocument = gql`
    query sysUserForCreation($email: String!) {
  users(filter: {email: {_istarts_with: $email}}) {
    id
    email
    role {
      id
    }
    agencies {
      agencies_id {
        name
        id
      }
    }
  }
}
    `;

/**
 * __useSysUserForCreationQuery__
 *
 * To run a query within a React component, call `useSysUserForCreationQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserForCreationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserForCreationQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSysUserForCreationQuery(baseOptions: Apollo.QueryHookOptions<SysUserForCreationQuery, SysUserForCreationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserForCreationQuery, SysUserForCreationQueryVariables>(SysUserForCreationDocument, options);
      }
export function useSysUserForCreationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserForCreationQuery, SysUserForCreationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserForCreationQuery, SysUserForCreationQueryVariables>(SysUserForCreationDocument, options);
        }
export type SysUserForCreationQueryHookResult = ReturnType<typeof useSysUserForCreationQuery>;
export type SysUserForCreationLazyQueryHookResult = ReturnType<typeof useSysUserForCreationLazyQuery>;
export type SysUserForCreationQueryResult = Apollo.QueryResult<SysUserForCreationQuery, SysUserForCreationQueryVariables>;
export const SysUserDocument = gql`
    query sysUser($id: String!) {
  users(filter: {id: {_eq: $id}}) {
    id
    first_name
    last_name
    email
    role {
      id
      name
    }
  }
}
    `;

/**
 * __useSysUserQuery__
 *
 * To run a query within a React component, call `useSysUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysUserQuery(baseOptions: Apollo.QueryHookOptions<SysUserQuery, SysUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserQuery, SysUserQueryVariables>(SysUserDocument, options);
      }
export function useSysUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserQuery, SysUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserQuery, SysUserQueryVariables>(SysUserDocument, options);
        }
export type SysUserQueryHookResult = ReturnType<typeof useSysUserQuery>;
export type SysUserLazyQueryHookResult = ReturnType<typeof useSysUserLazyQuery>;
export type SysUserQueryResult = Apollo.QueryResult<SysUserQuery, SysUserQueryVariables>;
export const SysUsersTableDocument = gql`
    query sysUsersTable($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: directus_users_filter) {
  users(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...sysUsersTableFragment
  }
  users_aggregated(search: $search, filter: $filter) {
    countDistinct {
      id
    }
  }
}
    ${SysUsersTableFragmentFragmentDoc}`;

/**
 * __useSysUsersTableQuery__
 *
 * To run a query within a React component, call `useSysUsersTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersTableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersTableQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersTableQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersTableQuery, SysUsersTableQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersTableQuery, SysUsersTableQueryVariables>(SysUsersTableDocument, options);
      }
export function useSysUsersTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersTableQuery, SysUsersTableQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersTableQuery, SysUsersTableQueryVariables>(SysUsersTableDocument, options);
        }
export type SysUsersTableQueryHookResult = ReturnType<typeof useSysUsersTableQuery>;
export type SysUsersTableLazyQueryHookResult = ReturnType<typeof useSysUsersTableLazyQuery>;
export type SysUsersTableQueryResult = Apollo.QueryResult<SysUsersTableQuery, SysUsersTableQueryVariables>;
export const SysUsersDocument = gql`
    query sysUsers($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: directus_users_filter) {
  users(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...UserForAssignment
  }
}
    ${UserForAssignmentFragmentDoc}`;

/**
 * __useSysUsersQuery__
 *
 * To run a query within a React component, call `useSysUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersQuery, SysUsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersQuery, SysUsersQueryVariables>(SysUsersDocument, options);
      }
export function useSysUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersQuery, SysUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersQuery, SysUsersQueryVariables>(SysUsersDocument, options);
        }
export type SysUsersQueryHookResult = ReturnType<typeof useSysUsersQuery>;
export type SysUsersLazyQueryHookResult = ReturnType<typeof useSysUsersLazyQuery>;
export type SysUsersQueryResult = Apollo.QueryResult<SysUsersQuery, SysUsersQueryVariables>;
export const SysUserForAssigmentDocument = gql`
    query sysUserForAssigment($id: String!) {
  users(filter: {id: {_eq: $id}}) {
    ...UserForAssignment
  }
}
    ${UserForAssignmentFragmentDoc}`;

/**
 * __useSysUserForAssigmentQuery__
 *
 * To run a query within a React component, call `useSysUserForAssigmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserForAssigmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserForAssigmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysUserForAssigmentQuery(baseOptions: Apollo.QueryHookOptions<SysUserForAssigmentQuery, SysUserForAssigmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserForAssigmentQuery, SysUserForAssigmentQueryVariables>(SysUserForAssigmentDocument, options);
      }
export function useSysUserForAssigmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserForAssigmentQuery, SysUserForAssigmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserForAssigmentQuery, SysUserForAssigmentQueryVariables>(SysUserForAssigmentDocument, options);
        }
export type SysUserForAssigmentQueryHookResult = ReturnType<typeof useSysUserForAssigmentQuery>;
export type SysUserForAssigmentLazyQueryHookResult = ReturnType<typeof useSysUserForAssigmentLazyQuery>;
export type SysUserForAssigmentQueryResult = Apollo.QueryResult<SysUserForAssigmentQuery, SysUserForAssigmentQueryVariables>;
export const SysUsersExamsDocument = gql`
    query sysUsersExams($userFilters: directus_users_filter, $examFilters: junction_directus_users_exams_filter) {
  users(filter: $userFilters) {
    exams(filter: $examFilters, sort: "-assigned_on") {
      ...userExams
    }
  }
}
    ${UserExamsFragmentDoc}`;

/**
 * __useSysUsersExamsQuery__
 *
 * To run a query within a React component, call `useSysUsersExamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersExamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersExamsQuery({
 *   variables: {
 *      userFilters: // value for 'userFilters'
 *      examFilters: // value for 'examFilters'
 *   },
 * });
 */
export function useSysUsersExamsQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersExamsQuery, SysUsersExamsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersExamsQuery, SysUsersExamsQueryVariables>(SysUsersExamsDocument, options);
      }
export function useSysUsersExamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersExamsQuery, SysUsersExamsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersExamsQuery, SysUsersExamsQueryVariables>(SysUsersExamsDocument, options);
        }
export type SysUsersExamsQueryHookResult = ReturnType<typeof useSysUsersExamsQuery>;
export type SysUsersExamsLazyQueryHookResult = ReturnType<typeof useSysUsersExamsLazyQuery>;
export type SysUsersExamsQueryResult = Apollo.QueryResult<SysUsersExamsQuery, SysUsersExamsQueryVariables>;
export const SysUsersTotalPagesDocument = gql`
    query sysUsersTotalPages($search: String) {
  users_aggregated(search: $search) {
    count {
      id
    }
  }
}
    `;

/**
 * __useSysUsersTotalPagesQuery__
 *
 * To run a query within a React component, call `useSysUsersTotalPagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersTotalPagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersTotalPagesQuery({
 *   variables: {
 *      search: // value for 'search'
 *   },
 * });
 */
export function useSysUsersTotalPagesQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersTotalPagesQuery, SysUsersTotalPagesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersTotalPagesQuery, SysUsersTotalPagesQueryVariables>(SysUsersTotalPagesDocument, options);
      }
export function useSysUsersTotalPagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersTotalPagesQuery, SysUsersTotalPagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersTotalPagesQuery, SysUsersTotalPagesQueryVariables>(SysUsersTotalPagesDocument, options);
        }
export type SysUsersTotalPagesQueryHookResult = ReturnType<typeof useSysUsersTotalPagesQuery>;
export type SysUsersTotalPagesLazyQueryHookResult = ReturnType<typeof useSysUsersTotalPagesLazyQuery>;
export type SysUsersTotalPagesQueryResult = Apollo.QueryResult<SysUsersTotalPagesQuery, SysUsersTotalPagesQueryVariables>;
export const SysUsersForReportsDocument = gql`
    query sysUsersForReports($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: directus_users_filter) {
  users: users(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...UserForReports
  }
  userTotal: users_aggregated(search: $search, filter: $filter) {
    countDistinct {
      id
    }
  }
}
    ${UserForReportsFragmentDoc}`;

/**
 * __useSysUsersForReportsQuery__
 *
 * To run a query within a React component, call `useSysUsersForReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersForReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersForReportsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersForReportsQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersForReportsQuery, SysUsersForReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersForReportsQuery, SysUsersForReportsQueryVariables>(SysUsersForReportsDocument, options);
      }
export function useSysUsersForReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersForReportsQuery, SysUsersForReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersForReportsQuery, SysUsersForReportsQueryVariables>(SysUsersForReportsDocument, options);
        }
export type SysUsersForReportsQueryHookResult = ReturnType<typeof useSysUsersForReportsQuery>;
export type SysUsersForReportsLazyQueryHookResult = ReturnType<typeof useSysUsersForReportsLazyQuery>;
export type SysUsersForReportsQueryResult = Apollo.QueryResult<SysUsersForReportsQuery, SysUsersForReportsQueryVariables>;
export const SysUsersForReportsExportDocument = gql`
    query sysUsersForReportsExport($limit: Int, $offset: Int, $sort: [String], $search: String, $filter: directus_users_filter) {
  users(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...UserForReports
  }
}
    ${UserForReportsFragmentDoc}`;

/**
 * __useSysUsersForReportsExportQuery__
 *
 * To run a query within a React component, call `useSysUsersForReportsExportQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersForReportsExportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersForReportsExportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersForReportsExportQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersForReportsExportQuery, SysUsersForReportsExportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersForReportsExportQuery, SysUsersForReportsExportQueryVariables>(SysUsersForReportsExportDocument, options);
      }
export function useSysUsersForReportsExportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersForReportsExportQuery, SysUsersForReportsExportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersForReportsExportQuery, SysUsersForReportsExportQueryVariables>(SysUsersForReportsExportDocument, options);
        }
export type SysUsersForReportsExportQueryHookResult = ReturnType<typeof useSysUsersForReportsExportQuery>;
export type SysUsersForReportsExportLazyQueryHookResult = ReturnType<typeof useSysUsersForReportsExportLazyQuery>;
export type SysUsersForReportsExportQueryResult = Apollo.QueryResult<SysUsersForReportsExportQuery, SysUsersForReportsExportQueryVariables>;
export const SysUserForCrudDocument = gql`
    query sysUserForCRUD($filter: directus_users_filter) {
  users(filter: $filter) {
    ...UserForCRUD
  }
}
    ${UserForCrudFragmentDoc}`;

/**
 * __useSysUserForCrudQuery__
 *
 * To run a query within a React component, call `useSysUserForCrudQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserForCrudQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserForCrudQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUserForCrudQuery(baseOptions?: Apollo.QueryHookOptions<SysUserForCrudQuery, SysUserForCrudQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserForCrudQuery, SysUserForCrudQueryVariables>(SysUserForCrudDocument, options);
      }
export function useSysUserForCrudLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserForCrudQuery, SysUserForCrudQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserForCrudQuery, SysUserForCrudQueryVariables>(SysUserForCrudDocument, options);
        }
export type SysUserForCrudQueryHookResult = ReturnType<typeof useSysUserForCrudQuery>;
export type SysUserForCrudLazyQueryHookResult = ReturnType<typeof useSysUserForCrudLazyQuery>;
export type SysUserForCrudQueryResult = Apollo.QueryResult<SysUserForCrudQuery, SysUserForCrudQueryVariables>;
export const SysDeleteUserDocument = gql`
    mutation sysDeleteUser($id: ID!) {
  update_users_item(id: $id, data: {status: "archived"}) {
    id
    status
  }
}
    `;
export type SysDeleteUserMutationFn = Apollo.MutationFunction<SysDeleteUserMutation, SysDeleteUserMutationVariables>;

/**
 * __useSysDeleteUserMutation__
 *
 * To run a mutation, you first call `useSysDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSysDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sysDeleteUserMutation, { data, loading, error }] = useSysDeleteUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<SysDeleteUserMutation, SysDeleteUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SysDeleteUserMutation, SysDeleteUserMutationVariables>(SysDeleteUserDocument, options);
      }
export type SysDeleteUserMutationHookResult = ReturnType<typeof useSysDeleteUserMutation>;
export type SysDeleteUserMutationResult = Apollo.MutationResult<SysDeleteUserMutation>;
export type SysDeleteUserMutationOptions = Apollo.BaseMutationOptions<SysDeleteUserMutation, SysDeleteUserMutationVariables>;
export const SysUpdateUserDocument = gql`
    mutation sysUpdateUser($id: ID!, $data: update_directus_users_input!) {
  update_users_item(id: $id, data: $data) {
    id
  }
}
    `;
export type SysUpdateUserMutationFn = Apollo.MutationFunction<SysUpdateUserMutation, SysUpdateUserMutationVariables>;

/**
 * __useSysUpdateUserMutation__
 *
 * To run a mutation, you first call `useSysUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSysUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sysUpdateUserMutation, { data, loading, error }] = useSysUpdateUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSysUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<SysUpdateUserMutation, SysUpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SysUpdateUserMutation, SysUpdateUserMutationVariables>(SysUpdateUserDocument, options);
      }
export type SysUpdateUserMutationHookResult = ReturnType<typeof useSysUpdateUserMutation>;
export type SysUpdateUserMutationResult = Apollo.MutationResult<SysUpdateUserMutation>;
export type SysUpdateUserMutationOptions = Apollo.BaseMutationOptions<SysUpdateUserMutation, SysUpdateUserMutationVariables>;
export const SysCreateUserDocument = gql`
    mutation sysCreateUser($data: create_directus_users_input!) {
  create_users_item(data: $data) {
    ...User
  }
}
    ${UserFragmentDoc}`;
export type SysCreateUserMutationFn = Apollo.MutationFunction<SysCreateUserMutation, SysCreateUserMutationVariables>;

/**
 * __useSysCreateUserMutation__
 *
 * To run a mutation, you first call `useSysCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSysCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sysCreateUserMutation, { data, loading, error }] = useSysCreateUserMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSysCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<SysCreateUserMutation, SysCreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SysCreateUserMutation, SysCreateUserMutationVariables>(SysCreateUserDocument, options);
      }
export type SysCreateUserMutationHookResult = ReturnType<typeof useSysCreateUserMutation>;
export type SysCreateUserMutationResult = Apollo.MutationResult<SysCreateUserMutation>;
export type SysCreateUserMutationOptions = Apollo.BaseMutationOptions<SysCreateUserMutation, SysCreateUserMutationVariables>;
export const CreateUserForAgencyDocument = gql`
    mutation createUserForAgency($data: create_junction_directus_users_agencies_input!) {
  create_junction_directus_users_agencies_item(data: $data) {
    id
  }
}
    `;
export type CreateUserForAgencyMutationFn = Apollo.MutationFunction<CreateUserForAgencyMutation, CreateUserForAgencyMutationVariables>;

/**
 * __useCreateUserForAgencyMutation__
 *
 * To run a mutation, you first call `useCreateUserForAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserForAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserForAgencyMutation, { data, loading, error }] = useCreateUserForAgencyMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateUserForAgencyMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserForAgencyMutation, CreateUserForAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserForAgencyMutation, CreateUserForAgencyMutationVariables>(CreateUserForAgencyDocument, options);
      }
export type CreateUserForAgencyMutationHookResult = ReturnType<typeof useCreateUserForAgencyMutation>;
export type CreateUserForAgencyMutationResult = Apollo.MutationResult<CreateUserForAgencyMutation>;
export type CreateUserForAgencyMutationOptions = Apollo.BaseMutationOptions<CreateUserForAgencyMutation, CreateUserForAgencyMutationVariables>;
export const UpdateUserForAgencyDocument = gql`
    mutation updateUserForAgency($id: ID!, $data: update_junction_directus_users_agencies_input!) {
  update_junction_directus_users_agencies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateUserForAgencyMutationFn = Apollo.MutationFunction<UpdateUserForAgencyMutation, UpdateUserForAgencyMutationVariables>;

/**
 * __useUpdateUserForAgencyMutation__
 *
 * To run a mutation, you first call `useUpdateUserForAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserForAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserForAgencyMutation, { data, loading, error }] = useUpdateUserForAgencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateUserForAgencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserForAgencyMutation, UpdateUserForAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserForAgencyMutation, UpdateUserForAgencyMutationVariables>(UpdateUserForAgencyDocument, options);
      }
export type UpdateUserForAgencyMutationHookResult = ReturnType<typeof useUpdateUserForAgencyMutation>;
export type UpdateUserForAgencyMutationResult = Apollo.MutationResult<UpdateUserForAgencyMutation>;
export type UpdateUserForAgencyMutationOptions = Apollo.BaseMutationOptions<UpdateUserForAgencyMutation, UpdateUserForAgencyMutationVariables>;
export const SysUserForClinicianDocument = gql`
    query sysUserForClinician($id: String!) {
  users(filter: {id: {_eq: $id}}) {
    ...userForClinician
  }
}
    ${UserForClinicianFragmentDoc}`;

/**
 * __useSysUserForClinicianQuery__
 *
 * To run a query within a React component, call `useSysUserForClinicianQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserForClinicianQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserForClinicianQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysUserForClinicianQuery(baseOptions: Apollo.QueryHookOptions<SysUserForClinicianQuery, SysUserForClinicianQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserForClinicianQuery, SysUserForClinicianQueryVariables>(SysUserForClinicianDocument, options);
      }
export function useSysUserForClinicianLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserForClinicianQuery, SysUserForClinicianQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserForClinicianQuery, SysUserForClinicianQueryVariables>(SysUserForClinicianDocument, options);
        }
export type SysUserForClinicianQueryHookResult = ReturnType<typeof useSysUserForClinicianQuery>;
export type SysUserForClinicianLazyQueryHookResult = ReturnType<typeof useSysUserForClinicianLazyQuery>;
export type SysUserForClinicianQueryResult = Apollo.QueryResult<SysUserForClinicianQuery, SysUserForClinicianQueryVariables>;
export const SysUpdateForClinicianUserDocument = gql`
    mutation sysUpdateForClinicianUser($id: ID!, $data: update_directus_users_input!) {
  update_users_item(id: $id, data: $data) {
    id
  }
}
    `;
export type SysUpdateForClinicianUserMutationFn = Apollo.MutationFunction<SysUpdateForClinicianUserMutation, SysUpdateForClinicianUserMutationVariables>;

/**
 * __useSysUpdateForClinicianUserMutation__
 *
 * To run a mutation, you first call `useSysUpdateForClinicianUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSysUpdateForClinicianUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sysUpdateForClinicianUserMutation, { data, loading, error }] = useSysUpdateForClinicianUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSysUpdateForClinicianUserMutation(baseOptions?: Apollo.MutationHookOptions<SysUpdateForClinicianUserMutation, SysUpdateForClinicianUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SysUpdateForClinicianUserMutation, SysUpdateForClinicianUserMutationVariables>(SysUpdateForClinicianUserDocument, options);
      }
export type SysUpdateForClinicianUserMutationHookResult = ReturnType<typeof useSysUpdateForClinicianUserMutation>;
export type SysUpdateForClinicianUserMutationResult = Apollo.MutationResult<SysUpdateForClinicianUserMutation>;
export type SysUpdateForClinicianUserMutationOptions = Apollo.BaseMutationOptions<SysUpdateForClinicianUserMutation, SysUpdateForClinicianUserMutationVariables>;
export const SysUserDetailsDocument = gql`
    query sysUserDetails($filter: directus_users_filter, $filter_agency: junction_directus_users_agencies_filter, $filter_exams: junction_directus_users_exams_filter, $filter_modules: junction_modules_definition_directus_users_filter, $filter_sc: junction_sc_definitions_directus_users_filter, $filter_policies: junction_directus_users_policies_filter, $filter_documents: junction_directus_users_documents_filter) {
  users(filter: $filter) {
    ...sysUserForReportDetails
    agencies(filter: $filter_agency) {
      id
      agencies_id {
        id
        name
      }
      date_created
      employee_number
    }
    exams(filter: $filter_exams) {
      finished_on
      assigned_on
      score
      status
      attempts_used
      allowed_attempts
      started_on
      expires_on
      exams_id {
        id
        title
      }
      agency {
        name
      }
      exam_versions_id {
        expiration
      }
    }
    modules(filter: $filter_modules) {
      id
      agency {
        name
      }
      started_on
      score
      attempts_used
      allowed_attempts
      modules_definition_id {
        id
        title
      }
      module_version {
        expiration
        allowed_attempts
      }
      expires_on
      status
      finished_on
    }
    sc_definitions(filter: $filter_sc) {
      id
      agency {
        name
      }
      assigned_on
      finished_on
      expires_on
      sc_definitions_id {
        id
        title
      }
      status
    }
    policies(filter: $filter_policies) {
      id
      agency {
        name
      }
      signed_on
      expires_on
      read
      assigned_on
      policies_id {
        id
        name
      }
    }
    documents(filter: $filter_documents) {
      id
      assigned_on
      agency {
        name
      }
      read
      expires_on
      assigned_on
      documents_id {
        id
        title
      }
    }
  }
}
    ${SysUserForReportDetailsFragmentDoc}`;

/**
 * __useSysUserDetailsQuery__
 *
 * To run a query within a React component, call `useSysUserDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserDetailsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      filter_agency: // value for 'filter_agency'
 *      filter_exams: // value for 'filter_exams'
 *      filter_modules: // value for 'filter_modules'
 *      filter_sc: // value for 'filter_sc'
 *      filter_policies: // value for 'filter_policies'
 *      filter_documents: // value for 'filter_documents'
 *   },
 * });
 */
export function useSysUserDetailsQuery(baseOptions?: Apollo.QueryHookOptions<SysUserDetailsQuery, SysUserDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserDetailsQuery, SysUserDetailsQueryVariables>(SysUserDetailsDocument, options);
      }
export function useSysUserDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserDetailsQuery, SysUserDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserDetailsQuery, SysUserDetailsQueryVariables>(SysUserDetailsDocument, options);
        }
export type SysUserDetailsQueryHookResult = ReturnType<typeof useSysUserDetailsQuery>;
export type SysUserDetailsLazyQueryHookResult = ReturnType<typeof useSysUserDetailsLazyQuery>;
export type SysUserDetailsQueryResult = Apollo.QueryResult<SysUserDetailsQuery, SysUserDetailsQueryVariables>;
export const GetUserDetailsAvgDocument = gql`
    query getUserDetailsAvg($examFilter: junction_directus_users_exams_filter, $modulesFilter: junction_modules_definition_directus_users_filter) {
  exams: junction_directus_users_exams_aggregated(filter: $examFilter) {
    avg {
      allowed_attempts
      attempts_used
      score
    }
  }
  modules: junction_modules_definition_directus_users_aggregated(
    filter: $modulesFilter
  ) {
    avg {
      allowed_attempts
      attempts_used
      score
    }
  }
}
    `;

/**
 * __useGetUserDetailsAvgQuery__
 *
 * To run a query within a React component, call `useGetUserDetailsAvgQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserDetailsAvgQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserDetailsAvgQuery({
 *   variables: {
 *      examFilter: // value for 'examFilter'
 *      modulesFilter: // value for 'modulesFilter'
 *   },
 * });
 */
export function useGetUserDetailsAvgQuery(baseOptions?: Apollo.QueryHookOptions<GetUserDetailsAvgQuery, GetUserDetailsAvgQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserDetailsAvgQuery, GetUserDetailsAvgQueryVariables>(GetUserDetailsAvgDocument, options);
      }
export function useGetUserDetailsAvgLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserDetailsAvgQuery, GetUserDetailsAvgQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserDetailsAvgQuery, GetUserDetailsAvgQueryVariables>(GetUserDetailsAvgDocument, options);
        }
export type GetUserDetailsAvgQueryHookResult = ReturnType<typeof useGetUserDetailsAvgQuery>;
export type GetUserDetailsAvgLazyQueryHookResult = ReturnType<typeof useGetUserDetailsAvgLazyQuery>;
export type GetUserDetailsAvgQueryResult = Apollo.QueryResult<GetUserDetailsAvgQuery, GetUserDetailsAvgQueryVariables>;
export const GetAllAgenciesDocument = gql`
    query getAllAgencies($offset: Int, $sort: [String], $search: String, $filter: agencies_filter) {
  agencies(
    limit: -1
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...Agency
  }
}
    ${AgencyFragmentDoc}`;

/**
 * __useGetAllAgenciesQuery__
 *
 * To run a query within a React component, call `useGetAllAgenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllAgenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllAgenciesQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllAgenciesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllAgenciesQuery, GetAllAgenciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllAgenciesQuery, GetAllAgenciesQueryVariables>(GetAllAgenciesDocument, options);
      }
export function useGetAllAgenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllAgenciesQuery, GetAllAgenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllAgenciesQuery, GetAllAgenciesQueryVariables>(GetAllAgenciesDocument, options);
        }
export type GetAllAgenciesQueryHookResult = ReturnType<typeof useGetAllAgenciesQuery>;
export type GetAllAgenciesLazyQueryHookResult = ReturnType<typeof useGetAllAgenciesLazyQuery>;
export type GetAllAgenciesQueryResult = Apollo.QueryResult<GetAllAgenciesQuery, GetAllAgenciesQueryVariables>;
export const GetAllAgenciesForAdminDocument = gql`
    query getAllAgenciesForAdmin($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: agencies_filter) {
  agencies(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...AgencyForAdmin
  }
  agencies_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    ${AgencyForAdminFragmentDoc}`;

/**
 * __useGetAllAgenciesForAdminQuery__
 *
 * To run a query within a React component, call `useGetAllAgenciesForAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllAgenciesForAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllAgenciesForAdminQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllAgenciesForAdminQuery(baseOptions?: Apollo.QueryHookOptions<GetAllAgenciesForAdminQuery, GetAllAgenciesForAdminQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllAgenciesForAdminQuery, GetAllAgenciesForAdminQueryVariables>(GetAllAgenciesForAdminDocument, options);
      }
export function useGetAllAgenciesForAdminLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllAgenciesForAdminQuery, GetAllAgenciesForAdminQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllAgenciesForAdminQuery, GetAllAgenciesForAdminQueryVariables>(GetAllAgenciesForAdminDocument, options);
        }
export type GetAllAgenciesForAdminQueryHookResult = ReturnType<typeof useGetAllAgenciesForAdminQuery>;
export type GetAllAgenciesForAdminLazyQueryHookResult = ReturnType<typeof useGetAllAgenciesForAdminLazyQuery>;
export type GetAllAgenciesForAdminQueryResult = Apollo.QueryResult<GetAllAgenciesForAdminQuery, GetAllAgenciesForAdminQueryVariables>;
export const AgencyDocument = gql`
    query Agency {
  agencies {
    id
    name
    custom_allowed_attempts_exams
  }
}
    `;

/**
 * __useAgencyQuery__
 *
 * To run a query within a React component, call `useAgencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useAgencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAgencyQuery({
 *   variables: {
 *   },
 * });
 */
export function useAgencyQuery(baseOptions?: Apollo.QueryHookOptions<AgencyQuery, AgencyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AgencyQuery, AgencyQueryVariables>(AgencyDocument, options);
      }
export function useAgencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AgencyQuery, AgencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AgencyQuery, AgencyQueryVariables>(AgencyDocument, options);
        }
export type AgencyQueryHookResult = ReturnType<typeof useAgencyQuery>;
export type AgencyLazyQueryHookResult = ReturnType<typeof useAgencyLazyQuery>;
export type AgencyQueryResult = Apollo.QueryResult<AgencyQuery, AgencyQueryVariables>;
export const GetAllAgenciesForBillingDocument = gql`
    query getAllAgenciesForBilling($limit: Int, $offset: Int, $search: String) {
  agencies(
    limit: $limit
    offset: $offset
    sort: "name"
    search: $search
    filter: {status: {_eq: "published"}}
  ) {
    id
    name
  }
}
    `;

/**
 * __useGetAllAgenciesForBillingQuery__
 *
 * To run a query within a React component, call `useGetAllAgenciesForBillingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllAgenciesForBillingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllAgenciesForBillingQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetAllAgenciesForBillingQuery(baseOptions?: Apollo.QueryHookOptions<GetAllAgenciesForBillingQuery, GetAllAgenciesForBillingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllAgenciesForBillingQuery, GetAllAgenciesForBillingQueryVariables>(GetAllAgenciesForBillingDocument, options);
      }
export function useGetAllAgenciesForBillingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllAgenciesForBillingQuery, GetAllAgenciesForBillingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllAgenciesForBillingQuery, GetAllAgenciesForBillingQueryVariables>(GetAllAgenciesForBillingDocument, options);
        }
export type GetAllAgenciesForBillingQueryHookResult = ReturnType<typeof useGetAllAgenciesForBillingQuery>;
export type GetAllAgenciesForBillingLazyQueryHookResult = ReturnType<typeof useGetAllAgenciesForBillingLazyQuery>;
export type GetAllAgenciesForBillingQueryResult = Apollo.QueryResult<GetAllAgenciesForBillingQuery, GetAllAgenciesForBillingQueryVariables>;
export const GetAgencyByIdDocument = gql`
    query getAgencyById($id: ID!) {
  agencies_by_id(id: $id) {
    id
    name
    custom_allowed_attempts_exams
  }
}
    `;

/**
 * __useGetAgencyByIdQuery__
 *
 * To run a query within a React component, call `useGetAgencyByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgencyByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgencyByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAgencyByIdQuery(baseOptions: Apollo.QueryHookOptions<GetAgencyByIdQuery, GetAgencyByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAgencyByIdQuery, GetAgencyByIdQueryVariables>(GetAgencyByIdDocument, options);
      }
export function useGetAgencyByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAgencyByIdQuery, GetAgencyByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAgencyByIdQuery, GetAgencyByIdQueryVariables>(GetAgencyByIdDocument, options);
        }
export type GetAgencyByIdQueryHookResult = ReturnType<typeof useGetAgencyByIdQuery>;
export type GetAgencyByIdLazyQueryHookResult = ReturnType<typeof useGetAgencyByIdLazyQuery>;
export type GetAgencyByIdQueryResult = Apollo.QueryResult<GetAgencyByIdQuery, GetAgencyByIdQueryVariables>;
export const GetLicensesDocument = gql`
    query getLicenses($id: ID!) {
  agencies_by_id(id: $id) {
    id
    directus_users {
      id
    }
  }
}
    `;

/**
 * __useGetLicensesQuery__
 *
 * To run a query within a React component, call `useGetLicensesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLicensesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLicensesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLicensesQuery(baseOptions: Apollo.QueryHookOptions<GetLicensesQuery, GetLicensesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLicensesQuery, GetLicensesQueryVariables>(GetLicensesDocument, options);
      }
export function useGetLicensesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLicensesQuery, GetLicensesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLicensesQuery, GetLicensesQueryVariables>(GetLicensesDocument, options);
        }
export type GetLicensesQueryHookResult = ReturnType<typeof useGetLicensesQuery>;
export type GetLicensesLazyQueryHookResult = ReturnType<typeof useGetLicensesLazyQuery>;
export type GetLicensesQueryResult = Apollo.QueryResult<GetLicensesQuery, GetLicensesQueryVariables>;
export const CreateAgencyDocument = gql`
    mutation createAgency($data: create_agencies_input!) {
  create_agencies_item(data: $data) {
    id
  }
}
    `;
export type CreateAgencyMutationFn = Apollo.MutationFunction<CreateAgencyMutation, CreateAgencyMutationVariables>;

/**
 * __useCreateAgencyMutation__
 *
 * To run a mutation, you first call `useCreateAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAgencyMutation, { data, loading, error }] = useCreateAgencyMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateAgencyMutation(baseOptions?: Apollo.MutationHookOptions<CreateAgencyMutation, CreateAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAgencyMutation, CreateAgencyMutationVariables>(CreateAgencyDocument, options);
      }
export type CreateAgencyMutationHookResult = ReturnType<typeof useCreateAgencyMutation>;
export type CreateAgencyMutationResult = Apollo.MutationResult<CreateAgencyMutation>;
export type CreateAgencyMutationOptions = Apollo.BaseMutationOptions<CreateAgencyMutation, CreateAgencyMutationVariables>;
export const UpdateAgencyDocument = gql`
    mutation updateAgency($id: ID!, $data: update_agencies_input!) {
  update_agencies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateAgencyMutationFn = Apollo.MutationFunction<UpdateAgencyMutation, UpdateAgencyMutationVariables>;

/**
 * __useUpdateAgencyMutation__
 *
 * To run a mutation, you first call `useUpdateAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgencyMutation, { data, loading, error }] = useUpdateAgencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAgencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAgencyMutation, UpdateAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAgencyMutation, UpdateAgencyMutationVariables>(UpdateAgencyDocument, options);
      }
export type UpdateAgencyMutationHookResult = ReturnType<typeof useUpdateAgencyMutation>;
export type UpdateAgencyMutationResult = Apollo.MutationResult<UpdateAgencyMutation>;
export type UpdateAgencyMutationOptions = Apollo.BaseMutationOptions<UpdateAgencyMutation, UpdateAgencyMutationVariables>;
export const DeleteAgencyDocument = gql`
    mutation deleteAgency($id: ID!) {
  update_agencies_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteAgencyMutationFn = Apollo.MutationFunction<DeleteAgencyMutation, DeleteAgencyMutationVariables>;

/**
 * __useDeleteAgencyMutation__
 *
 * To run a mutation, you first call `useDeleteAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAgencyMutation, { data, loading, error }] = useDeleteAgencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteAgencyMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAgencyMutation, DeleteAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteAgencyMutation, DeleteAgencyMutationVariables>(DeleteAgencyDocument, options);
      }
export type DeleteAgencyMutationHookResult = ReturnType<typeof useDeleteAgencyMutation>;
export type DeleteAgencyMutationResult = Apollo.MutationResult<DeleteAgencyMutation>;
export type DeleteAgencyMutationOptions = Apollo.BaseMutationOptions<DeleteAgencyMutation, DeleteAgencyMutationVariables>;
export const DeleteCategoryDocument = gql`
    mutation deleteCategory($id: ID!) {
  update_categories_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteCategoryMutationFn = Apollo.MutationFunction<DeleteCategoryMutation, DeleteCategoryMutationVariables>;

/**
 * __useDeleteCategoryMutation__
 *
 * To run a mutation, you first call `useDeleteCategoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCategoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCategoryMutation, { data, loading, error }] = useDeleteCategoryMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCategoryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCategoryMutation, DeleteCategoryMutationVariables>(DeleteCategoryDocument, options);
      }
export type DeleteCategoryMutationHookResult = ReturnType<typeof useDeleteCategoryMutation>;
export type DeleteCategoryMutationResult = Apollo.MutationResult<DeleteCategoryMutation>;
export type DeleteCategoryMutationOptions = Apollo.BaseMutationOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>;
export const UserCompetenciesDocument = gql`
    query UserCompetencies($user: String!, $agencies: [String]!, $offset: Int) {
  exams: junction_directus_users_exams(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {status: {_neq: "archived"}}, {agency: {id: {_in: $agencies}}}]}
    offset: $offset
    sort: "-assigned_on"
  ) {
    ...CompetenciesExam
  }
  policies: junction_directus_users_policies(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {status: {_neq: "archived"}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    expires_on
    read
    signed_on
    due_date
    status
    reassigned
    expiration_type
    policies_id {
      id
      name
    }
    agency {
      id
      name
    }
  }
  documents: junction_directus_users_documents(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {status: {_neq: "archived"}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    expires_on
    read
    due_date
    status
    reassigned
    expiration_type
    documents_id {
      id
      title
    }
    agency {
      id
      name
    }
  }
  modules: junction_modules_definition_directus_users(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {status: {_neq: "archived"}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    ...CompetenciesModule
  }
  skills_checklists: junction_sc_definitions_directus_users(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {status: {_neq: "archived"}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    due_date
    expires_on
    finished_on
    status
    import_report_url
    reassigned
    expiration_type
    sc_definitions_id {
      import_is_shell
      id
      title
    }
    agency {
      id
      name
    }
  }
}
    ${CompetenciesExamFragmentDoc}
${CompetenciesModuleFragmentDoc}`;

/**
 * __useUserCompetenciesQuery__
 *
 * To run a query within a React component, call `useUserCompetenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserCompetenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserCompetenciesQuery({
 *   variables: {
 *      user: // value for 'user'
 *      agencies: // value for 'agencies'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useUserCompetenciesQuery(baseOptions: Apollo.QueryHookOptions<UserCompetenciesQuery, UserCompetenciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserCompetenciesQuery, UserCompetenciesQueryVariables>(UserCompetenciesDocument, options);
      }
export function useUserCompetenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserCompetenciesQuery, UserCompetenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserCompetenciesQuery, UserCompetenciesQueryVariables>(UserCompetenciesDocument, options);
        }
export type UserCompetenciesQueryHookResult = ReturnType<typeof useUserCompetenciesQuery>;
export type UserCompetenciesLazyQueryHookResult = ReturnType<typeof useUserCompetenciesLazyQuery>;
export type UserCompetenciesQueryResult = Apollo.QueryResult<UserCompetenciesQuery, UserCompetenciesQueryVariables>;
export const UserCompetenciesHshAdminViewDocument = gql`
    query UserCompetenciesHSHAdminView($user: String!, $agencies: [String]!, $offset: Int) {
  exams: junction_directus_users_exams(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {agency: {id: {_in: $agencies}}}]}
    offset: $offset
    sort: "-assigned_on"
  ) {
    ...CompetenciesExam
  }
  policies: junction_directus_users_policies(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    expires_on
    read
    signed_on
    due_date
    status
    reassigned
    expiration_type
    policies_id {
      id
      name
    }
    agency {
      id
      name
    }
  }
  documents: junction_directus_users_documents(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    expires_on
    read
    due_date
    status
    reassigned
    expiration_type
    documents_id {
      id
      title
    }
    agency {
      id
      name
    }
  }
  modules: junction_modules_definition_directus_users(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    ...CompetenciesModule
  }
  skills_checklists: junction_sc_definitions_directus_users(
    filter: {_and: [{directus_users_id: {id: {_eq: $user}}}, {agency: {id: {_in: $agencies}}}]}
    sort: "-assigned_on"
    offset: $offset
  ) {
    id
    assigned_on
    due_date
    expires_on
    finished_on
    status
    import_report_url
    reassigned
    expiration_type
    sc_definitions_id {
      import_is_shell
      id
      title
    }
    agency {
      id
      name
    }
  }
}
    ${CompetenciesExamFragmentDoc}
${CompetenciesModuleFragmentDoc}`;

/**
 * __useUserCompetenciesHshAdminViewQuery__
 *
 * To run a query within a React component, call `useUserCompetenciesHshAdminViewQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserCompetenciesHshAdminViewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserCompetenciesHshAdminViewQuery({
 *   variables: {
 *      user: // value for 'user'
 *      agencies: // value for 'agencies'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useUserCompetenciesHshAdminViewQuery(baseOptions: Apollo.QueryHookOptions<UserCompetenciesHshAdminViewQuery, UserCompetenciesHshAdminViewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserCompetenciesHshAdminViewQuery, UserCompetenciesHshAdminViewQueryVariables>(UserCompetenciesHshAdminViewDocument, options);
      }
export function useUserCompetenciesHshAdminViewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserCompetenciesHshAdminViewQuery, UserCompetenciesHshAdminViewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserCompetenciesHshAdminViewQuery, UserCompetenciesHshAdminViewQueryVariables>(UserCompetenciesHshAdminViewDocument, options);
        }
export type UserCompetenciesHshAdminViewQueryHookResult = ReturnType<typeof useUserCompetenciesHshAdminViewQuery>;
export type UserCompetenciesHshAdminViewLazyQueryHookResult = ReturnType<typeof useUserCompetenciesHshAdminViewLazyQuery>;
export type UserCompetenciesHshAdminViewQueryResult = Apollo.QueryResult<UserCompetenciesHshAdminViewQuery, UserCompetenciesHshAdminViewQueryVariables>;
export const GetAllExamsForAssignCompetencyDocument = gql`
    query getAllExamsForAssignCompetency($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: exams_filter) {
  exams(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...ExamAssignment
  }
}
    ${ExamAssignmentFragmentDoc}`;

/**
 * __useGetAllExamsForAssignCompetencyQuery__
 *
 * To run a query within a React component, call `useGetAllExamsForAssignCompetencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllExamsForAssignCompetencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllExamsForAssignCompetencyQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllExamsForAssignCompetencyQuery(baseOptions?: Apollo.QueryHookOptions<GetAllExamsForAssignCompetencyQuery, GetAllExamsForAssignCompetencyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllExamsForAssignCompetencyQuery, GetAllExamsForAssignCompetencyQueryVariables>(GetAllExamsForAssignCompetencyDocument, options);
      }
export function useGetAllExamsForAssignCompetencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllExamsForAssignCompetencyQuery, GetAllExamsForAssignCompetencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllExamsForAssignCompetencyQuery, GetAllExamsForAssignCompetencyQueryVariables>(GetAllExamsForAssignCompetencyDocument, options);
        }
export type GetAllExamsForAssignCompetencyQueryHookResult = ReturnType<typeof useGetAllExamsForAssignCompetencyQuery>;
export type GetAllExamsForAssignCompetencyLazyQueryHookResult = ReturnType<typeof useGetAllExamsForAssignCompetencyLazyQuery>;
export type GetAllExamsForAssignCompetencyQueryResult = Apollo.QueryResult<GetAllExamsForAssignCompetencyQuery, GetAllExamsForAssignCompetencyQueryVariables>;
export const GetAllExamsForReportsFilterDocument = gql`
    query GetAllExamsForReportsFilter($search: String, $limit: Int, $filter: exams_filter) {
  exams(filter: $filter, limit: $limit, search: $search) {
    id
    title
  }
}
    `;

/**
 * __useGetAllExamsForReportsFilterQuery__
 *
 * To run a query within a React component, call `useGetAllExamsForReportsFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllExamsForReportsFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllExamsForReportsFilterQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllExamsForReportsFilterQuery(baseOptions?: Apollo.QueryHookOptions<GetAllExamsForReportsFilterQuery, GetAllExamsForReportsFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllExamsForReportsFilterQuery, GetAllExamsForReportsFilterQueryVariables>(GetAllExamsForReportsFilterDocument, options);
      }
export function useGetAllExamsForReportsFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllExamsForReportsFilterQuery, GetAllExamsForReportsFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllExamsForReportsFilterQuery, GetAllExamsForReportsFilterQueryVariables>(GetAllExamsForReportsFilterDocument, options);
        }
export type GetAllExamsForReportsFilterQueryHookResult = ReturnType<typeof useGetAllExamsForReportsFilterQuery>;
export type GetAllExamsForReportsFilterLazyQueryHookResult = ReturnType<typeof useGetAllExamsForReportsFilterLazyQuery>;
export type GetAllExamsForReportsFilterQueryResult = Apollo.QueryResult<GetAllExamsForReportsFilterQuery, GetAllExamsForReportsFilterQueryVariables>;
export const GetAllExamsForUserFilterDocument = gql`
    query getAllExamsForUserFilter($search: String, $limit: Int, $filter: junction_directus_users_exams_filter) {
  junction_directus_users_exams(filter: $filter, limit: $limit, search: $search) {
    exams_id {
      id
      title
    }
  }
}
    `;

/**
 * __useGetAllExamsForUserFilterQuery__
 *
 * To run a query within a React component, call `useGetAllExamsForUserFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllExamsForUserFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllExamsForUserFilterQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllExamsForUserFilterQuery(baseOptions?: Apollo.QueryHookOptions<GetAllExamsForUserFilterQuery, GetAllExamsForUserFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllExamsForUserFilterQuery, GetAllExamsForUserFilterQueryVariables>(GetAllExamsForUserFilterDocument, options);
      }
export function useGetAllExamsForUserFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllExamsForUserFilterQuery, GetAllExamsForUserFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllExamsForUserFilterQuery, GetAllExamsForUserFilterQueryVariables>(GetAllExamsForUserFilterDocument, options);
        }
export type GetAllExamsForUserFilterQueryHookResult = ReturnType<typeof useGetAllExamsForUserFilterQuery>;
export type GetAllExamsForUserFilterLazyQueryHookResult = ReturnType<typeof useGetAllExamsForUserFilterLazyQuery>;
export type GetAllExamsForUserFilterQueryResult = Apollo.QueryResult<GetAllExamsForUserFilterQuery, GetAllExamsForUserFilterQueryVariables>;
export const GetAllExamsDocument = gql`
    query getAllExams($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: exams_filter) {
  exams(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...AllExamsForList
  }
  exams_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    ${AllExamsForListFragmentDoc}`;

/**
 * __useGetAllExamsQuery__
 *
 * To run a query within a React component, call `useGetAllExamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllExamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllExamsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllExamsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllExamsQuery, GetAllExamsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllExamsQuery, GetAllExamsQueryVariables>(GetAllExamsDocument, options);
      }
export function useGetAllExamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllExamsQuery, GetAllExamsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllExamsQuery, GetAllExamsQueryVariables>(GetAllExamsDocument, options);
        }
export type GetAllExamsQueryHookResult = ReturnType<typeof useGetAllExamsQuery>;
export type GetAllExamsLazyQueryHookResult = ReturnType<typeof useGetAllExamsLazyQuery>;
export type GetAllExamsQueryResult = Apollo.QueryResult<GetAllExamsQuery, GetAllExamsQueryVariables>;
export const GetExamForCrudDocument = gql`
    query getExamForCrud($id: ID!) {
  exams_by_id(id: $id) {
    id
    status
    expiration_date
    modality {
      id
    }
    specialties {
      categories_id {
        id
        title
        type
      }
    }
    subspecialties {
      categories_id {
        id
        title
        type
      }
    }
    agencies {
      agencies_id {
        id
        name
      }
    }
    exam_versions(sort: "-date_created", limit: 1) {
      id
      title
      expiration
      passing_score
      allowed_attempts
      questions_to_give
      introduction
      description
      passing_message
      fail_message
      shuffle_questions
      is_proctoring
      contact_hour
      outline {
        id
        title
        filename_download
        storage
      }
      questions(limit: 500) {
        questions_id {
          id
        }
      }
    }
  }
}
    `;

/**
 * __useGetExamForCrudQuery__
 *
 * To run a query within a React component, call `useGetExamForCrudQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetExamForCrudQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetExamForCrudQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetExamForCrudQuery(baseOptions: Apollo.QueryHookOptions<GetExamForCrudQuery, GetExamForCrudQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetExamForCrudQuery, GetExamForCrudQueryVariables>(GetExamForCrudDocument, options);
      }
export function useGetExamForCrudLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetExamForCrudQuery, GetExamForCrudQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetExamForCrudQuery, GetExamForCrudQueryVariables>(GetExamForCrudDocument, options);
        }
export type GetExamForCrudQueryHookResult = ReturnType<typeof useGetExamForCrudQuery>;
export type GetExamForCrudLazyQueryHookResult = ReturnType<typeof useGetExamForCrudLazyQuery>;
export type GetExamForCrudQueryResult = Apollo.QueryResult<GetExamForCrudQuery, GetExamForCrudQueryVariables>;
export const CreateExamDocument = gql`
    mutation createExam($data: create_exams_input!) {
  create_exams_item(data: $data) {
    id
  }
}
    `;
export type CreateExamMutationFn = Apollo.MutationFunction<CreateExamMutation, CreateExamMutationVariables>;

/**
 * __useCreateExamMutation__
 *
 * To run a mutation, you first call `useCreateExamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateExamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createExamMutation, { data, loading, error }] = useCreateExamMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateExamMutation(baseOptions?: Apollo.MutationHookOptions<CreateExamMutation, CreateExamMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateExamMutation, CreateExamMutationVariables>(CreateExamDocument, options);
      }
export type CreateExamMutationHookResult = ReturnType<typeof useCreateExamMutation>;
export type CreateExamMutationResult = Apollo.MutationResult<CreateExamMutation>;
export type CreateExamMutationOptions = Apollo.BaseMutationOptions<CreateExamMutation, CreateExamMutationVariables>;
export const UpdateExamDocument = gql`
    mutation updateExam($id: ID!, $data: update_exams_input!) {
  update_exams_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateExamMutationFn = Apollo.MutationFunction<UpdateExamMutation, UpdateExamMutationVariables>;

/**
 * __useUpdateExamMutation__
 *
 * To run a mutation, you first call `useUpdateExamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateExamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateExamMutation, { data, loading, error }] = useUpdateExamMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateExamMutation(baseOptions?: Apollo.MutationHookOptions<UpdateExamMutation, UpdateExamMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateExamMutation, UpdateExamMutationVariables>(UpdateExamDocument, options);
      }
export type UpdateExamMutationHookResult = ReturnType<typeof useUpdateExamMutation>;
export type UpdateExamMutationResult = Apollo.MutationResult<UpdateExamMutation>;
export type UpdateExamMutationOptions = Apollo.BaseMutationOptions<UpdateExamMutation, UpdateExamMutationVariables>;
export const CreateExamVersionDocument = gql`
    mutation createExamVersion($data: create_exam_versions_input!) {
  create_exam_versions_item(data: $data) {
    id
  }
}
    `;
export type CreateExamVersionMutationFn = Apollo.MutationFunction<CreateExamVersionMutation, CreateExamVersionMutationVariables>;

/**
 * __useCreateExamVersionMutation__
 *
 * To run a mutation, you first call `useCreateExamVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateExamVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createExamVersionMutation, { data, loading, error }] = useCreateExamVersionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateExamVersionMutation(baseOptions?: Apollo.MutationHookOptions<CreateExamVersionMutation, CreateExamVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateExamVersionMutation, CreateExamVersionMutationVariables>(CreateExamVersionDocument, options);
      }
export type CreateExamVersionMutationHookResult = ReturnType<typeof useCreateExamVersionMutation>;
export type CreateExamVersionMutationResult = Apollo.MutationResult<CreateExamVersionMutation>;
export type CreateExamVersionMutationOptions = Apollo.BaseMutationOptions<CreateExamVersionMutation, CreateExamVersionMutationVariables>;
export const UpdateExamVersionDocument = gql`
    mutation updateExamVersion($id: ID!, $data: update_exam_versions_input!) {
  update_exam_versions_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateExamVersionMutationFn = Apollo.MutationFunction<UpdateExamVersionMutation, UpdateExamVersionMutationVariables>;

/**
 * __useUpdateExamVersionMutation__
 *
 * To run a mutation, you first call `useUpdateExamVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateExamVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateExamVersionMutation, { data, loading, error }] = useUpdateExamVersionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateExamVersionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateExamVersionMutation, UpdateExamVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateExamVersionMutation, UpdateExamVersionMutationVariables>(UpdateExamVersionDocument, options);
      }
export type UpdateExamVersionMutationHookResult = ReturnType<typeof useUpdateExamVersionMutation>;
export type UpdateExamVersionMutationResult = Apollo.MutationResult<UpdateExamVersionMutation>;
export type UpdateExamVersionMutationOptions = Apollo.BaseMutationOptions<UpdateExamVersionMutation, UpdateExamVersionMutationVariables>;
export const GetUserExamDocument = gql`
    query getUserExam($filter: junction_directus_users_exams_filter) {
  junction_directus_users_exams(filter: $filter) {
    ...UserExamQuestions
  }
}
    ${UserExamQuestionsFragmentDoc}`;

/**
 * __useGetUserExamQuery__
 *
 * To run a query within a React component, call `useGetUserExamQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetUserExamQuery(baseOptions?: Apollo.QueryHookOptions<GetUserExamQuery, GetUserExamQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamQuery, GetUserExamQueryVariables>(GetUserExamDocument, options);
      }
export function useGetUserExamLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamQuery, GetUserExamQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamQuery, GetUserExamQueryVariables>(GetUserExamDocument, options);
        }
export type GetUserExamQueryHookResult = ReturnType<typeof useGetUserExamQuery>;
export type GetUserExamLazyQueryHookResult = ReturnType<typeof useGetUserExamLazyQuery>;
export type GetUserExamQueryResult = Apollo.QueryResult<GetUserExamQuery, GetUserExamQueryVariables>;
export const GetUserExamDetailsDocument = gql`
    query getUserExamDetails($filter: junction_directus_users_exams_filter) {
  junction_directus_users_exams(filter: $filter) {
    ...UserExamQuestionsDetails
  }
}
    ${UserExamQuestionsDetailsFragmentDoc}`;

/**
 * __useGetUserExamDetailsQuery__
 *
 * To run a query within a React component, call `useGetUserExamDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamDetailsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetUserExamDetailsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserExamDetailsQuery, GetUserExamDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamDetailsQuery, GetUserExamDetailsQueryVariables>(GetUserExamDetailsDocument, options);
      }
export function useGetUserExamDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamDetailsQuery, GetUserExamDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamDetailsQuery, GetUserExamDetailsQueryVariables>(GetUserExamDetailsDocument, options);
        }
export type GetUserExamDetailsQueryHookResult = ReturnType<typeof useGetUserExamDetailsQuery>;
export type GetUserExamDetailsLazyQueryHookResult = ReturnType<typeof useGetUserExamDetailsLazyQuery>;
export type GetUserExamDetailsQueryResult = Apollo.QueryResult<GetUserExamDetailsQuery, GetUserExamDetailsQueryVariables>;
export const GetAllUserExamDocument = gql`
    query getAllUserExam($limit: Int, $offset: Int, $sort: [String], $filter: junction_directus_users_exams_filter) {
  junction_directus_users_exams(
    limit: $limit
    offset: $offset
    sort: $sort
    filter: $filter
  ) {
    ...UserExamReports
  }
  junction_directus_users_exams_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${UserExamReportsFragmentDoc}`;

/**
 * __useGetAllUserExamQuery__
 *
 * To run a query within a React component, call `useGetAllUserExamQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllUserExamQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllUserExamQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllUserExamQuery(baseOptions?: Apollo.QueryHookOptions<GetAllUserExamQuery, GetAllUserExamQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllUserExamQuery, GetAllUserExamQueryVariables>(GetAllUserExamDocument, options);
      }
export function useGetAllUserExamLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllUserExamQuery, GetAllUserExamQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllUserExamQuery, GetAllUserExamQueryVariables>(GetAllUserExamDocument, options);
        }
export type GetAllUserExamQueryHookResult = ReturnType<typeof useGetAllUserExamQuery>;
export type GetAllUserExamLazyQueryHookResult = ReturnType<typeof useGetAllUserExamLazyQuery>;
export type GetAllUserExamQueryResult = Apollo.QueryResult<GetAllUserExamQuery, GetAllUserExamQueryVariables>;
export const GetOverviewExamsReportDocument = gql`
    query GetOverviewExamsReport($limit: Int, $offset: Int, $sort: [String], $filter: exams_filter) {
  exams(limit: $limit, offset: $offset, sort: $sort, filter: $filter) {
    ...OverviewExams
  }
  exams_aggregated(filter: $filter) {
    countDistinct {
      id
    }
  }
}
    ${OverviewExamsFragmentDoc}`;

/**
 * __useGetOverviewExamsReportQuery__
 *
 * To run a query within a React component, call `useGetOverviewExamsReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewExamsReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewExamsReportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetOverviewExamsReportQuery(baseOptions?: Apollo.QueryHookOptions<GetOverviewExamsReportQuery, GetOverviewExamsReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewExamsReportQuery, GetOverviewExamsReportQueryVariables>(GetOverviewExamsReportDocument, options);
      }
export function useGetOverviewExamsReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewExamsReportQuery, GetOverviewExamsReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewExamsReportQuery, GetOverviewExamsReportQueryVariables>(GetOverviewExamsReportDocument, options);
        }
export type GetOverviewExamsReportQueryHookResult = ReturnType<typeof useGetOverviewExamsReportQuery>;
export type GetOverviewExamsReportLazyQueryHookResult = ReturnType<typeof useGetOverviewExamsReportLazyQuery>;
export type GetOverviewExamsReportQueryResult = Apollo.QueryResult<GetOverviewExamsReportQuery, GetOverviewExamsReportQueryVariables>;
export const GetOverviewModulesReportDocument = gql`
    query GetOverviewModulesReport($limit: Int, $offset: Int, $sort: [String], $filter: modules_definition_filter) {
  modules_definition(limit: $limit, offset: $offset, sort: $sort, filter: $filter) {
    ...OverviewModules
  }
  modules_definition_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${OverviewModulesFragmentDoc}`;

/**
 * __useGetOverviewModulesReportQuery__
 *
 * To run a query within a React component, call `useGetOverviewModulesReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewModulesReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewModulesReportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetOverviewModulesReportQuery(baseOptions?: Apollo.QueryHookOptions<GetOverviewModulesReportQuery, GetOverviewModulesReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewModulesReportQuery, GetOverviewModulesReportQueryVariables>(GetOverviewModulesReportDocument, options);
      }
export function useGetOverviewModulesReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewModulesReportQuery, GetOverviewModulesReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewModulesReportQuery, GetOverviewModulesReportQueryVariables>(GetOverviewModulesReportDocument, options);
        }
export type GetOverviewModulesReportQueryHookResult = ReturnType<typeof useGetOverviewModulesReportQuery>;
export type GetOverviewModulesReportLazyQueryHookResult = ReturnType<typeof useGetOverviewModulesReportLazyQuery>;
export type GetOverviewModulesReportQueryResult = Apollo.QueryResult<GetOverviewModulesReportQuery, GetOverviewModulesReportQueryVariables>;
export const GetOverviewDocumentsReportDocument = gql`
    query GetOverviewDocumentsReport($limit: Int, $offset: Int, $sort: [String], $filter: documents_filter) {
  documents(limit: $limit, offset: $offset, sort: $sort, filter: $filter) {
    ...OverviewDocuments
  }
  documents_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${OverviewDocumentsFragmentDoc}`;

/**
 * __useGetOverviewDocumentsReportQuery__
 *
 * To run a query within a React component, call `useGetOverviewDocumentsReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewDocumentsReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewDocumentsReportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetOverviewDocumentsReportQuery(baseOptions?: Apollo.QueryHookOptions<GetOverviewDocumentsReportQuery, GetOverviewDocumentsReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewDocumentsReportQuery, GetOverviewDocumentsReportQueryVariables>(GetOverviewDocumentsReportDocument, options);
      }
export function useGetOverviewDocumentsReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewDocumentsReportQuery, GetOverviewDocumentsReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewDocumentsReportQuery, GetOverviewDocumentsReportQueryVariables>(GetOverviewDocumentsReportDocument, options);
        }
export type GetOverviewDocumentsReportQueryHookResult = ReturnType<typeof useGetOverviewDocumentsReportQuery>;
export type GetOverviewDocumentsReportLazyQueryHookResult = ReturnType<typeof useGetOverviewDocumentsReportLazyQuery>;
export type GetOverviewDocumentsReportQueryResult = Apollo.QueryResult<GetOverviewDocumentsReportQuery, GetOverviewDocumentsReportQueryVariables>;
export const GetOverviewPoliciesReportDocument = gql`
    query GetOverviewPoliciesReport($limit: Int, $offset: Int, $sort: [String], $filter: policies_filter) {
  policies(limit: $limit, offset: $offset, sort: $sort, filter: $filter) {
    ...OverviewPolicies
  }
  policies_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${OverviewPoliciesFragmentDoc}`;

/**
 * __useGetOverviewPoliciesReportQuery__
 *
 * To run a query within a React component, call `useGetOverviewPoliciesReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewPoliciesReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewPoliciesReportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetOverviewPoliciesReportQuery(baseOptions?: Apollo.QueryHookOptions<GetOverviewPoliciesReportQuery, GetOverviewPoliciesReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewPoliciesReportQuery, GetOverviewPoliciesReportQueryVariables>(GetOverviewPoliciesReportDocument, options);
      }
export function useGetOverviewPoliciesReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewPoliciesReportQuery, GetOverviewPoliciesReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewPoliciesReportQuery, GetOverviewPoliciesReportQueryVariables>(GetOverviewPoliciesReportDocument, options);
        }
export type GetOverviewPoliciesReportQueryHookResult = ReturnType<typeof useGetOverviewPoliciesReportQuery>;
export type GetOverviewPoliciesReportLazyQueryHookResult = ReturnType<typeof useGetOverviewPoliciesReportLazyQuery>;
export type GetOverviewPoliciesReportQueryResult = Apollo.QueryResult<GetOverviewPoliciesReportQuery, GetOverviewPoliciesReportQueryVariables>;
export const GetOverviewSkillsChecklistsReportDocument = gql`
    query GetOverviewSkillsChecklistsReport($limit: Int, $offset: Int, $sort: [String], $filter: sc_definitions_filter) {
  sc_definitions(limit: $limit, offset: $offset, sort: $sort, filter: $filter) {
    ...OverviewSkillsChecklists
  }
  sc_definitions_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${OverviewSkillsChecklistsFragmentDoc}`;

/**
 * __useGetOverviewSkillsChecklistsReportQuery__
 *
 * To run a query within a React component, call `useGetOverviewSkillsChecklistsReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewSkillsChecklistsReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewSkillsChecklistsReportQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetOverviewSkillsChecklistsReportQuery(baseOptions?: Apollo.QueryHookOptions<GetOverviewSkillsChecklistsReportQuery, GetOverviewSkillsChecklistsReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewSkillsChecklistsReportQuery, GetOverviewSkillsChecklistsReportQueryVariables>(GetOverviewSkillsChecklistsReportDocument, options);
      }
export function useGetOverviewSkillsChecklistsReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewSkillsChecklistsReportQuery, GetOverviewSkillsChecklistsReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewSkillsChecklistsReportQuery, GetOverviewSkillsChecklistsReportQueryVariables>(GetOverviewSkillsChecklistsReportDocument, options);
        }
export type GetOverviewSkillsChecklistsReportQueryHookResult = ReturnType<typeof useGetOverviewSkillsChecklistsReportQuery>;
export type GetOverviewSkillsChecklistsReportLazyQueryHookResult = ReturnType<typeof useGetOverviewSkillsChecklistsReportLazyQuery>;
export type GetOverviewSkillsChecklistsReportQueryResult = Apollo.QueryResult<GetOverviewSkillsChecklistsReportQuery, GetOverviewSkillsChecklistsReportQueryVariables>;
export const GetUserExamsAnalyticsOverviewReportsDocument = gql`
    query GetUserExamsAnalyticsOverviewReports($notStartedfilters: exams_filter, $passedFilters: exams_filter, $failedFilters: exams_filter, $inProgressFilters: exams_filter, $inReviewFilters: exams_filter, $invalidFilters: exams_filter, $expiredFilters: exams_filter, $totalFilters: exams_filter, $scoreFilters: exams_filter) {
  notStarted: exams_aggregated(filter: $notStartedfilters) {
    count {
      id
    }
  }
  passed: exams_aggregated(filter: $passedFilters) {
    count {
      id
    }
  }
  failed: exams_aggregated(filter: $failedFilters) {
    count {
      id
    }
  }
  inProgress: exams_aggregated(filter: $inProgressFilters) {
    count {
      id
    }
  }
  inReview: exams_aggregated(filter: $inReviewFilters) {
    count {
      id
    }
  }
  invalid: exams_aggregated(filter: $invalidFilters) {
    count {
      id
    }
  }
  expired: exams_aggregated(filter: $expiredFilters) {
    count {
      id
    }
  }
  total: exams_aggregated(filter: $totalFilters) {
    count {
      id
    }
  }
  scores: exams(filter: $scoreFilters) {
    directus_users(filter: {status: {_neq: "archived"}}) {
      score
    }
  }
}
    `;

/**
 * __useGetUserExamsAnalyticsOverviewReportsQuery__
 *
 * To run a query within a React component, call `useGetUserExamsAnalyticsOverviewReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamsAnalyticsOverviewReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamsAnalyticsOverviewReportsQuery({
 *   variables: {
 *      notStartedfilters: // value for 'notStartedfilters'
 *      passedFilters: // value for 'passedFilters'
 *      failedFilters: // value for 'failedFilters'
 *      inProgressFilters: // value for 'inProgressFilters'
 *      inReviewFilters: // value for 'inReviewFilters'
 *      invalidFilters: // value for 'invalidFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilters: // value for 'totalFilters'
 *      scoreFilters: // value for 'scoreFilters'
 *   },
 * });
 */
export function useGetUserExamsAnalyticsOverviewReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserExamsAnalyticsOverviewReportsQuery, GetUserExamsAnalyticsOverviewReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamsAnalyticsOverviewReportsQuery, GetUserExamsAnalyticsOverviewReportsQueryVariables>(GetUserExamsAnalyticsOverviewReportsDocument, options);
      }
export function useGetUserExamsAnalyticsOverviewReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamsAnalyticsOverviewReportsQuery, GetUserExamsAnalyticsOverviewReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamsAnalyticsOverviewReportsQuery, GetUserExamsAnalyticsOverviewReportsQueryVariables>(GetUserExamsAnalyticsOverviewReportsDocument, options);
        }
export type GetUserExamsAnalyticsOverviewReportsQueryHookResult = ReturnType<typeof useGetUserExamsAnalyticsOverviewReportsQuery>;
export type GetUserExamsAnalyticsOverviewReportsLazyQueryHookResult = ReturnType<typeof useGetUserExamsAnalyticsOverviewReportsLazyQuery>;
export type GetUserExamsAnalyticsOverviewReportsQueryResult = Apollo.QueryResult<GetUserExamsAnalyticsOverviewReportsQuery, GetUserExamsAnalyticsOverviewReportsQueryVariables>;
export const GetModulesAnalyticsOverviewReportsDocument = gql`
    query GetModulesAnalyticsOverviewReports($notStartedfilters: modules_definition_filter, $passedFilters: modules_definition_filter, $failedFilters: modules_definition_filter, $inProgressFilters: modules_definition_filter, $expiredFilters: modules_definition_filter, $totalFilters: modules_definition_filter, $scoreFilters: modules_definition_filter) {
  notStarted: modules_definition_aggregated(filter: $notStartedfilters) {
    count {
      id
    }
  }
  passed: modules_definition_aggregated(filter: $passedFilters) {
    count {
      id
    }
  }
  failed: modules_definition_aggregated(filter: $failedFilters) {
    count {
      id
    }
  }
  inProgress: modules_definition_aggregated(filter: $inProgressFilters) {
    count {
      id
    }
  }
  expired: modules_definition_aggregated(filter: $expiredFilters) {
    count {
      id
    }
  }
  total: modules_definition_aggregated(filter: $totalFilters) {
    count {
      id
    }
  }
  scores: modules_definition(filter: $scoreFilters) {
    directus_users(filter: {status: {_neq: "archived"}}) {
      score
    }
  }
}
    `;

/**
 * __useGetModulesAnalyticsOverviewReportsQuery__
 *
 * To run a query within a React component, call `useGetModulesAnalyticsOverviewReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesAnalyticsOverviewReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesAnalyticsOverviewReportsQuery({
 *   variables: {
 *      notStartedfilters: // value for 'notStartedfilters'
 *      passedFilters: // value for 'passedFilters'
 *      failedFilters: // value for 'failedFilters'
 *      inProgressFilters: // value for 'inProgressFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilters: // value for 'totalFilters'
 *      scoreFilters: // value for 'scoreFilters'
 *   },
 * });
 */
export function useGetModulesAnalyticsOverviewReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesAnalyticsOverviewReportsQuery, GetModulesAnalyticsOverviewReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesAnalyticsOverviewReportsQuery, GetModulesAnalyticsOverviewReportsQueryVariables>(GetModulesAnalyticsOverviewReportsDocument, options);
      }
export function useGetModulesAnalyticsOverviewReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesAnalyticsOverviewReportsQuery, GetModulesAnalyticsOverviewReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesAnalyticsOverviewReportsQuery, GetModulesAnalyticsOverviewReportsQueryVariables>(GetModulesAnalyticsOverviewReportsDocument, options);
        }
export type GetModulesAnalyticsOverviewReportsQueryHookResult = ReturnType<typeof useGetModulesAnalyticsOverviewReportsQuery>;
export type GetModulesAnalyticsOverviewReportsLazyQueryHookResult = ReturnType<typeof useGetModulesAnalyticsOverviewReportsLazyQuery>;
export type GetModulesAnalyticsOverviewReportsQueryResult = Apollo.QueryResult<GetModulesAnalyticsOverviewReportsQuery, GetModulesAnalyticsOverviewReportsQueryVariables>;
export const GetDocumentsAnalyticsOverviewReportsDocument = gql`
    query GetDocumentsAnalyticsOverviewReports($unreadFilter: documents_filter, $readfilter: documents_filter, $expiredFilter: documents_filter, $totalFilter: documents_filter) {
  unread: documents_aggregated(filter: $unreadFilter) {
    count {
      id
    }
  }
  read: documents_aggregated(filter: $readfilter) {
    count {
      id
    }
  }
  expired: documents_aggregated(filter: $expiredFilter) {
    count {
      id
    }
  }
  total: documents_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetDocumentsAnalyticsOverviewReportsQuery__
 *
 * To run a query within a React component, call `useGetDocumentsAnalyticsOverviewReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDocumentsAnalyticsOverviewReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDocumentsAnalyticsOverviewReportsQuery({
 *   variables: {
 *      unreadFilter: // value for 'unreadFilter'
 *      readfilter: // value for 'readfilter'
 *      expiredFilter: // value for 'expiredFilter'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetDocumentsAnalyticsOverviewReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetDocumentsAnalyticsOverviewReportsQuery, GetDocumentsAnalyticsOverviewReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDocumentsAnalyticsOverviewReportsQuery, GetDocumentsAnalyticsOverviewReportsQueryVariables>(GetDocumentsAnalyticsOverviewReportsDocument, options);
      }
export function useGetDocumentsAnalyticsOverviewReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDocumentsAnalyticsOverviewReportsQuery, GetDocumentsAnalyticsOverviewReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDocumentsAnalyticsOverviewReportsQuery, GetDocumentsAnalyticsOverviewReportsQueryVariables>(GetDocumentsAnalyticsOverviewReportsDocument, options);
        }
export type GetDocumentsAnalyticsOverviewReportsQueryHookResult = ReturnType<typeof useGetDocumentsAnalyticsOverviewReportsQuery>;
export type GetDocumentsAnalyticsOverviewReportsLazyQueryHookResult = ReturnType<typeof useGetDocumentsAnalyticsOverviewReportsLazyQuery>;
export type GetDocumentsAnalyticsOverviewReportsQueryResult = Apollo.QueryResult<GetDocumentsAnalyticsOverviewReportsQuery, GetDocumentsAnalyticsOverviewReportsQueryVariables>;
export const GetPoliciesAnalyticsOverviewReportsDocument = gql`
    query GetPoliciesAnalyticsOverviewReports($readFilters: policies_filter, $unreadFilters: policies_filter, $signedFilters: policies_filter, $expiredFilters: policies_filter, $totalFilter: policies_filter) {
  read: policies_aggregated(filter: $readFilters) {
    count {
      id
    }
  }
  unread: policies_aggregated(filter: $unreadFilters) {
    count {
      id
    }
  }
  signed: policies_aggregated(filter: $signedFilters) {
    count {
      id
    }
  }
  expired: policies_aggregated(filter: $expiredFilters) {
    count {
      id
    }
  }
  total: policies_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetPoliciesAnalyticsOverviewReportsQuery__
 *
 * To run a query within a React component, call `useGetPoliciesAnalyticsOverviewReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPoliciesAnalyticsOverviewReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPoliciesAnalyticsOverviewReportsQuery({
 *   variables: {
 *      readFilters: // value for 'readFilters'
 *      unreadFilters: // value for 'unreadFilters'
 *      signedFilters: // value for 'signedFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetPoliciesAnalyticsOverviewReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetPoliciesAnalyticsOverviewReportsQuery, GetPoliciesAnalyticsOverviewReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPoliciesAnalyticsOverviewReportsQuery, GetPoliciesAnalyticsOverviewReportsQueryVariables>(GetPoliciesAnalyticsOverviewReportsDocument, options);
      }
export function useGetPoliciesAnalyticsOverviewReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPoliciesAnalyticsOverviewReportsQuery, GetPoliciesAnalyticsOverviewReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPoliciesAnalyticsOverviewReportsQuery, GetPoliciesAnalyticsOverviewReportsQueryVariables>(GetPoliciesAnalyticsOverviewReportsDocument, options);
        }
export type GetPoliciesAnalyticsOverviewReportsQueryHookResult = ReturnType<typeof useGetPoliciesAnalyticsOverviewReportsQuery>;
export type GetPoliciesAnalyticsOverviewReportsLazyQueryHookResult = ReturnType<typeof useGetPoliciesAnalyticsOverviewReportsLazyQuery>;
export type GetPoliciesAnalyticsOverviewReportsQueryResult = Apollo.QueryResult<GetPoliciesAnalyticsOverviewReportsQuery, GetPoliciesAnalyticsOverviewReportsQueryVariables>;
export const GetAllSkillCheckAnalyticsOverviewReportsDocument = gql`
    query GetAllSkillCheckAnalyticsOverviewReports($notStarted: sc_definitions_filter, $inProgressFilter: sc_definitions_filter, $completed: sc_definitions_filter, $expiredFilter: sc_definitions_filter, $totalFilter: sc_definitions_filter) {
  notStarted: sc_definitions_aggregated(filter: $notStarted) {
    count {
      id
    }
  }
  inProgress: sc_definitions_aggregated(filter: $inProgressFilter) {
    count {
      id
    }
  }
  completed: sc_definitions_aggregated(filter: $completed) {
    count {
      id
    }
  }
  expired: sc_definitions_aggregated(filter: $expiredFilter) {
    count {
      id
    }
  }
  total: sc_definitions_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetAllSkillCheckAnalyticsOverviewReportsQuery__
 *
 * To run a query within a React component, call `useGetAllSkillCheckAnalyticsOverviewReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSkillCheckAnalyticsOverviewReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSkillCheckAnalyticsOverviewReportsQuery({
 *   variables: {
 *      notStarted: // value for 'notStarted'
 *      inProgressFilter: // value for 'inProgressFilter'
 *      completed: // value for 'completed'
 *      expiredFilter: // value for 'expiredFilter'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetAllSkillCheckAnalyticsOverviewReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllSkillCheckAnalyticsOverviewReportsQuery, GetAllSkillCheckAnalyticsOverviewReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSkillCheckAnalyticsOverviewReportsQuery, GetAllSkillCheckAnalyticsOverviewReportsQueryVariables>(GetAllSkillCheckAnalyticsOverviewReportsDocument, options);
      }
export function useGetAllSkillCheckAnalyticsOverviewReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSkillCheckAnalyticsOverviewReportsQuery, GetAllSkillCheckAnalyticsOverviewReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSkillCheckAnalyticsOverviewReportsQuery, GetAllSkillCheckAnalyticsOverviewReportsQueryVariables>(GetAllSkillCheckAnalyticsOverviewReportsDocument, options);
        }
export type GetAllSkillCheckAnalyticsOverviewReportsQueryHookResult = ReturnType<typeof useGetAllSkillCheckAnalyticsOverviewReportsQuery>;
export type GetAllSkillCheckAnalyticsOverviewReportsLazyQueryHookResult = ReturnType<typeof useGetAllSkillCheckAnalyticsOverviewReportsLazyQuery>;
export type GetAllSkillCheckAnalyticsOverviewReportsQueryResult = Apollo.QueryResult<GetAllSkillCheckAnalyticsOverviewReportsQuery, GetAllSkillCheckAnalyticsOverviewReportsQueryVariables>;
export const GetUsersOnOverviewReportDocument = gql`
    query GetUsersOnOverviewReport($filter: junction_directus_users_agencies_filter) {
  junction_directus_users_agencies(filter: $filter) {
    directus_users_id {
      id
    }
  }
}
    `;

/**
 * __useGetUsersOnOverviewReportQuery__
 *
 * To run a query within a React component, call `useGetUsersOnOverviewReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersOnOverviewReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersOnOverviewReportQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetUsersOnOverviewReportQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersOnOverviewReportQuery, GetUsersOnOverviewReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUsersOnOverviewReportQuery, GetUsersOnOverviewReportQueryVariables>(GetUsersOnOverviewReportDocument, options);
      }
export function useGetUsersOnOverviewReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersOnOverviewReportQuery, GetUsersOnOverviewReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUsersOnOverviewReportQuery, GetUsersOnOverviewReportQueryVariables>(GetUsersOnOverviewReportDocument, options);
        }
export type GetUsersOnOverviewReportQueryHookResult = ReturnType<typeof useGetUsersOnOverviewReportQuery>;
export type GetUsersOnOverviewReportLazyQueryHookResult = ReturnType<typeof useGetUsersOnOverviewReportLazyQuery>;
export type GetUsersOnOverviewReportQueryResult = Apollo.QueryResult<GetUsersOnOverviewReportQuery, GetUsersOnOverviewReportQueryVariables>;
export const GetUserExamAttemptDocument = gql`
    query getUserExamAttempt($user: String!, $assignment_id: GraphQLStringOrFloat!) {
  junction_directus_users_exams(
    filter: {directus_users_id: {id: {_eq: $user}}, id: {_eq: $assignment_id}}
    sort: "-assigned_on"
    limit: 1
  ) {
    id
    status
    allowed_attempts
    exams_id {
      id
      title
      modality {
        title
      }
    }
    attempts_used
    assigned_on
    started_on
    exam_versions_id {
      passing_score
      fail_message
      passing_message
      description
      contact_hour
      outline {
        id
      }
    }
    score_history
  }
}
    `;

/**
 * __useGetUserExamAttemptQuery__
 *
 * To run a query within a React component, call `useGetUserExamAttemptQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamAttemptQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamAttemptQuery({
 *   variables: {
 *      user: // value for 'user'
 *      assignment_id: // value for 'assignment_id'
 *   },
 * });
 */
export function useGetUserExamAttemptQuery(baseOptions: Apollo.QueryHookOptions<GetUserExamAttemptQuery, GetUserExamAttemptQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamAttemptQuery, GetUserExamAttemptQueryVariables>(GetUserExamAttemptDocument, options);
      }
export function useGetUserExamAttemptLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamAttemptQuery, GetUserExamAttemptQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamAttemptQuery, GetUserExamAttemptQueryVariables>(GetUserExamAttemptDocument, options);
        }
export type GetUserExamAttemptQueryHookResult = ReturnType<typeof useGetUserExamAttemptQuery>;
export type GetUserExamAttemptLazyQueryHookResult = ReturnType<typeof useGetUserExamAttemptLazyQuery>;
export type GetUserExamAttemptQueryResult = Apollo.QueryResult<GetUserExamAttemptQuery, GetUserExamAttemptQueryVariables>;
export const GetUserExamAttemptForResultDocument = gql`
    query getUserExamAttemptForResult($user: String!, $assignment_id: GraphQLStringOrFloat!) {
  junction_directus_users_exams(
    filter: {id: {_eq: $assignment_id}}
    sort: "-assigned_on"
    limit: 1
  ) {
    id
    attempts_used
    status
    allowed_attempts
    exams_id {
      id
      title
      modality {
        title
      }
    }
    exam_versions_id {
      passing_score
      passing_message
      fail_message
      outline {
        id
      }
    }
  }
}
    `;

/**
 * __useGetUserExamAttemptForResultQuery__
 *
 * To run a query within a React component, call `useGetUserExamAttemptForResultQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamAttemptForResultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamAttemptForResultQuery({
 *   variables: {
 *      user: // value for 'user'
 *      assignment_id: // value for 'assignment_id'
 *   },
 * });
 */
export function useGetUserExamAttemptForResultQuery(baseOptions: Apollo.QueryHookOptions<GetUserExamAttemptForResultQuery, GetUserExamAttemptForResultQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamAttemptForResultQuery, GetUserExamAttemptForResultQueryVariables>(GetUserExamAttemptForResultDocument, options);
      }
export function useGetUserExamAttemptForResultLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamAttemptForResultQuery, GetUserExamAttemptForResultQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamAttemptForResultQuery, GetUserExamAttemptForResultQueryVariables>(GetUserExamAttemptForResultDocument, options);
        }
export type GetUserExamAttemptForResultQueryHookResult = ReturnType<typeof useGetUserExamAttemptForResultQuery>;
export type GetUserExamAttemptForResultLazyQueryHookResult = ReturnType<typeof useGetUserExamAttemptForResultLazyQuery>;
export type GetUserExamAttemptForResultQueryResult = Apollo.QueryResult<GetUserExamAttemptForResultQuery, GetUserExamAttemptForResultQueryVariables>;
export const GetUserExamsResultsByAttemptDocument = gql`
    query getUserExamsResultsByAttempt($assignment_id: GraphQLStringOrFloat!, $exam_id: String!, $attempt: GraphQLStringOrFloat!) {
  exam_results(
    filter: {assignment_id: {id: {_eq: $assignment_id}}, exams_id: {id: {_eq: $exam_id}}, attempt: {_eq: $attempt}}
  ) {
    correct
  }
}
    `;

/**
 * __useGetUserExamsResultsByAttemptQuery__
 *
 * To run a query within a React component, call `useGetUserExamsResultsByAttemptQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamsResultsByAttemptQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamsResultsByAttemptQuery({
 *   variables: {
 *      assignment_id: // value for 'assignment_id'
 *      exam_id: // value for 'exam_id'
 *      attempt: // value for 'attempt'
 *   },
 * });
 */
export function useGetUserExamsResultsByAttemptQuery(baseOptions: Apollo.QueryHookOptions<GetUserExamsResultsByAttemptQuery, GetUserExamsResultsByAttemptQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamsResultsByAttemptQuery, GetUserExamsResultsByAttemptQueryVariables>(GetUserExamsResultsByAttemptDocument, options);
      }
export function useGetUserExamsResultsByAttemptLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamsResultsByAttemptQuery, GetUserExamsResultsByAttemptQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamsResultsByAttemptQuery, GetUserExamsResultsByAttemptQueryVariables>(GetUserExamsResultsByAttemptDocument, options);
        }
export type GetUserExamsResultsByAttemptQueryHookResult = ReturnType<typeof useGetUserExamsResultsByAttemptQuery>;
export type GetUserExamsResultsByAttemptLazyQueryHookResult = ReturnType<typeof useGetUserExamsResultsByAttemptLazyQuery>;
export type GetUserExamsResultsByAttemptQueryResult = Apollo.QueryResult<GetUserExamsResultsByAttemptQuery, GetUserExamsResultsByAttemptQueryVariables>;
export const GetUserExamsResultsDetailByAttemptDocument = gql`
    query getUserExamsResultsDetailByAttempt($exam_id: String!, $assignment_id: GraphQLStringOrFloat!, $attempt: GraphQLStringOrFloat!) {
  exam_results(
    filter: {exams_id: {id: {_eq: $exam_id}}, attempt: {_eq: $attempt}, assignment_id: {id: {_eq: $assignment_id}}}
  ) {
    date_created
    correct
    time_taken
    answer
    question_versions_id {
      question
      image {
        id
      }
    }
    questions_id {
      category {
        title
      }
    }
    assignment_id {
      agency {
        name
      }
    }
  }
}
    `;

/**
 * __useGetUserExamsResultsDetailByAttemptQuery__
 *
 * To run a query within a React component, call `useGetUserExamsResultsDetailByAttemptQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamsResultsDetailByAttemptQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamsResultsDetailByAttemptQuery({
 *   variables: {
 *      exam_id: // value for 'exam_id'
 *      assignment_id: // value for 'assignment_id'
 *      attempt: // value for 'attempt'
 *   },
 * });
 */
export function useGetUserExamsResultsDetailByAttemptQuery(baseOptions: Apollo.QueryHookOptions<GetUserExamsResultsDetailByAttemptQuery, GetUserExamsResultsDetailByAttemptQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamsResultsDetailByAttemptQuery, GetUserExamsResultsDetailByAttemptQueryVariables>(GetUserExamsResultsDetailByAttemptDocument, options);
      }
export function useGetUserExamsResultsDetailByAttemptLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamsResultsDetailByAttemptQuery, GetUserExamsResultsDetailByAttemptQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamsResultsDetailByAttemptQuery, GetUserExamsResultsDetailByAttemptQueryVariables>(GetUserExamsResultsDetailByAttemptDocument, options);
        }
export type GetUserExamsResultsDetailByAttemptQueryHookResult = ReturnType<typeof useGetUserExamsResultsDetailByAttemptQuery>;
export type GetUserExamsResultsDetailByAttemptLazyQueryHookResult = ReturnType<typeof useGetUserExamsResultsDetailByAttemptLazyQuery>;
export type GetUserExamsResultsDetailByAttemptQueryResult = Apollo.QueryResult<GetUserExamsResultsDetailByAttemptQuery, GetUserExamsResultsDetailByAttemptQueryVariables>;
export const GetUserExamCerificateDetailsDocument = gql`
    query getUserExamCerificateDetails($user: String!, $assignment_id: GraphQLStringOrFloat!) {
  junction_directus_users_exams(
    filter: {directus_users_id: {id: {_eq: $user}}, id: {_eq: $assignment_id}, status: {_in: ["COMPLETED", "EXPIRED"]}}
  ) {
    cert_code
    cert_expiry_date
    expires_on
    score
    finished_on
    status
    agency {
      name
      logo {
        id
      }
      certificate_logo {
        id
      }
      enable_certificate_logo
    }
    exams_id {
      title
      modality {
        title
      }
    }
    exam_versions_id {
      passing_score
      contact_hour
    }
  }
}
    `;

/**
 * __useGetUserExamCerificateDetailsQuery__
 *
 * To run a query within a React component, call `useGetUserExamCerificateDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamCerificateDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamCerificateDetailsQuery({
 *   variables: {
 *      user: // value for 'user'
 *      assignment_id: // value for 'assignment_id'
 *   },
 * });
 */
export function useGetUserExamCerificateDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetUserExamCerificateDetailsQuery, GetUserExamCerificateDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamCerificateDetailsQuery, GetUserExamCerificateDetailsQueryVariables>(GetUserExamCerificateDetailsDocument, options);
      }
export function useGetUserExamCerificateDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamCerificateDetailsQuery, GetUserExamCerificateDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamCerificateDetailsQuery, GetUserExamCerificateDetailsQueryVariables>(GetUserExamCerificateDetailsDocument, options);
        }
export type GetUserExamCerificateDetailsQueryHookResult = ReturnType<typeof useGetUserExamCerificateDetailsQuery>;
export type GetUserExamCerificateDetailsLazyQueryHookResult = ReturnType<typeof useGetUserExamCerificateDetailsLazyQuery>;
export type GetUserExamCerificateDetailsQueryResult = Apollo.QueryResult<GetUserExamCerificateDetailsQuery, GetUserExamCerificateDetailsQueryVariables>;
export const GetUserExamsAverageAttemptsDocument = gql`
    query getUserExamsAverageAttempts($filter: junction_directus_users_exams_filter) {
  junction_directus_users_exams_aggregated(filter: $filter) {
    avg {
      attempts_used
      allowed_attempts
      score
    }
  }
}
    `;

/**
 * __useGetUserExamsAverageAttemptsQuery__
 *
 * To run a query within a React component, call `useGetUserExamsAverageAttemptsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamsAverageAttemptsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamsAverageAttemptsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetUserExamsAverageAttemptsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserExamsAverageAttemptsQuery, GetUserExamsAverageAttemptsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamsAverageAttemptsQuery, GetUserExamsAverageAttemptsQueryVariables>(GetUserExamsAverageAttemptsDocument, options);
      }
export function useGetUserExamsAverageAttemptsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamsAverageAttemptsQuery, GetUserExamsAverageAttemptsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamsAverageAttemptsQuery, GetUserExamsAverageAttemptsQueryVariables>(GetUserExamsAverageAttemptsDocument, options);
        }
export type GetUserExamsAverageAttemptsQueryHookResult = ReturnType<typeof useGetUserExamsAverageAttemptsQuery>;
export type GetUserExamsAverageAttemptsLazyQueryHookResult = ReturnType<typeof useGetUserExamsAverageAttemptsLazyQuery>;
export type GetUserExamsAverageAttemptsQueryResult = Apollo.QueryResult<GetUserExamsAverageAttemptsQuery, GetUserExamsAverageAttemptsQueryVariables>;
export const GetUserExamsByStatusReportsDocument = gql`
    query getUserExamsByStatusReports($notStartedfilters: junction_directus_users_exams_filter, $passedFilters: junction_directus_users_exams_filter, $failedFilters: junction_directus_users_exams_filter, $inProgressFilters: junction_directus_users_exams_filter, $inReviewFilters: junction_directus_users_exams_filter, $invalidFilters: junction_directus_users_exams_filter, $expiredFilters: junction_directus_users_exams_filter, $totalFilters: junction_directus_users_exams_filter) {
  notStarted: junction_directus_users_exams_aggregated(filter: $notStartedfilters) {
    count {
      status
    }
  }
  passed: junction_directus_users_exams_aggregated(filter: $passedFilters) {
    count {
      status
    }
  }
  failed: junction_directus_users_exams_aggregated(filter: $failedFilters) {
    count {
      status
    }
  }
  inProgress: junction_directus_users_exams_aggregated(filter: $inProgressFilters) {
    count {
      status
    }
  }
  inReview: junction_directus_users_exams_aggregated(filter: $inReviewFilters) {
    count {
      status
    }
  }
  invalid: junction_directus_users_exams_aggregated(filter: $invalidFilters) {
    count {
      status
    }
  }
  expired: junction_directus_users_exams_aggregated(filter: $expiredFilters) {
    count {
      status
    }
  }
  total: junction_directus_users_exams_aggregated(filter: $totalFilters) {
    count {
      status
    }
  }
}
    `;

/**
 * __useGetUserExamsByStatusReportsQuery__
 *
 * To run a query within a React component, call `useGetUserExamsByStatusReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserExamsByStatusReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserExamsByStatusReportsQuery({
 *   variables: {
 *      notStartedfilters: // value for 'notStartedfilters'
 *      passedFilters: // value for 'passedFilters'
 *      failedFilters: // value for 'failedFilters'
 *      inProgressFilters: // value for 'inProgressFilters'
 *      inReviewFilters: // value for 'inReviewFilters'
 *      invalidFilters: // value for 'invalidFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilters: // value for 'totalFilters'
 *   },
 * });
 */
export function useGetUserExamsByStatusReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserExamsByStatusReportsQuery, GetUserExamsByStatusReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserExamsByStatusReportsQuery, GetUserExamsByStatusReportsQueryVariables>(GetUserExamsByStatusReportsDocument, options);
      }
export function useGetUserExamsByStatusReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserExamsByStatusReportsQuery, GetUserExamsByStatusReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserExamsByStatusReportsQuery, GetUserExamsByStatusReportsQueryVariables>(GetUserExamsByStatusReportsDocument, options);
        }
export type GetUserExamsByStatusReportsQueryHookResult = ReturnType<typeof useGetUserExamsByStatusReportsQuery>;
export type GetUserExamsByStatusReportsLazyQueryHookResult = ReturnType<typeof useGetUserExamsByStatusReportsLazyQuery>;
export type GetUserExamsByStatusReportsQueryResult = Apollo.QueryResult<GetUserExamsByStatusReportsQuery, GetUserExamsByStatusReportsQueryVariables>;
export const SysUsersWithExamsDocument = gql`
    query sysUsersWithExams($filter: directus_users_filter, $search: String) {
  users(filter: $filter, search: $search) {
    id
    first_name
    last_name
  }
}
    `;

/**
 * __useSysUsersWithExamsQuery__
 *
 * To run a query within a React component, call `useSysUsersWithExamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersWithExamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersWithExamsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useSysUsersWithExamsQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersWithExamsQuery, SysUsersWithExamsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersWithExamsQuery, SysUsersWithExamsQueryVariables>(SysUsersWithExamsDocument, options);
      }
export function useSysUsersWithExamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersWithExamsQuery, SysUsersWithExamsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersWithExamsQuery, SysUsersWithExamsQueryVariables>(SysUsersWithExamsDocument, options);
        }
export type SysUsersWithExamsQueryHookResult = ReturnType<typeof useSysUsersWithExamsQuery>;
export type SysUsersWithExamsLazyQueryHookResult = ReturnType<typeof useSysUsersWithExamsLazyQuery>;
export type SysUsersWithExamsQueryResult = Apollo.QueryResult<SysUsersWithExamsQuery, SysUsersWithExamsQueryVariables>;
export const GetAllQuestionsDocument = gql`
    query getAllQuestions($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: questions_filter) {
  questions(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...AllQuestionsForList
  }
  questions_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    ${AllQuestionsForListFragmentDoc}`;

/**
 * __useGetAllQuestionsQuery__
 *
 * To run a query within a React component, call `useGetAllQuestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllQuestionsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllQuestionsQuery, GetAllQuestionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllQuestionsQuery, GetAllQuestionsQueryVariables>(GetAllQuestionsDocument, options);
      }
export function useGetAllQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllQuestionsQuery, GetAllQuestionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllQuestionsQuery, GetAllQuestionsQueryVariables>(GetAllQuestionsDocument, options);
        }
export type GetAllQuestionsQueryHookResult = ReturnType<typeof useGetAllQuestionsQuery>;
export type GetAllQuestionsLazyQueryHookResult = ReturnType<typeof useGetAllQuestionsLazyQuery>;
export type GetAllQuestionsQueryResult = Apollo.QueryResult<GetAllQuestionsQuery, GetAllQuestionsQueryVariables>;
export const CreateQuestionDocument = gql`
    mutation createQuestion($data: create_questions_input!) {
  create_questions_item(data: $data) {
    id
  }
}
    `;
export type CreateQuestionMutationFn = Apollo.MutationFunction<CreateQuestionMutation, CreateQuestionMutationVariables>;

/**
 * __useCreateQuestionMutation__
 *
 * To run a mutation, you first call `useCreateQuestionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateQuestionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createQuestionMutation, { data, loading, error }] = useCreateQuestionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateQuestionMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuestionMutation, CreateQuestionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateQuestionMutation, CreateQuestionMutationVariables>(CreateQuestionDocument, options);
      }
export type CreateQuestionMutationHookResult = ReturnType<typeof useCreateQuestionMutation>;
export type CreateQuestionMutationResult = Apollo.MutationResult<CreateQuestionMutation>;
export type CreateQuestionMutationOptions = Apollo.BaseMutationOptions<CreateQuestionMutation, CreateQuestionMutationVariables>;
export const UpdateQuestionDocument = gql`
    mutation updateQuestion($id: ID!, $data: update_questions_input!) {
  update_questions_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateQuestionMutationFn = Apollo.MutationFunction<UpdateQuestionMutation, UpdateQuestionMutationVariables>;

/**
 * __useUpdateQuestionMutation__
 *
 * To run a mutation, you first call `useUpdateQuestionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateQuestionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateQuestionMutation, { data, loading, error }] = useUpdateQuestionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateQuestionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionMutation, UpdateQuestionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateQuestionMutation, UpdateQuestionMutationVariables>(UpdateQuestionDocument, options);
      }
export type UpdateQuestionMutationHookResult = ReturnType<typeof useUpdateQuestionMutation>;
export type UpdateQuestionMutationResult = Apollo.MutationResult<UpdateQuestionMutation>;
export type UpdateQuestionMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionMutation, UpdateQuestionMutationVariables>;
export const UpdateQuestionsDocument = gql`
    mutation updateQuestions($ids: [ID]!, $data: update_questions_input!) {
  update_questions_items(ids: $ids, data: $data) {
    id
  }
}
    `;
export type UpdateQuestionsMutationFn = Apollo.MutationFunction<UpdateQuestionsMutation, UpdateQuestionsMutationVariables>;

/**
 * __useUpdateQuestionsMutation__
 *
 * To run a mutation, you first call `useUpdateQuestionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateQuestionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateQuestionsMutation, { data, loading, error }] = useUpdateQuestionsMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateQuestionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionsMutation, UpdateQuestionsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateQuestionsMutation, UpdateQuestionsMutationVariables>(UpdateQuestionsDocument, options);
      }
export type UpdateQuestionsMutationHookResult = ReturnType<typeof useUpdateQuestionsMutation>;
export type UpdateQuestionsMutationResult = Apollo.MutationResult<UpdateQuestionsMutation>;
export type UpdateQuestionsMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionsMutation, UpdateQuestionsMutationVariables>;
export const CreateQuestionVersionDocument = gql`
    mutation createQuestionVersion($data: create_question_versions_input!) {
  create_question_versions_item(data: $data) {
    id
  }
}
    `;
export type CreateQuestionVersionMutationFn = Apollo.MutationFunction<CreateQuestionVersionMutation, CreateQuestionVersionMutationVariables>;

/**
 * __useCreateQuestionVersionMutation__
 *
 * To run a mutation, you first call `useCreateQuestionVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateQuestionVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createQuestionVersionMutation, { data, loading, error }] = useCreateQuestionVersionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateQuestionVersionMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuestionVersionMutation, CreateQuestionVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateQuestionVersionMutation, CreateQuestionVersionMutationVariables>(CreateQuestionVersionDocument, options);
      }
export type CreateQuestionVersionMutationHookResult = ReturnType<typeof useCreateQuestionVersionMutation>;
export type CreateQuestionVersionMutationResult = Apollo.MutationResult<CreateQuestionVersionMutation>;
export type CreateQuestionVersionMutationOptions = Apollo.BaseMutationOptions<CreateQuestionVersionMutation, CreateQuestionVersionMutationVariables>;
export const GetQuestionVersionDocument = gql`
    query getQuestionVersion($id: String!) {
  question_versions(filter: {id: {_eq: $id}}) {
    id
    question
    question_id {
      id
      type
    }
  }
}
    `;

/**
 * __useGetQuestionVersionQuery__
 *
 * To run a query within a React component, call `useGetQuestionVersionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetQuestionVersionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetQuestionVersionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetQuestionVersionQuery(baseOptions: Apollo.QueryHookOptions<GetQuestionVersionQuery, GetQuestionVersionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetQuestionVersionQuery, GetQuestionVersionQueryVariables>(GetQuestionVersionDocument, options);
      }
export function useGetQuestionVersionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetQuestionVersionQuery, GetQuestionVersionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetQuestionVersionQuery, GetQuestionVersionQueryVariables>(GetQuestionVersionDocument, options);
        }
export type GetQuestionVersionQueryHookResult = ReturnType<typeof useGetQuestionVersionQuery>;
export type GetQuestionVersionLazyQueryHookResult = ReturnType<typeof useGetQuestionVersionLazyQuery>;
export type GetQuestionVersionQueryResult = Apollo.QueryResult<GetQuestionVersionQuery, GetQuestionVersionQueryVariables>;
export const SaveAnswerDocument = gql`
    mutation saveAnswer($data: create_exam_results_input!) {
  create_exam_results_item(data: $data) {
    id
  }
}
    `;
export type SaveAnswerMutationFn = Apollo.MutationFunction<SaveAnswerMutation, SaveAnswerMutationVariables>;

/**
 * __useSaveAnswerMutation__
 *
 * To run a mutation, you first call `useSaveAnswerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveAnswerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveAnswerMutation, { data, loading, error }] = useSaveAnswerMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSaveAnswerMutation(baseOptions?: Apollo.MutationHookOptions<SaveAnswerMutation, SaveAnswerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SaveAnswerMutation, SaveAnswerMutationVariables>(SaveAnswerDocument, options);
      }
export type SaveAnswerMutationHookResult = ReturnType<typeof useSaveAnswerMutation>;
export type SaveAnswerMutationResult = Apollo.MutationResult<SaveAnswerMutation>;
export type SaveAnswerMutationOptions = Apollo.BaseMutationOptions<SaveAnswerMutation, SaveAnswerMutationVariables>;
export const GetAllCategoriesDocument = gql`
    query getAllCategories($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: categories_filter) {
  categories(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...Category
  }
  categories_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    ${CategoryFragmentDoc}`;

/**
 * __useGetAllCategoriesQuery__
 *
 * To run a query within a React component, call `useGetAllCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllCategoriesQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>(GetAllCategoriesDocument, options);
      }
export function useGetAllCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>(GetAllCategoriesDocument, options);
        }
export type GetAllCategoriesQueryHookResult = ReturnType<typeof useGetAllCategoriesQuery>;
export type GetAllCategoriesLazyQueryHookResult = ReturnType<typeof useGetAllCategoriesLazyQuery>;
export type GetAllCategoriesQueryResult = Apollo.QueryResult<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>;
export const CreateCategoryDocument = gql`
    mutation createCategory($data: create_categories_input!) {
  create_categories_item(data: $data) {
    id
  }
}
    `;
export type CreateCategoryMutationFn = Apollo.MutationFunction<CreateCategoryMutation, CreateCategoryMutationVariables>;

/**
 * __useCreateCategoryMutation__
 *
 * To run a mutation, you first call `useCreateCategoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCategoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCategoryMutation, { data, loading, error }] = useCreateCategoryMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<CreateCategoryMutation, CreateCategoryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCategoryMutation, CreateCategoryMutationVariables>(CreateCategoryDocument, options);
      }
export type CreateCategoryMutationHookResult = ReturnType<typeof useCreateCategoryMutation>;
export type CreateCategoryMutationResult = Apollo.MutationResult<CreateCategoryMutation>;
export type CreateCategoryMutationOptions = Apollo.BaseMutationOptions<CreateCategoryMutation, CreateCategoryMutationVariables>;
export const UpdateCategoriesDocument = gql`
    mutation updateCategories($ids: [ID]!, $data: update_categories_input!) {
  update_categories_items(ids: $ids, data: $data) {
    id
  }
}
    `;
export type UpdateCategoriesMutationFn = Apollo.MutationFunction<UpdateCategoriesMutation, UpdateCategoriesMutationVariables>;

/**
 * __useUpdateCategoriesMutation__
 *
 * To run a mutation, you first call `useUpdateCategoriesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCategoriesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCategoriesMutation, { data, loading, error }] = useUpdateCategoriesMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCategoriesMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCategoriesMutation, UpdateCategoriesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCategoriesMutation, UpdateCategoriesMutationVariables>(UpdateCategoriesDocument, options);
      }
export type UpdateCategoriesMutationHookResult = ReturnType<typeof useUpdateCategoriesMutation>;
export type UpdateCategoriesMutationResult = Apollo.MutationResult<UpdateCategoriesMutation>;
export type UpdateCategoriesMutationOptions = Apollo.BaseMutationOptions<UpdateCategoriesMutation, UpdateCategoriesMutationVariables>;
export const UpdateCategoryDocument = gql`
    mutation updateCategory($id: ID!, $data: update_categories_input!) {
  update_categories_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateCategoryMutationFn = Apollo.MutationFunction<UpdateCategoryMutation, UpdateCategoryMutationVariables>;

/**
 * __useUpdateCategoryMutation__
 *
 * To run a mutation, you first call `useUpdateCategoryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCategoryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCategoryMutation, { data, loading, error }] = useUpdateCategoryMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCategoryMutation, UpdateCategoryMutationVariables>(UpdateCategoryDocument, options);
      }
export type UpdateCategoryMutationHookResult = ReturnType<typeof useUpdateCategoryMutation>;
export type UpdateCategoryMutationResult = Apollo.MutationResult<UpdateCategoryMutation>;
export type UpdateCategoryMutationOptions = Apollo.BaseMutationOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>;
export const GetAllPoliciesDocument = gql`
    query getAllPolicies($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: policies_filter) {
  policies(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...Policies
  }
}
    ${PoliciesFragmentDoc}`;

/**
 * __useGetAllPoliciesQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPoliciesQuery, GetAllPoliciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesQuery, GetAllPoliciesQueryVariables>(GetAllPoliciesDocument, options);
      }
export function useGetAllPoliciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesQuery, GetAllPoliciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesQuery, GetAllPoliciesQueryVariables>(GetAllPoliciesDocument, options);
        }
export type GetAllPoliciesQueryHookResult = ReturnType<typeof useGetAllPoliciesQuery>;
export type GetAllPoliciesLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesLazyQuery>;
export type GetAllPoliciesQueryResult = Apollo.QueryResult<GetAllPoliciesQuery, GetAllPoliciesQueryVariables>;
export const GetAllPoliciesTotalItemsDocument = gql`
    query getAllPoliciesTotalItems($search: String, $filter: policies_filter) {
  policies_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetAllPoliciesTotalItemsQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesTotalItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesTotalItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesTotalItemsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesTotalItemsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPoliciesTotalItemsQuery, GetAllPoliciesTotalItemsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesTotalItemsQuery, GetAllPoliciesTotalItemsQueryVariables>(GetAllPoliciesTotalItemsDocument, options);
      }
export function useGetAllPoliciesTotalItemsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesTotalItemsQuery, GetAllPoliciesTotalItemsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesTotalItemsQuery, GetAllPoliciesTotalItemsQueryVariables>(GetAllPoliciesTotalItemsDocument, options);
        }
export type GetAllPoliciesTotalItemsQueryHookResult = ReturnType<typeof useGetAllPoliciesTotalItemsQuery>;
export type GetAllPoliciesTotalItemsLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesTotalItemsLazyQuery>;
export type GetAllPoliciesTotalItemsQueryResult = Apollo.QueryResult<GetAllPoliciesTotalItemsQuery, GetAllPoliciesTotalItemsQueryVariables>;
export const GetAllPoliciesForAssignmentDocument = gql`
    query getAllPoliciesForAssignment($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: policies_filter) {
  policies(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...PoliciesForListing
  }
}
    ${PoliciesForListingFragmentDoc}`;

/**
 * __useGetAllPoliciesForAssignmentQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesForAssignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesForAssignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesForAssignmentQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesForAssignmentQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPoliciesForAssignmentQuery, GetAllPoliciesForAssignmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesForAssignmentQuery, GetAllPoliciesForAssignmentQueryVariables>(GetAllPoliciesForAssignmentDocument, options);
      }
export function useGetAllPoliciesForAssignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesForAssignmentQuery, GetAllPoliciesForAssignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesForAssignmentQuery, GetAllPoliciesForAssignmentQueryVariables>(GetAllPoliciesForAssignmentDocument, options);
        }
export type GetAllPoliciesForAssignmentQueryHookResult = ReturnType<typeof useGetAllPoliciesForAssignmentQuery>;
export type GetAllPoliciesForAssignmentLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesForAssignmentLazyQuery>;
export type GetAllPoliciesForAssignmentQueryResult = Apollo.QueryResult<GetAllPoliciesForAssignmentQuery, GetAllPoliciesForAssignmentQueryVariables>;
export const GetAllPoliciesAssignmentsDocument = gql`
    query getAllPoliciesAssignments($offset: Int, $limit: Int, $sort: [String], $filter: junction_directus_users_policies_filter) {
  junction_directus_users_policies(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
  ) {
    ...PoliciesAssignments
  }
  junction_directus_users_policies_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${PoliciesAssignmentsFragmentDoc}`;

/**
 * __useGetAllPoliciesAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPoliciesAssignmentsQuery, GetAllPoliciesAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesAssignmentsQuery, GetAllPoliciesAssignmentsQueryVariables>(GetAllPoliciesAssignmentsDocument, options);
      }
export function useGetAllPoliciesAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesAssignmentsQuery, GetAllPoliciesAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesAssignmentsQuery, GetAllPoliciesAssignmentsQueryVariables>(GetAllPoliciesAssignmentsDocument, options);
        }
export type GetAllPoliciesAssignmentsQueryHookResult = ReturnType<typeof useGetAllPoliciesAssignmentsQuery>;
export type GetAllPoliciesAssignmentsLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesAssignmentsLazyQuery>;
export type GetAllPoliciesAssignmentsQueryResult = Apollo.QueryResult<GetAllPoliciesAssignmentsQuery, GetAllPoliciesAssignmentsQueryVariables>;
export const GetAllPoliciesOnReportDocument = gql`
    query getAllPoliciesOnReport($search: String, $limit: Int!, $filter: policies_filter) {
  policies(filter: $filter, search: $search, limit: $limit) {
    id
    name
  }
}
    `;

/**
 * __useGetAllPoliciesOnReportQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesOnReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesOnReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesOnReportQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesOnReportQuery(baseOptions: Apollo.QueryHookOptions<GetAllPoliciesOnReportQuery, GetAllPoliciesOnReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesOnReportQuery, GetAllPoliciesOnReportQueryVariables>(GetAllPoliciesOnReportDocument, options);
      }
export function useGetAllPoliciesOnReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesOnReportQuery, GetAllPoliciesOnReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesOnReportQuery, GetAllPoliciesOnReportQueryVariables>(GetAllPoliciesOnReportDocument, options);
        }
export type GetAllPoliciesOnReportQueryHookResult = ReturnType<typeof useGetAllPoliciesOnReportQuery>;
export type GetAllPoliciesOnReportLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesOnReportLazyQuery>;
export type GetAllPoliciesOnReportQueryResult = Apollo.QueryResult<GetAllPoliciesOnReportQuery, GetAllPoliciesOnReportQueryVariables>;
export const GetAllPoliciesForUserFilterDocument = gql`
    query getAllPoliciesForUserFilter($search: String, $limit: Int!, $filter: junction_directus_users_policies_filter) {
  junction_directus_users_policies(
    filter: $filter
    search: $search
    limit: $limit
  ) {
    policies_id {
      id
      name
    }
  }
}
    `;

/**
 * __useGetAllPoliciesForUserFilterQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesForUserFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesForUserFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesForUserFilterQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesForUserFilterQuery(baseOptions: Apollo.QueryHookOptions<GetAllPoliciesForUserFilterQuery, GetAllPoliciesForUserFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesForUserFilterQuery, GetAllPoliciesForUserFilterQueryVariables>(GetAllPoliciesForUserFilterDocument, options);
      }
export function useGetAllPoliciesForUserFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesForUserFilterQuery, GetAllPoliciesForUserFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesForUserFilterQuery, GetAllPoliciesForUserFilterQueryVariables>(GetAllPoliciesForUserFilterDocument, options);
        }
export type GetAllPoliciesForUserFilterQueryHookResult = ReturnType<typeof useGetAllPoliciesForUserFilterQuery>;
export type GetAllPoliciesForUserFilterLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesForUserFilterLazyQuery>;
export type GetAllPoliciesForUserFilterQueryResult = Apollo.QueryResult<GetAllPoliciesForUserFilterQuery, GetAllPoliciesForUserFilterQueryVariables>;
export const SysUsersWithPoliciesDocument = gql`
    query SysUsersWithPolicies($search: String, $limit: Int!, $filter: directus_users_filter) {
  users(filter: $filter, search: $search, limit: $limit) {
    id
    first_name
    last_name
  }
}
    `;

/**
 * __useSysUsersWithPoliciesQuery__
 *
 * To run a query within a React component, call `useSysUsersWithPoliciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersWithPoliciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersWithPoliciesQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersWithPoliciesQuery(baseOptions: Apollo.QueryHookOptions<SysUsersWithPoliciesQuery, SysUsersWithPoliciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersWithPoliciesQuery, SysUsersWithPoliciesQueryVariables>(SysUsersWithPoliciesDocument, options);
      }
export function useSysUsersWithPoliciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersWithPoliciesQuery, SysUsersWithPoliciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersWithPoliciesQuery, SysUsersWithPoliciesQueryVariables>(SysUsersWithPoliciesDocument, options);
        }
export type SysUsersWithPoliciesQueryHookResult = ReturnType<typeof useSysUsersWithPoliciesQuery>;
export type SysUsersWithPoliciesLazyQueryHookResult = ReturnType<typeof useSysUsersWithPoliciesLazyQuery>;
export type SysUsersWithPoliciesQueryResult = Apollo.QueryResult<SysUsersWithPoliciesQuery, SysUsersWithPoliciesQueryVariables>;
export const GetPolicyDetailDocument = gql`
    query getPolicyDetail($policyId: ID!) {
  policies_by_id(id: $policyId) {
    ...Policies
  }
}
    ${PoliciesFragmentDoc}`;

/**
 * __useGetPolicyDetailQuery__
 *
 * To run a query within a React component, call `useGetPolicyDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPolicyDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPolicyDetailQuery({
 *   variables: {
 *      policyId: // value for 'policyId'
 *   },
 * });
 */
export function useGetPolicyDetailQuery(baseOptions: Apollo.QueryHookOptions<GetPolicyDetailQuery, GetPolicyDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPolicyDetailQuery, GetPolicyDetailQueryVariables>(GetPolicyDetailDocument, options);
      }
export function useGetPolicyDetailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPolicyDetailQuery, GetPolicyDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPolicyDetailQuery, GetPolicyDetailQueryVariables>(GetPolicyDetailDocument, options);
        }
export type GetPolicyDetailQueryHookResult = ReturnType<typeof useGetPolicyDetailQuery>;
export type GetPolicyDetailLazyQueryHookResult = ReturnType<typeof useGetPolicyDetailLazyQuery>;
export type GetPolicyDetailQueryResult = Apollo.QueryResult<GetPolicyDetailQuery, GetPolicyDetailQueryVariables>;
export const GetPolicyAssignmentDocument = gql`
    query getPolicyAssignment($id: ID!) {
  junction_directus_users_policies_by_id(id: $id) {
    ...PoliciesAssignments
  }
}
    ${PoliciesAssignmentsFragmentDoc}`;

/**
 * __useGetPolicyAssignmentQuery__
 *
 * To run a query within a React component, call `useGetPolicyAssignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPolicyAssignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPolicyAssignmentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPolicyAssignmentQuery(baseOptions: Apollo.QueryHookOptions<GetPolicyAssignmentQuery, GetPolicyAssignmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPolicyAssignmentQuery, GetPolicyAssignmentQueryVariables>(GetPolicyAssignmentDocument, options);
      }
export function useGetPolicyAssignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPolicyAssignmentQuery, GetPolicyAssignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPolicyAssignmentQuery, GetPolicyAssignmentQueryVariables>(GetPolicyAssignmentDocument, options);
        }
export type GetPolicyAssignmentQueryHookResult = ReturnType<typeof useGetPolicyAssignmentQuery>;
export type GetPolicyAssignmentLazyQueryHookResult = ReturnType<typeof useGetPolicyAssignmentLazyQuery>;
export type GetPolicyAssignmentQueryResult = Apollo.QueryResult<GetPolicyAssignmentQuery, GetPolicyAssignmentQueryVariables>;
export const GetPoliciesCategoriesDocument = gql`
    query getPoliciesCategories {
  categories(filter: {status: {_eq: "published"}, type: {_eq: "policy"}}) {
    id
    title
  }
}
    `;

/**
 * __useGetPoliciesCategoriesQuery__
 *
 * To run a query within a React component, call `useGetPoliciesCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPoliciesCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPoliciesCategoriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPoliciesCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetPoliciesCategoriesQuery, GetPoliciesCategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPoliciesCategoriesQuery, GetPoliciesCategoriesQueryVariables>(GetPoliciesCategoriesDocument, options);
      }
export function useGetPoliciesCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPoliciesCategoriesQuery, GetPoliciesCategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPoliciesCategoriesQuery, GetPoliciesCategoriesQueryVariables>(GetPoliciesCategoriesDocument, options);
        }
export type GetPoliciesCategoriesQueryHookResult = ReturnType<typeof useGetPoliciesCategoriesQuery>;
export type GetPoliciesCategoriesLazyQueryHookResult = ReturnType<typeof useGetPoliciesCategoriesLazyQuery>;
export type GetPoliciesCategoriesQueryResult = Apollo.QueryResult<GetPoliciesCategoriesQuery, GetPoliciesCategoriesQueryVariables>;
export const GetPoliciesByStatusReportsDocument = gql`
    query getPoliciesByStatusReports($unreadFilters: junction_directus_users_policies_filter, $readAndUnsignedFilters: junction_directus_users_policies_filter, $readAndSignedFilters: junction_directus_users_policies_filter, $expiredFilters: junction_directus_users_policies_filter, $totalFilter: junction_directus_users_policies_filter) {
  unread: junction_directus_users_policies_aggregated(filter: $unreadFilters) {
    count {
      id
    }
  }
  readAndUnsigned: junction_directus_users_policies_aggregated(
    filter: $readAndUnsignedFilters
  ) {
    count {
      id
    }
  }
  readAndSigned: junction_directus_users_policies_aggregated(
    filter: $readAndSignedFilters
  ) {
    count {
      id
    }
  }
  expired: junction_directus_users_policies_aggregated(filter: $expiredFilters) {
    count {
      id
    }
  }
  total: junction_directus_users_policies_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetPoliciesByStatusReportsQuery__
 *
 * To run a query within a React component, call `useGetPoliciesByStatusReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPoliciesByStatusReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPoliciesByStatusReportsQuery({
 *   variables: {
 *      unreadFilters: // value for 'unreadFilters'
 *      readAndUnsignedFilters: // value for 'readAndUnsignedFilters'
 *      readAndSignedFilters: // value for 'readAndSignedFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetPoliciesByStatusReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetPoliciesByStatusReportsQuery, GetPoliciesByStatusReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPoliciesByStatusReportsQuery, GetPoliciesByStatusReportsQueryVariables>(GetPoliciesByStatusReportsDocument, options);
      }
export function useGetPoliciesByStatusReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPoliciesByStatusReportsQuery, GetPoliciesByStatusReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPoliciesByStatusReportsQuery, GetPoliciesByStatusReportsQueryVariables>(GetPoliciesByStatusReportsDocument, options);
        }
export type GetPoliciesByStatusReportsQueryHookResult = ReturnType<typeof useGetPoliciesByStatusReportsQuery>;
export type GetPoliciesByStatusReportsLazyQueryHookResult = ReturnType<typeof useGetPoliciesByStatusReportsLazyQuery>;
export type GetPoliciesByStatusReportsQueryResult = Apollo.QueryResult<GetPoliciesByStatusReportsQuery, GetPoliciesByStatusReportsQueryVariables>;
export const GetAllPoliciesForReportDocument = gql`
    query getAllPoliciesForReport($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: junction_directus_users_policies_filter) {
  junction_directus_users_policies(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...PoliciesForReport
  }
  junction_directus_users_policies_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${PoliciesForReportFragmentDoc}`;

/**
 * __useGetAllPoliciesForReportQuery__
 *
 * To run a query within a React component, call `useGetAllPoliciesForReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPoliciesForReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPoliciesForReportQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllPoliciesForReportQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPoliciesForReportQuery, GetAllPoliciesForReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPoliciesForReportQuery, GetAllPoliciesForReportQueryVariables>(GetAllPoliciesForReportDocument, options);
      }
export function useGetAllPoliciesForReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPoliciesForReportQuery, GetAllPoliciesForReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPoliciesForReportQuery, GetAllPoliciesForReportQueryVariables>(GetAllPoliciesForReportDocument, options);
        }
export type GetAllPoliciesForReportQueryHookResult = ReturnType<typeof useGetAllPoliciesForReportQuery>;
export type GetAllPoliciesForReportLazyQueryHookResult = ReturnType<typeof useGetAllPoliciesForReportLazyQuery>;
export type GetAllPoliciesForReportQueryResult = Apollo.QueryResult<GetAllPoliciesForReportQuery, GetAllPoliciesForReportQueryVariables>;
export const CreatePolicyDocument = gql`
    mutation createPolicy($data: create_policies_input!) {
  create_policies_item(data: $data) {
    id
  }
}
    `;
export type CreatePolicyMutationFn = Apollo.MutationFunction<CreatePolicyMutation, CreatePolicyMutationVariables>;

/**
 * __useCreatePolicyMutation__
 *
 * To run a mutation, you first call `useCreatePolicyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePolicyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPolicyMutation, { data, loading, error }] = useCreatePolicyMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePolicyMutation(baseOptions?: Apollo.MutationHookOptions<CreatePolicyMutation, CreatePolicyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatePolicyMutation, CreatePolicyMutationVariables>(CreatePolicyDocument, options);
      }
export type CreatePolicyMutationHookResult = ReturnType<typeof useCreatePolicyMutation>;
export type CreatePolicyMutationResult = Apollo.MutationResult<CreatePolicyMutation>;
export type CreatePolicyMutationOptions = Apollo.BaseMutationOptions<CreatePolicyMutation, CreatePolicyMutationVariables>;
export const UpdatePoliciesDocument = gql`
    mutation updatePolicies($ids: [ID]!, $data: update_policies_input!) {
  update_policies_items(ids: $ids, data: $data) {
    id
  }
}
    `;
export type UpdatePoliciesMutationFn = Apollo.MutationFunction<UpdatePoliciesMutation, UpdatePoliciesMutationVariables>;

/**
 * __useUpdatePoliciesMutation__
 *
 * To run a mutation, you first call `useUpdatePoliciesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePoliciesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePoliciesMutation, { data, loading, error }] = useUpdatePoliciesMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePoliciesMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePoliciesMutation, UpdatePoliciesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePoliciesMutation, UpdatePoliciesMutationVariables>(UpdatePoliciesDocument, options);
      }
export type UpdatePoliciesMutationHookResult = ReturnType<typeof useUpdatePoliciesMutation>;
export type UpdatePoliciesMutationResult = Apollo.MutationResult<UpdatePoliciesMutation>;
export type UpdatePoliciesMutationOptions = Apollo.BaseMutationOptions<UpdatePoliciesMutation, UpdatePoliciesMutationVariables>;
export const UpdatePolicyDocument = gql`
    mutation updatePolicy($id: ID!, $data: update_policies_input!) {
  update_policies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdatePolicyMutationFn = Apollo.MutationFunction<UpdatePolicyMutation, UpdatePolicyMutationVariables>;

/**
 * __useUpdatePolicyMutation__
 *
 * To run a mutation, you first call `useUpdatePolicyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePolicyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePolicyMutation, { data, loading, error }] = useUpdatePolicyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePolicyMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePolicyMutation, UpdatePolicyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePolicyMutation, UpdatePolicyMutationVariables>(UpdatePolicyDocument, options);
      }
export type UpdatePolicyMutationHookResult = ReturnType<typeof useUpdatePolicyMutation>;
export type UpdatePolicyMutationResult = Apollo.MutationResult<UpdatePolicyMutation>;
export type UpdatePolicyMutationOptions = Apollo.BaseMutationOptions<UpdatePolicyMutation, UpdatePolicyMutationVariables>;
export const DeletePolicyDocument = gql`
    mutation deletePolicy($id: ID!) {
  update_policies_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeletePolicyMutationFn = Apollo.MutationFunction<DeletePolicyMutation, DeletePolicyMutationVariables>;

/**
 * __useDeletePolicyMutation__
 *
 * To run a mutation, you first call `useDeletePolicyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePolicyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePolicyMutation, { data, loading, error }] = useDeletePolicyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeletePolicyMutation(baseOptions?: Apollo.MutationHookOptions<DeletePolicyMutation, DeletePolicyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeletePolicyMutation, DeletePolicyMutationVariables>(DeletePolicyDocument, options);
      }
export type DeletePolicyMutationHookResult = ReturnType<typeof useDeletePolicyMutation>;
export type DeletePolicyMutationResult = Apollo.MutationResult<DeletePolicyMutation>;
export type DeletePolicyMutationOptions = Apollo.BaseMutationOptions<DeletePolicyMutation, DeletePolicyMutationVariables>;
export const DeletePolicyAgenciesDocument = gql`
    mutation deletePolicyAgencies($ids: [ID]!) {
  delete_junction_policies_agencies_items(ids: $ids) {
    ids
  }
}
    `;
export type DeletePolicyAgenciesMutationFn = Apollo.MutationFunction<DeletePolicyAgenciesMutation, DeletePolicyAgenciesMutationVariables>;

/**
 * __useDeletePolicyAgenciesMutation__
 *
 * To run a mutation, you first call `useDeletePolicyAgenciesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePolicyAgenciesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePolicyAgenciesMutation, { data, loading, error }] = useDeletePolicyAgenciesMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useDeletePolicyAgenciesMutation(baseOptions?: Apollo.MutationHookOptions<DeletePolicyAgenciesMutation, DeletePolicyAgenciesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeletePolicyAgenciesMutation, DeletePolicyAgenciesMutationVariables>(DeletePolicyAgenciesDocument, options);
      }
export type DeletePolicyAgenciesMutationHookResult = ReturnType<typeof useDeletePolicyAgenciesMutation>;
export type DeletePolicyAgenciesMutationResult = Apollo.MutationResult<DeletePolicyAgenciesMutation>;
export type DeletePolicyAgenciesMutationOptions = Apollo.BaseMutationOptions<DeletePolicyAgenciesMutation, DeletePolicyAgenciesMutationVariables>;
export const UpdatePoliciesAssignmentDocument = gql`
    mutation updatePoliciesAssignment($id: ID!, $data: update_junction_directus_users_policies_input!) {
  update_junction_directus_users_policies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdatePoliciesAssignmentMutationFn = Apollo.MutationFunction<UpdatePoliciesAssignmentMutation, UpdatePoliciesAssignmentMutationVariables>;

/**
 * __useUpdatePoliciesAssignmentMutation__
 *
 * To run a mutation, you first call `useUpdatePoliciesAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePoliciesAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePoliciesAssignmentMutation, { data, loading, error }] = useUpdatePoliciesAssignmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePoliciesAssignmentMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePoliciesAssignmentMutation, UpdatePoliciesAssignmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePoliciesAssignmentMutation, UpdatePoliciesAssignmentMutationVariables>(UpdatePoliciesAssignmentDocument, options);
      }
export type UpdatePoliciesAssignmentMutationHookResult = ReturnType<typeof useUpdatePoliciesAssignmentMutation>;
export type UpdatePoliciesAssignmentMutationResult = Apollo.MutationResult<UpdatePoliciesAssignmentMutation>;
export type UpdatePoliciesAssignmentMutationOptions = Apollo.BaseMutationOptions<UpdatePoliciesAssignmentMutation, UpdatePoliciesAssignmentMutationVariables>;
export const UpdateExamCompetencyDocument = gql`
    mutation updateExamCompetency($id: ID!, $data: update_junction_directus_users_exams_input!) {
  update_junction_directus_users_exams_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateExamCompetencyMutationFn = Apollo.MutationFunction<UpdateExamCompetencyMutation, UpdateExamCompetencyMutationVariables>;

/**
 * __useUpdateExamCompetencyMutation__
 *
 * To run a mutation, you first call `useUpdateExamCompetencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateExamCompetencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateExamCompetencyMutation, { data, loading, error }] = useUpdateExamCompetencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateExamCompetencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateExamCompetencyMutation, UpdateExamCompetencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateExamCompetencyMutation, UpdateExamCompetencyMutationVariables>(UpdateExamCompetencyDocument, options);
      }
export type UpdateExamCompetencyMutationHookResult = ReturnType<typeof useUpdateExamCompetencyMutation>;
export type UpdateExamCompetencyMutationResult = Apollo.MutationResult<UpdateExamCompetencyMutation>;
export type UpdateExamCompetencyMutationOptions = Apollo.BaseMutationOptions<UpdateExamCompetencyMutation, UpdateExamCompetencyMutationVariables>;
export const UpdatePolicyCompetencyDocument = gql`
    mutation updatePolicyCompetency($id: ID!, $data: update_junction_directus_users_policies_input!) {
  update_junction_directus_users_policies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdatePolicyCompetencyMutationFn = Apollo.MutationFunction<UpdatePolicyCompetencyMutation, UpdatePolicyCompetencyMutationVariables>;

/**
 * __useUpdatePolicyCompetencyMutation__
 *
 * To run a mutation, you first call `useUpdatePolicyCompetencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePolicyCompetencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePolicyCompetencyMutation, { data, loading, error }] = useUpdatePolicyCompetencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePolicyCompetencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePolicyCompetencyMutation, UpdatePolicyCompetencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePolicyCompetencyMutation, UpdatePolicyCompetencyMutationVariables>(UpdatePolicyCompetencyDocument, options);
      }
export type UpdatePolicyCompetencyMutationHookResult = ReturnType<typeof useUpdatePolicyCompetencyMutation>;
export type UpdatePolicyCompetencyMutationResult = Apollo.MutationResult<UpdatePolicyCompetencyMutation>;
export type UpdatePolicyCompetencyMutationOptions = Apollo.BaseMutationOptions<UpdatePolicyCompetencyMutation, UpdatePolicyCompetencyMutationVariables>;
export const UpdateDocumentCompetencyDocument = gql`
    mutation updateDocumentCompetency($id: ID!, $data: update_junction_directus_users_documents_input!) {
  update_junction_directus_users_documents_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateDocumentCompetencyMutationFn = Apollo.MutationFunction<UpdateDocumentCompetencyMutation, UpdateDocumentCompetencyMutationVariables>;

/**
 * __useUpdateDocumentCompetencyMutation__
 *
 * To run a mutation, you first call `useUpdateDocumentCompetencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDocumentCompetencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDocumentCompetencyMutation, { data, loading, error }] = useUpdateDocumentCompetencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDocumentCompetencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateDocumentCompetencyMutation, UpdateDocumentCompetencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateDocumentCompetencyMutation, UpdateDocumentCompetencyMutationVariables>(UpdateDocumentCompetencyDocument, options);
      }
export type UpdateDocumentCompetencyMutationHookResult = ReturnType<typeof useUpdateDocumentCompetencyMutation>;
export type UpdateDocumentCompetencyMutationResult = Apollo.MutationResult<UpdateDocumentCompetencyMutation>;
export type UpdateDocumentCompetencyMutationOptions = Apollo.BaseMutationOptions<UpdateDocumentCompetencyMutation, UpdateDocumentCompetencyMutationVariables>;
export const UpdateModuleCompetencyDocument = gql`
    mutation updateModuleCompetency($id: ID!, $data: update_junction_modules_definition_directus_users_input!) {
  update_junction_modules_definition_directus_users_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateModuleCompetencyMutationFn = Apollo.MutationFunction<UpdateModuleCompetencyMutation, UpdateModuleCompetencyMutationVariables>;

/**
 * __useUpdateModuleCompetencyMutation__
 *
 * To run a mutation, you first call `useUpdateModuleCompetencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModuleCompetencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModuleCompetencyMutation, { data, loading, error }] = useUpdateModuleCompetencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateModuleCompetencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModuleCompetencyMutation, UpdateModuleCompetencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModuleCompetencyMutation, UpdateModuleCompetencyMutationVariables>(UpdateModuleCompetencyDocument, options);
      }
export type UpdateModuleCompetencyMutationHookResult = ReturnType<typeof useUpdateModuleCompetencyMutation>;
export type UpdateModuleCompetencyMutationResult = Apollo.MutationResult<UpdateModuleCompetencyMutation>;
export type UpdateModuleCompetencyMutationOptions = Apollo.BaseMutationOptions<UpdateModuleCompetencyMutation, UpdateModuleCompetencyMutationVariables>;
export const UpdateSkillChecklistCompetencyDocument = gql`
    mutation updateSkillChecklistCompetency($id: ID!, $data: update_junction_sc_definitions_directus_users_input!) {
  update_junction_sc_definitions_directus_users_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateSkillChecklistCompetencyMutationFn = Apollo.MutationFunction<UpdateSkillChecklistCompetencyMutation, UpdateSkillChecklistCompetencyMutationVariables>;

/**
 * __useUpdateSkillChecklistCompetencyMutation__
 *
 * To run a mutation, you first call `useUpdateSkillChecklistCompetencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSkillChecklistCompetencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSkillChecklistCompetencyMutation, { data, loading, error }] = useUpdateSkillChecklistCompetencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSkillChecklistCompetencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSkillChecklistCompetencyMutation, UpdateSkillChecklistCompetencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSkillChecklistCompetencyMutation, UpdateSkillChecklistCompetencyMutationVariables>(UpdateSkillChecklistCompetencyDocument, options);
      }
export type UpdateSkillChecklistCompetencyMutationHookResult = ReturnType<typeof useUpdateSkillChecklistCompetencyMutation>;
export type UpdateSkillChecklistCompetencyMutationResult = Apollo.MutationResult<UpdateSkillChecklistCompetencyMutation>;
export type UpdateSkillChecklistCompetencyMutationOptions = Apollo.BaseMutationOptions<UpdateSkillChecklistCompetencyMutation, UpdateSkillChecklistCompetencyMutationVariables>;
export const GetCategoriesForScDocument = gql`
    query getCategoriesForSC($search: String, $limit: Int) {
  categories(
    filter: {status: {_eq: "published"}, type: {_eq: "modality"}}
    search: $search
    limit: $limit
  ) {
    id
    title
  }
}
    `;

/**
 * __useGetCategoriesForScQuery__
 *
 * To run a query within a React component, call `useGetCategoriesForScQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoriesForScQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoriesForScQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetCategoriesForScQuery(baseOptions?: Apollo.QueryHookOptions<GetCategoriesForScQuery, GetCategoriesForScQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoriesForScQuery, GetCategoriesForScQueryVariables>(GetCategoriesForScDocument, options);
      }
export function useGetCategoriesForScLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoriesForScQuery, GetCategoriesForScQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoriesForScQuery, GetCategoriesForScQueryVariables>(GetCategoriesForScDocument, options);
        }
export type GetCategoriesForScQueryHookResult = ReturnType<typeof useGetCategoriesForScQuery>;
export type GetCategoriesForScLazyQueryHookResult = ReturnType<typeof useGetCategoriesForScLazyQuery>;
export type GetCategoriesForScQueryResult = Apollo.QueryResult<GetCategoriesForScQuery, GetCategoriesForScQueryVariables>;
export const SysUsersWithSkillChecklistsDocument = gql`
    query SysUsersWithSkillChecklists($search: String, $limit: Int!, $filter: directus_users_filter) {
  users(filter: $filter, search: $search, limit: $limit) {
    id
    first_name
    last_name
  }
}
    `;

/**
 * __useSysUsersWithSkillChecklistsQuery__
 *
 * To run a query within a React component, call `useSysUsersWithSkillChecklistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersWithSkillChecklistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersWithSkillChecklistsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersWithSkillChecklistsQuery(baseOptions: Apollo.QueryHookOptions<SysUsersWithSkillChecklistsQuery, SysUsersWithSkillChecklistsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersWithSkillChecklistsQuery, SysUsersWithSkillChecklistsQueryVariables>(SysUsersWithSkillChecklistsDocument, options);
      }
export function useSysUsersWithSkillChecklistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersWithSkillChecklistsQuery, SysUsersWithSkillChecklistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersWithSkillChecklistsQuery, SysUsersWithSkillChecklistsQueryVariables>(SysUsersWithSkillChecklistsDocument, options);
        }
export type SysUsersWithSkillChecklistsQueryHookResult = ReturnType<typeof useSysUsersWithSkillChecklistsQuery>;
export type SysUsersWithSkillChecklistsLazyQueryHookResult = ReturnType<typeof useSysUsersWithSkillChecklistsLazyQuery>;
export type SysUsersWithSkillChecklistsQueryResult = Apollo.QueryResult<SysUsersWithSkillChecklistsQuery, SysUsersWithSkillChecklistsQueryVariables>;
export const GetAllSkillChecklistsOnReportDocument = gql`
    query GetAllSkillChecklistsOnReport($search: String, $limit: Int!, $filter: sc_definitions_filter) {
  sc_definitions(filter: $filter, search: $search, limit: $limit) {
    id
    title
  }
}
    `;

/**
 * __useGetAllSkillChecklistsOnReportQuery__
 *
 * To run a query within a React component, call `useGetAllSkillChecklistsOnReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSkillChecklistsOnReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSkillChecklistsOnReportQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllSkillChecklistsOnReportQuery(baseOptions: Apollo.QueryHookOptions<GetAllSkillChecklistsOnReportQuery, GetAllSkillChecklistsOnReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSkillChecklistsOnReportQuery, GetAllSkillChecklistsOnReportQueryVariables>(GetAllSkillChecklistsOnReportDocument, options);
      }
export function useGetAllSkillChecklistsOnReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSkillChecklistsOnReportQuery, GetAllSkillChecklistsOnReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSkillChecklistsOnReportQuery, GetAllSkillChecklistsOnReportQueryVariables>(GetAllSkillChecklistsOnReportDocument, options);
        }
export type GetAllSkillChecklistsOnReportQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsOnReportQuery>;
export type GetAllSkillChecklistsOnReportLazyQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsOnReportLazyQuery>;
export type GetAllSkillChecklistsOnReportQueryResult = Apollo.QueryResult<GetAllSkillChecklistsOnReportQuery, GetAllSkillChecklistsOnReportQueryVariables>;
export const GetAllSkillChecklistsForUserFilterDocument = gql`
    query GetAllSkillChecklistsForUserFilter($search: String, $limit: Int!, $filter: junction_sc_definitions_directus_users_filter) {
  junction_sc_definitions_directus_users(
    filter: $filter
    search: $search
    limit: $limit
  ) {
    sc_definitions_id {
      id
      title
    }
  }
}
    `;

/**
 * __useGetAllSkillChecklistsForUserFilterQuery__
 *
 * To run a query within a React component, call `useGetAllSkillChecklistsForUserFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSkillChecklistsForUserFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSkillChecklistsForUserFilterQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllSkillChecklistsForUserFilterQuery(baseOptions: Apollo.QueryHookOptions<GetAllSkillChecklistsForUserFilterQuery, GetAllSkillChecklistsForUserFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSkillChecklistsForUserFilterQuery, GetAllSkillChecklistsForUserFilterQueryVariables>(GetAllSkillChecklistsForUserFilterDocument, options);
      }
export function useGetAllSkillChecklistsForUserFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSkillChecklistsForUserFilterQuery, GetAllSkillChecklistsForUserFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSkillChecklistsForUserFilterQuery, GetAllSkillChecklistsForUserFilterQueryVariables>(GetAllSkillChecklistsForUserFilterDocument, options);
        }
export type GetAllSkillChecklistsForUserFilterQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsForUserFilterQuery>;
export type GetAllSkillChecklistsForUserFilterLazyQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsForUserFilterLazyQuery>;
export type GetAllSkillChecklistsForUserFilterQueryResult = Apollo.QueryResult<GetAllSkillChecklistsForUserFilterQuery, GetAllSkillChecklistsForUserFilterQueryVariables>;
export const GetAllSkillChecklistsTotalsReportsDocument = gql`
    query GetAllSkillChecklistsTotalsReports($notStartedFilter: junction_sc_definitions_directus_users_filter, $completedFilter: junction_sc_definitions_directus_users_filter, $expiredFilter: junction_sc_definitions_directus_users_filter, $totalFilter: junction_sc_definitions_directus_users_filter) {
  notStarted: junction_sc_definitions_directus_users_aggregated(
    filter: $notStartedFilter
  ) {
    count {
      id
    }
  }
  completed: junction_sc_definitions_directus_users_aggregated(
    filter: $completedFilter
  ) {
    count {
      id
    }
  }
  expired: junction_sc_definitions_directus_users_aggregated(
    filter: $expiredFilter
  ) {
    count {
      id
    }
  }
  total: junction_sc_definitions_directus_users_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetAllSkillChecklistsTotalsReportsQuery__
 *
 * To run a query within a React component, call `useGetAllSkillChecklistsTotalsReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSkillChecklistsTotalsReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSkillChecklistsTotalsReportsQuery({
 *   variables: {
 *      notStartedFilter: // value for 'notStartedFilter'
 *      completedFilter: // value for 'completedFilter'
 *      expiredFilter: // value for 'expiredFilter'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetAllSkillChecklistsTotalsReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllSkillChecklistsTotalsReportsQuery, GetAllSkillChecklistsTotalsReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSkillChecklistsTotalsReportsQuery, GetAllSkillChecklistsTotalsReportsQueryVariables>(GetAllSkillChecklistsTotalsReportsDocument, options);
      }
export function useGetAllSkillChecklistsTotalsReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSkillChecklistsTotalsReportsQuery, GetAllSkillChecklistsTotalsReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSkillChecklistsTotalsReportsQuery, GetAllSkillChecklistsTotalsReportsQueryVariables>(GetAllSkillChecklistsTotalsReportsDocument, options);
        }
export type GetAllSkillChecklistsTotalsReportsQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsTotalsReportsQuery>;
export type GetAllSkillChecklistsTotalsReportsLazyQueryHookResult = ReturnType<typeof useGetAllSkillChecklistsTotalsReportsLazyQuery>;
export type GetAllSkillChecklistsTotalsReportsQueryResult = Apollo.QueryResult<GetAllSkillChecklistsTotalsReportsQuery, GetAllSkillChecklistsTotalsReportsQueryVariables>;
export const GetAllAssignedSkillChecklistOnReportDocument = gql`
    query GetAllAssignedSkillChecklistOnReport($offset: Int, $limit: Int, $sort: [String], $filter: junction_sc_definitions_directus_users_filter) {
  junction_sc_definitions_directus_users(
    limit: $limit
    offset: $offset
    sort: $sort
    filter: $filter
  ) {
    ...SkillChecklistAssignment
  }
  junction_sc_definitions_directus_users_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${SkillChecklistAssignmentFragmentDoc}`;

/**
 * __useGetAllAssignedSkillChecklistOnReportQuery__
 *
 * To run a query within a React component, call `useGetAllAssignedSkillChecklistOnReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllAssignedSkillChecklistOnReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllAssignedSkillChecklistOnReportQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllAssignedSkillChecklistOnReportQuery(baseOptions?: Apollo.QueryHookOptions<GetAllAssignedSkillChecklistOnReportQuery, GetAllAssignedSkillChecklistOnReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllAssignedSkillChecklistOnReportQuery, GetAllAssignedSkillChecklistOnReportQueryVariables>(GetAllAssignedSkillChecklistOnReportDocument, options);
      }
export function useGetAllAssignedSkillChecklistOnReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllAssignedSkillChecklistOnReportQuery, GetAllAssignedSkillChecklistOnReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllAssignedSkillChecklistOnReportQuery, GetAllAssignedSkillChecklistOnReportQueryVariables>(GetAllAssignedSkillChecklistOnReportDocument, options);
        }
export type GetAllAssignedSkillChecklistOnReportQueryHookResult = ReturnType<typeof useGetAllAssignedSkillChecklistOnReportQuery>;
export type GetAllAssignedSkillChecklistOnReportLazyQueryHookResult = ReturnType<typeof useGetAllAssignedSkillChecklistOnReportLazyQuery>;
export type GetAllAssignedSkillChecklistOnReportQueryResult = Apollo.QueryResult<GetAllAssignedSkillChecklistOnReportQuery, GetAllAssignedSkillChecklistOnReportQueryVariables>;
export const GetSkillChecklistsAssignmentsDocument = gql`
    query GetSkillChecklistsAssignments($filter: junction_sc_definitions_directus_users_filter, $search: String, $limit: Int, $offset: Int, $sort: [String]) {
  junction_sc_definitions_directus_users(
    filter: $filter
    limit: $limit
    search: $search
    offset: $offset
    sort: $sort
  ) {
    ...SkillChecklistAssignment
  }
}
    ${SkillChecklistAssignmentFragmentDoc}`;

/**
 * __useGetSkillChecklistsAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetSkillChecklistsAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillChecklistsAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillChecklistsAssignmentsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetSkillChecklistsAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetSkillChecklistsAssignmentsQuery, GetSkillChecklistsAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillChecklistsAssignmentsQuery, GetSkillChecklistsAssignmentsQueryVariables>(GetSkillChecklistsAssignmentsDocument, options);
      }
export function useGetSkillChecklistsAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillChecklistsAssignmentsQuery, GetSkillChecklistsAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillChecklistsAssignmentsQuery, GetSkillChecklistsAssignmentsQueryVariables>(GetSkillChecklistsAssignmentsDocument, options);
        }
export type GetSkillChecklistsAssignmentsQueryHookResult = ReturnType<typeof useGetSkillChecklistsAssignmentsQuery>;
export type GetSkillChecklistsAssignmentsLazyQueryHookResult = ReturnType<typeof useGetSkillChecklistsAssignmentsLazyQuery>;
export type GetSkillChecklistsAssignmentsQueryResult = Apollo.QueryResult<GetSkillChecklistsAssignmentsQuery, GetSkillChecklistsAssignmentsQueryVariables>;
export const GetTableSkillsChecklistsDocument = gql`
    query getTableSkillsChecklists($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: sc_definitions_filter) {
  sc_definitions(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...SkillChecklist
  }
}
    ${SkillChecklistFragmentDoc}`;

/**
 * __useGetTableSkillsChecklistsQuery__
 *
 * To run a query within a React component, call `useGetTableSkillsChecklistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTableSkillsChecklistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTableSkillsChecklistsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetTableSkillsChecklistsQuery(baseOptions?: Apollo.QueryHookOptions<GetTableSkillsChecklistsQuery, GetTableSkillsChecklistsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTableSkillsChecklistsQuery, GetTableSkillsChecklistsQueryVariables>(GetTableSkillsChecklistsDocument, options);
      }
export function useGetTableSkillsChecklistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTableSkillsChecklistsQuery, GetTableSkillsChecklistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTableSkillsChecklistsQuery, GetTableSkillsChecklistsQueryVariables>(GetTableSkillsChecklistsDocument, options);
        }
export type GetTableSkillsChecklistsQueryHookResult = ReturnType<typeof useGetTableSkillsChecklistsQuery>;
export type GetTableSkillsChecklistsLazyQueryHookResult = ReturnType<typeof useGetTableSkillsChecklistsLazyQuery>;
export type GetTableSkillsChecklistsQueryResult = Apollo.QueryResult<GetTableSkillsChecklistsQuery, GetTableSkillsChecklistsQueryVariables>;
export const GetTableSkillsChecklistsTotalPagesDocument = gql`
    query getTableSkillsChecklistsTotalPages($search: String, $filter: sc_definitions_filter) {
  sc_definitions_aggregated(search: $search, filter: $filter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetTableSkillsChecklistsTotalPagesQuery__
 *
 * To run a query within a React component, call `useGetTableSkillsChecklistsTotalPagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTableSkillsChecklistsTotalPagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTableSkillsChecklistsTotalPagesQuery({
 *   variables: {
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetTableSkillsChecklistsTotalPagesQuery(baseOptions?: Apollo.QueryHookOptions<GetTableSkillsChecklistsTotalPagesQuery, GetTableSkillsChecklistsTotalPagesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTableSkillsChecklistsTotalPagesQuery, GetTableSkillsChecklistsTotalPagesQueryVariables>(GetTableSkillsChecklistsTotalPagesDocument, options);
      }
export function useGetTableSkillsChecklistsTotalPagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTableSkillsChecklistsTotalPagesQuery, GetTableSkillsChecklistsTotalPagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTableSkillsChecklistsTotalPagesQuery, GetTableSkillsChecklistsTotalPagesQueryVariables>(GetTableSkillsChecklistsTotalPagesDocument, options);
        }
export type GetTableSkillsChecklistsTotalPagesQueryHookResult = ReturnType<typeof useGetTableSkillsChecklistsTotalPagesQuery>;
export type GetTableSkillsChecklistsTotalPagesLazyQueryHookResult = ReturnType<typeof useGetTableSkillsChecklistsTotalPagesLazyQuery>;
export type GetTableSkillsChecklistsTotalPagesQueryResult = Apollo.QueryResult<GetTableSkillsChecklistsTotalPagesQuery, GetTableSkillsChecklistsTotalPagesQueryVariables>;
export const GetSkillChecklistDetailDocument = gql`
    query getSkillChecklistDetail($checklistId: ID!) {
  sc_definitions_by_id(id: $checklistId) {
    ...SkillChecklist
  }
}
    ${SkillChecklistFragmentDoc}`;

/**
 * __useGetSkillChecklistDetailQuery__
 *
 * To run a query within a React component, call `useGetSkillChecklistDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillChecklistDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillChecklistDetailQuery({
 *   variables: {
 *      checklistId: // value for 'checklistId'
 *   },
 * });
 */
export function useGetSkillChecklistDetailQuery(baseOptions: Apollo.QueryHookOptions<GetSkillChecklistDetailQuery, GetSkillChecklistDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillChecklistDetailQuery, GetSkillChecklistDetailQueryVariables>(GetSkillChecklistDetailDocument, options);
      }
export function useGetSkillChecklistDetailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillChecklistDetailQuery, GetSkillChecklistDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillChecklistDetailQuery, GetSkillChecklistDetailQueryVariables>(GetSkillChecklistDetailDocument, options);
        }
export type GetSkillChecklistDetailQueryHookResult = ReturnType<typeof useGetSkillChecklistDetailQuery>;
export type GetSkillChecklistDetailLazyQueryHookResult = ReturnType<typeof useGetSkillChecklistDetailLazyQuery>;
export type GetSkillChecklistDetailQueryResult = Apollo.QueryResult<GetSkillChecklistDetailQuery, GetSkillChecklistDetailQueryVariables>;
export const GetSkillChecklistsDetailsDocument = gql`
    query getSkillChecklistsDetails($filter: sc_definitions_filter, $limit: Int, $search: String) {
  sc_definitions(filter: $filter, limit: $limit, search: $search) {
    ...SkillChecklist
  }
}
    ${SkillChecklistFragmentDoc}`;

/**
 * __useGetSkillChecklistsDetailsQuery__
 *
 * To run a query within a React component, call `useGetSkillChecklistsDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillChecklistsDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillChecklistsDetailsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      limit: // value for 'limit'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetSkillChecklistsDetailsQuery(baseOptions?: Apollo.QueryHookOptions<GetSkillChecklistsDetailsQuery, GetSkillChecklistsDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillChecklistsDetailsQuery, GetSkillChecklistsDetailsQueryVariables>(GetSkillChecklistsDetailsDocument, options);
      }
export function useGetSkillChecklistsDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillChecklistsDetailsQuery, GetSkillChecklistsDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillChecklistsDetailsQuery, GetSkillChecklistsDetailsQueryVariables>(GetSkillChecklistsDetailsDocument, options);
        }
export type GetSkillChecklistsDetailsQueryHookResult = ReturnType<typeof useGetSkillChecklistsDetailsQuery>;
export type GetSkillChecklistsDetailsLazyQueryHookResult = ReturnType<typeof useGetSkillChecklistsDetailsLazyQuery>;
export type GetSkillChecklistsDetailsQueryResult = Apollo.QueryResult<GetSkillChecklistsDetailsQuery, GetSkillChecklistsDetailsQueryVariables>;
export const GetSkillsChecklistsCategoriesDocument = gql`
    query getSkillsChecklistsCategories {
  categories(filter: {status: {_eq: "published"}, type: {_eq: "modality"}}) {
    id
    title
  }
}
    `;

/**
 * __useGetSkillsChecklistsCategoriesQuery__
 *
 * To run a query within a React component, call `useGetSkillsChecklistsCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillsChecklistsCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillsChecklistsCategoriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSkillsChecklistsCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetSkillsChecklistsCategoriesQuery, GetSkillsChecklistsCategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillsChecklistsCategoriesQuery, GetSkillsChecklistsCategoriesQueryVariables>(GetSkillsChecklistsCategoriesDocument, options);
      }
export function useGetSkillsChecklistsCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillsChecklistsCategoriesQuery, GetSkillsChecklistsCategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillsChecklistsCategoriesQuery, GetSkillsChecklistsCategoriesQueryVariables>(GetSkillsChecklistsCategoriesDocument, options);
        }
export type GetSkillsChecklistsCategoriesQueryHookResult = ReturnType<typeof useGetSkillsChecklistsCategoriesQuery>;
export type GetSkillsChecklistsCategoriesLazyQueryHookResult = ReturnType<typeof useGetSkillsChecklistsCategoriesLazyQuery>;
export type GetSkillsChecklistsCategoriesQueryResult = Apollo.QueryResult<GetSkillsChecklistsCategoriesQuery, GetSkillsChecklistsCategoriesQueryVariables>;
export const StartSkillChecklistDocument = gql`
    mutation startSkillChecklist($assignmentId: ID!, $versionId: ID!, $questions: JSON) {
  update_junction_sc_definitions_directus_users_item(
    id: $assignmentId
    data: {questions: $questions, skillchecklist_version: {id: $versionId}, finished_on: null, status: "PENDING", expiration_date: null}
  ) {
    id
  }
}
    `;
export type StartSkillChecklistMutationFn = Apollo.MutationFunction<StartSkillChecklistMutation, StartSkillChecklistMutationVariables>;

/**
 * __useStartSkillChecklistMutation__
 *
 * To run a mutation, you first call `useStartSkillChecklistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartSkillChecklistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startSkillChecklistMutation, { data, loading, error }] = useStartSkillChecklistMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      versionId: // value for 'versionId'
 *      questions: // value for 'questions'
 *   },
 * });
 */
export function useStartSkillChecklistMutation(baseOptions?: Apollo.MutationHookOptions<StartSkillChecklistMutation, StartSkillChecklistMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<StartSkillChecklistMutation, StartSkillChecklistMutationVariables>(StartSkillChecklistDocument, options);
      }
export type StartSkillChecklistMutationHookResult = ReturnType<typeof useStartSkillChecklistMutation>;
export type StartSkillChecklistMutationResult = Apollo.MutationResult<StartSkillChecklistMutation>;
export type StartSkillChecklistMutationOptions = Apollo.BaseMutationOptions<StartSkillChecklistMutation, StartSkillChecklistMutationVariables>;
export const UpdateSkillChecklistAssignmentDocument = gql`
    mutation updateSkillChecklistAssignment($assignmentId: ID!, $data: update_junction_sc_definitions_directus_users_input!) {
  update_junction_sc_definitions_directus_users_item(
    id: $assignmentId
    data: $data
  ) {
    id
  }
}
    `;
export type UpdateSkillChecklistAssignmentMutationFn = Apollo.MutationFunction<UpdateSkillChecklistAssignmentMutation, UpdateSkillChecklistAssignmentMutationVariables>;

/**
 * __useUpdateSkillChecklistAssignmentMutation__
 *
 * To run a mutation, you first call `useUpdateSkillChecklistAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSkillChecklistAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSkillChecklistAssignmentMutation, { data, loading, error }] = useUpdateSkillChecklistAssignmentMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSkillChecklistAssignmentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSkillChecklistAssignmentMutation, UpdateSkillChecklistAssignmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSkillChecklistAssignmentMutation, UpdateSkillChecklistAssignmentMutationVariables>(UpdateSkillChecklistAssignmentDocument, options);
      }
export type UpdateSkillChecklistAssignmentMutationHookResult = ReturnType<typeof useUpdateSkillChecklistAssignmentMutation>;
export type UpdateSkillChecklistAssignmentMutationResult = Apollo.MutationResult<UpdateSkillChecklistAssignmentMutation>;
export type UpdateSkillChecklistAssignmentMutationOptions = Apollo.BaseMutationOptions<UpdateSkillChecklistAssignmentMutation, UpdateSkillChecklistAssignmentMutationVariables>;
export const CreateSkillChecklistDocument = gql`
    mutation createSkillChecklist($data: create_sc_definitions_input!) {
  create_sc_definitions_item(data: $data) {
    id
    versions {
      id
    }
  }
}
    `;
export type CreateSkillChecklistMutationFn = Apollo.MutationFunction<CreateSkillChecklistMutation, CreateSkillChecklistMutationVariables>;

/**
 * __useCreateSkillChecklistMutation__
 *
 * To run a mutation, you first call `useCreateSkillChecklistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSkillChecklistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSkillChecklistMutation, { data, loading, error }] = useCreateSkillChecklistMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSkillChecklistMutation(baseOptions?: Apollo.MutationHookOptions<CreateSkillChecklistMutation, CreateSkillChecklistMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSkillChecklistMutation, CreateSkillChecklistMutationVariables>(CreateSkillChecklistDocument, options);
      }
export type CreateSkillChecklistMutationHookResult = ReturnType<typeof useCreateSkillChecklistMutation>;
export type CreateSkillChecklistMutationResult = Apollo.MutationResult<CreateSkillChecklistMutation>;
export type CreateSkillChecklistMutationOptions = Apollo.BaseMutationOptions<CreateSkillChecklistMutation, CreateSkillChecklistMutationVariables>;
export const UpdateSkillChecklistDocument = gql`
    mutation updateSkillChecklist($id: ID!, $data: update_sc_definitions_input!) {
  update_sc_definitions_item(id: $id, data: $data) {
    id
    last_version {
      id
    }
  }
}
    `;
export type UpdateSkillChecklistMutationFn = Apollo.MutationFunction<UpdateSkillChecklistMutation, UpdateSkillChecklistMutationVariables>;

/**
 * __useUpdateSkillChecklistMutation__
 *
 * To run a mutation, you first call `useUpdateSkillChecklistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSkillChecklistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSkillChecklistMutation, { data, loading, error }] = useUpdateSkillChecklistMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSkillChecklistMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSkillChecklistMutation, UpdateSkillChecklistMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSkillChecklistMutation, UpdateSkillChecklistMutationVariables>(UpdateSkillChecklistDocument, options);
      }
export type UpdateSkillChecklistMutationHookResult = ReturnType<typeof useUpdateSkillChecklistMutation>;
export type UpdateSkillChecklistMutationResult = Apollo.MutationResult<UpdateSkillChecklistMutation>;
export type UpdateSkillChecklistMutationOptions = Apollo.BaseMutationOptions<UpdateSkillChecklistMutation, UpdateSkillChecklistMutationVariables>;
export const CreateSkillChecklistVersionDocument = gql`
    mutation createSkillChecklistVersion($data: create_sc_versions_input!) {
  create_sc_versions_item(data: $data) {
    id
  }
}
    `;
export type CreateSkillChecklistVersionMutationFn = Apollo.MutationFunction<CreateSkillChecklistVersionMutation, CreateSkillChecklistVersionMutationVariables>;

/**
 * __useCreateSkillChecklistVersionMutation__
 *
 * To run a mutation, you first call `useCreateSkillChecklistVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSkillChecklistVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSkillChecklistVersionMutation, { data, loading, error }] = useCreateSkillChecklistVersionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSkillChecklistVersionMutation(baseOptions?: Apollo.MutationHookOptions<CreateSkillChecklistVersionMutation, CreateSkillChecklistVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSkillChecklistVersionMutation, CreateSkillChecklistVersionMutationVariables>(CreateSkillChecklistVersionDocument, options);
      }
export type CreateSkillChecklistVersionMutationHookResult = ReturnType<typeof useCreateSkillChecklistVersionMutation>;
export type CreateSkillChecklistVersionMutationResult = Apollo.MutationResult<CreateSkillChecklistVersionMutation>;
export type CreateSkillChecklistVersionMutationOptions = Apollo.BaseMutationOptions<CreateSkillChecklistVersionMutation, CreateSkillChecklistVersionMutationVariables>;
export const DeleteSkillChecklistDocument = gql`
    mutation deleteSkillChecklist($id: ID!) {
  update_sc_definitions_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteSkillChecklistMutationFn = Apollo.MutationFunction<DeleteSkillChecklistMutation, DeleteSkillChecklistMutationVariables>;

/**
 * __useDeleteSkillChecklistMutation__
 *
 * To run a mutation, you first call `useDeleteSkillChecklistMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSkillChecklistMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSkillChecklistMutation, { data, loading, error }] = useDeleteSkillChecklistMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSkillChecklistMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSkillChecklistMutation, DeleteSkillChecklistMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSkillChecklistMutation, DeleteSkillChecklistMutationVariables>(DeleteSkillChecklistDocument, options);
      }
export type DeleteSkillChecklistMutationHookResult = ReturnType<typeof useDeleteSkillChecklistMutation>;
export type DeleteSkillChecklistMutationResult = Apollo.MutationResult<DeleteSkillChecklistMutation>;
export type DeleteSkillChecklistMutationOptions = Apollo.BaseMutationOptions<DeleteSkillChecklistMutation, DeleteSkillChecklistMutationVariables>;
export const UpdateSkillChecklistVersionDocument = gql`
    mutation updateSkillChecklistVersion($id: ID!, $data: update_sc_versions_input!) {
  update_sc_versions_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateSkillChecklistVersionMutationFn = Apollo.MutationFunction<UpdateSkillChecklistVersionMutation, UpdateSkillChecklistVersionMutationVariables>;

/**
 * __useUpdateSkillChecklistVersionMutation__
 *
 * To run a mutation, you first call `useUpdateSkillChecklistVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSkillChecklistVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSkillChecklistVersionMutation, { data, loading, error }] = useUpdateSkillChecklistVersionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSkillChecklistVersionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSkillChecklistVersionMutation, UpdateSkillChecklistVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSkillChecklistVersionMutation, UpdateSkillChecklistVersionMutationVariables>(UpdateSkillChecklistVersionDocument, options);
      }
export type UpdateSkillChecklistVersionMutationHookResult = ReturnType<typeof useUpdateSkillChecklistVersionMutation>;
export type UpdateSkillChecklistVersionMutationResult = Apollo.MutationResult<UpdateSkillChecklistVersionMutation>;
export type UpdateSkillChecklistVersionMutationOptions = Apollo.BaseMutationOptions<UpdateSkillChecklistVersionMutation, UpdateSkillChecklistVersionMutationVariables>;
export const GetSkillsChecklistsAssignmentsDocument = gql`
    query getSkillsChecklistsAssignments($category: [String], $status: [String], $userId: String!) {
  junction_sc_definitions_directus_users(
    filter: {directus_users_id: {id: {_eq: $userId}}, sc_definitions_id: {category: {id: {_in: $category}}}, status: {_in: $status}, agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}
    sort: "-assigned_on"
  ) {
    ...SkillChecklistAssignment
  }
}
    ${SkillChecklistAssignmentFragmentDoc}`;

/**
 * __useGetSkillsChecklistsAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetSkillsChecklistsAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillsChecklistsAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillsChecklistsAssignmentsQuery({
 *   variables: {
 *      category: // value for 'category'
 *      status: // value for 'status'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetSkillsChecklistsAssignmentsQuery(baseOptions: Apollo.QueryHookOptions<GetSkillsChecklistsAssignmentsQuery, GetSkillsChecklistsAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillsChecklistsAssignmentsQuery, GetSkillsChecklistsAssignmentsQueryVariables>(GetSkillsChecklistsAssignmentsDocument, options);
      }
export function useGetSkillsChecklistsAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillsChecklistsAssignmentsQuery, GetSkillsChecklistsAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillsChecklistsAssignmentsQuery, GetSkillsChecklistsAssignmentsQueryVariables>(GetSkillsChecklistsAssignmentsDocument, options);
        }
export type GetSkillsChecklistsAssignmentsQueryHookResult = ReturnType<typeof useGetSkillsChecklistsAssignmentsQuery>;
export type GetSkillsChecklistsAssignmentsLazyQueryHookResult = ReturnType<typeof useGetSkillsChecklistsAssignmentsLazyQuery>;
export type GetSkillsChecklistsAssignmentsQueryResult = Apollo.QueryResult<GetSkillsChecklistsAssignmentsQuery, GetSkillsChecklistsAssignmentsQueryVariables>;
export const GetSkillChecklistAssignmentDocument = gql`
    query getSkillChecklistAssignment($assignmentId: ID!) {
  junction_sc_definitions_directus_users_by_id(id: $assignmentId) {
    ...SkillChecklistAssignment
  }
}
    ${SkillChecklistAssignmentFragmentDoc}`;

/**
 * __useGetSkillChecklistAssignmentQuery__
 *
 * To run a query within a React component, call `useGetSkillChecklistAssignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillChecklistAssignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillChecklistAssignmentQuery({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *   },
 * });
 */
export function useGetSkillChecklistAssignmentQuery(baseOptions: Apollo.QueryHookOptions<GetSkillChecklistAssignmentQuery, GetSkillChecklistAssignmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillChecklistAssignmentQuery, GetSkillChecklistAssignmentQueryVariables>(GetSkillChecklistAssignmentDocument, options);
      }
export function useGetSkillChecklistAssignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillChecklistAssignmentQuery, GetSkillChecklistAssignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillChecklistAssignmentQuery, GetSkillChecklistAssignmentQueryVariables>(GetSkillChecklistAssignmentDocument, options);
        }
export type GetSkillChecklistAssignmentQueryHookResult = ReturnType<typeof useGetSkillChecklistAssignmentQuery>;
export type GetSkillChecklistAssignmentLazyQueryHookResult = ReturnType<typeof useGetSkillChecklistAssignmentLazyQuery>;
export type GetSkillChecklistAssignmentQueryResult = Apollo.QueryResult<GetSkillChecklistAssignmentQuery, GetSkillChecklistAssignmentQueryVariables>;
export const SetSkillChecklistAssignmentQuestionsDocument = gql`
    mutation setSkillChecklistAssignmentQuestions($assignmentId: ID!, $finished_on: Date, $expires_on: Date, $questions: JSON!, $status: String) {
  update_junction_sc_definitions_directus_users_item(
    id: $assignmentId
    data: {questions: $questions, finished_on: $finished_on, expires_on: $expires_on, status: $status}
  ) {
    id
  }
}
    `;
export type SetSkillChecklistAssignmentQuestionsMutationFn = Apollo.MutationFunction<SetSkillChecklistAssignmentQuestionsMutation, SetSkillChecklistAssignmentQuestionsMutationVariables>;

/**
 * __useSetSkillChecklistAssignmentQuestionsMutation__
 *
 * To run a mutation, you first call `useSetSkillChecklistAssignmentQuestionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetSkillChecklistAssignmentQuestionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setSkillChecklistAssignmentQuestionsMutation, { data, loading, error }] = useSetSkillChecklistAssignmentQuestionsMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      finished_on: // value for 'finished_on'
 *      expires_on: // value for 'expires_on'
 *      questions: // value for 'questions'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useSetSkillChecklistAssignmentQuestionsMutation(baseOptions?: Apollo.MutationHookOptions<SetSkillChecklistAssignmentQuestionsMutation, SetSkillChecklistAssignmentQuestionsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetSkillChecklistAssignmentQuestionsMutation, SetSkillChecklistAssignmentQuestionsMutationVariables>(SetSkillChecklistAssignmentQuestionsDocument, options);
      }
export type SetSkillChecklistAssignmentQuestionsMutationHookResult = ReturnType<typeof useSetSkillChecklistAssignmentQuestionsMutation>;
export type SetSkillChecklistAssignmentQuestionsMutationResult = Apollo.MutationResult<SetSkillChecklistAssignmentQuestionsMutation>;
export type SetSkillChecklistAssignmentQuestionsMutationOptions = Apollo.BaseMutationOptions<SetSkillChecklistAssignmentQuestionsMutation, SetSkillChecklistAssignmentQuestionsMutationVariables>;
export const GetExamResultsDocument = gql`
    query getExamResults($exams_id: String!) {
  exam_results(filter: {exams_id: {id: {_eq: $exams_id}}}) {
    id
    assignment_id {
      status
      attempts_used
    }
    time_taken
    attempt
    correct
    question_versions_id {
      question
    }
  }
}
    `;

/**
 * __useGetExamResultsQuery__
 *
 * To run a query within a React component, call `useGetExamResultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetExamResultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetExamResultsQuery({
 *   variables: {
 *      exams_id: // value for 'exams_id'
 *   },
 * });
 */
export function useGetExamResultsQuery(baseOptions: Apollo.QueryHookOptions<GetExamResultsQuery, GetExamResultsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetExamResultsQuery, GetExamResultsQueryVariables>(GetExamResultsDocument, options);
      }
export function useGetExamResultsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetExamResultsQuery, GetExamResultsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetExamResultsQuery, GetExamResultsQueryVariables>(GetExamResultsDocument, options);
        }
export type GetExamResultsQueryHookResult = ReturnType<typeof useGetExamResultsQuery>;
export type GetExamResultsLazyQueryHookResult = ReturnType<typeof useGetExamResultsLazyQuery>;
export type GetExamResultsQueryResult = Apollo.QueryResult<GetExamResultsQuery, GetExamResultsQueryVariables>;
export const GetAllDocumentsDocument = gql`
    query GetAllDocuments($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: documents_filter) {
  documents(
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
    filter: $filter
  ) {
    ...AllDocumentsForList
  }
  documents_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${AllDocumentsForListFragmentDoc}`;

/**
 * __useGetAllDocumentsQuery__
 *
 * To run a query within a React component, call `useGetAllDocumentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDocumentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDocumentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDocumentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDocumentsQuery, GetAllDocumentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDocumentsQuery, GetAllDocumentsQueryVariables>(GetAllDocumentsDocument, options);
      }
export function useGetAllDocumentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDocumentsQuery, GetAllDocumentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDocumentsQuery, GetAllDocumentsQueryVariables>(GetAllDocumentsDocument, options);
        }
export type GetAllDocumentsQueryHookResult = ReturnType<typeof useGetAllDocumentsQuery>;
export type GetAllDocumentsLazyQueryHookResult = ReturnType<typeof useGetAllDocumentsLazyQuery>;
export type GetAllDocumentsQueryResult = Apollo.QueryResult<GetAllDocumentsQuery, GetAllDocumentsQueryVariables>;
export const GetAllDocumentForAssignCompetencyDocument = gql`
    query getAllDocumentForAssignCompetency($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: documents_filter) {
  documents(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Document
  }
}
    ${DocumentFragmentDoc}`;

/**
 * __useGetAllDocumentForAssignCompetencyQuery__
 *
 * To run a query within a React component, call `useGetAllDocumentForAssignCompetencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDocumentForAssignCompetencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDocumentForAssignCompetencyQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDocumentForAssignCompetencyQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDocumentForAssignCompetencyQuery, GetAllDocumentForAssignCompetencyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDocumentForAssignCompetencyQuery, GetAllDocumentForAssignCompetencyQueryVariables>(GetAllDocumentForAssignCompetencyDocument, options);
      }
export function useGetAllDocumentForAssignCompetencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDocumentForAssignCompetencyQuery, GetAllDocumentForAssignCompetencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDocumentForAssignCompetencyQuery, GetAllDocumentForAssignCompetencyQueryVariables>(GetAllDocumentForAssignCompetencyDocument, options);
        }
export type GetAllDocumentForAssignCompetencyQueryHookResult = ReturnType<typeof useGetAllDocumentForAssignCompetencyQuery>;
export type GetAllDocumentForAssignCompetencyLazyQueryHookResult = ReturnType<typeof useGetAllDocumentForAssignCompetencyLazyQuery>;
export type GetAllDocumentForAssignCompetencyQueryResult = Apollo.QueryResult<GetAllDocumentForAssignCompetencyQuery, GetAllDocumentForAssignCompetencyQueryVariables>;
export const GetDocumentByIdDocument = gql`
    query GetDocumentById($id: ID!) {
  documents_by_id(id: $id) {
    id
    title
    description
    document {
      id
      title
      filename_download
      storage
    }
    status
    categories {
      id
      categories_id {
        id
        title
      }
    }
    agencies {
      id
      agencies_id {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useGetDocumentByIdQuery__
 *
 * To run a query within a React component, call `useGetDocumentByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDocumentByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDocumentByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetDocumentByIdQuery(baseOptions: Apollo.QueryHookOptions<GetDocumentByIdQuery, GetDocumentByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDocumentByIdQuery, GetDocumentByIdQueryVariables>(GetDocumentByIdDocument, options);
      }
export function useGetDocumentByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDocumentByIdQuery, GetDocumentByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDocumentByIdQuery, GetDocumentByIdQueryVariables>(GetDocumentByIdDocument, options);
        }
export type GetDocumentByIdQueryHookResult = ReturnType<typeof useGetDocumentByIdQuery>;
export type GetDocumentByIdLazyQueryHookResult = ReturnType<typeof useGetDocumentByIdLazyQuery>;
export type GetDocumentByIdQueryResult = Apollo.QueryResult<GetDocumentByIdQuery, GetDocumentByIdQueryVariables>;
export const GetDocumentsAssignmentsDocument = gql`
    query GetDocumentsAssignments($offset: Int, $limit: Int, $filter: junction_directus_users_documents_filter) {
  junction_directus_users_documents(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: "-assigned_on"
  ) {
    ...DocumentsAssigments
  }
}
    ${DocumentsAssigmentsFragmentDoc}`;

/**
 * __useGetDocumentsAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetDocumentsAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDocumentsAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDocumentsAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetDocumentsAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetDocumentsAssignmentsQuery, GetDocumentsAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDocumentsAssignmentsQuery, GetDocumentsAssignmentsQueryVariables>(GetDocumentsAssignmentsDocument, options);
      }
export function useGetDocumentsAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDocumentsAssignmentsQuery, GetDocumentsAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDocumentsAssignmentsQuery, GetDocumentsAssignmentsQueryVariables>(GetDocumentsAssignmentsDocument, options);
        }
export type GetDocumentsAssignmentsQueryHookResult = ReturnType<typeof useGetDocumentsAssignmentsQuery>;
export type GetDocumentsAssignmentsLazyQueryHookResult = ReturnType<typeof useGetDocumentsAssignmentsLazyQuery>;
export type GetDocumentsAssignmentsQueryResult = Apollo.QueryResult<GetDocumentsAssignmentsQuery, GetDocumentsAssignmentsQueryVariables>;
export const GetAllDocumentsAssignmentsDocument = gql`
    query GetAllDocumentsAssignments($offset: Int, $limit: Int, $sort: [String], $filter: junction_directus_users_documents_filter) {
  junction_directus_users_documents(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
  ) {
    ...DocumentsAssigments
  }
  junction_directus_users_documents_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${DocumentsAssigmentsFragmentDoc}`;

/**
 * __useGetAllDocumentsAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetAllDocumentsAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDocumentsAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDocumentsAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDocumentsAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDocumentsAssignmentsQuery, GetAllDocumentsAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDocumentsAssignmentsQuery, GetAllDocumentsAssignmentsQueryVariables>(GetAllDocumentsAssignmentsDocument, options);
      }
export function useGetAllDocumentsAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDocumentsAssignmentsQuery, GetAllDocumentsAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDocumentsAssignmentsQuery, GetAllDocumentsAssignmentsQueryVariables>(GetAllDocumentsAssignmentsDocument, options);
        }
export type GetAllDocumentsAssignmentsQueryHookResult = ReturnType<typeof useGetAllDocumentsAssignmentsQuery>;
export type GetAllDocumentsAssignmentsLazyQueryHookResult = ReturnType<typeof useGetAllDocumentsAssignmentsLazyQuery>;
export type GetAllDocumentsAssignmentsQueryResult = Apollo.QueryResult<GetAllDocumentsAssignmentsQuery, GetAllDocumentsAssignmentsQueryVariables>;
export const SysUsersWithDocumentsDocument = gql`
    query SysUsersWithDocuments($search: String, $limit: Int!, $filter: directus_users_filter) {
  users(filter: $filter, search: $search, limit: $limit) {
    id
    first_name
    last_name
  }
}
    `;

/**
 * __useSysUsersWithDocumentsQuery__
 *
 * To run a query within a React component, call `useSysUsersWithDocumentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersWithDocumentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersWithDocumentsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSysUsersWithDocumentsQuery(baseOptions: Apollo.QueryHookOptions<SysUsersWithDocumentsQuery, SysUsersWithDocumentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersWithDocumentsQuery, SysUsersWithDocumentsQueryVariables>(SysUsersWithDocumentsDocument, options);
      }
export function useSysUsersWithDocumentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersWithDocumentsQuery, SysUsersWithDocumentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersWithDocumentsQuery, SysUsersWithDocumentsQueryVariables>(SysUsersWithDocumentsDocument, options);
        }
export type SysUsersWithDocumentsQueryHookResult = ReturnType<typeof useSysUsersWithDocumentsQuery>;
export type SysUsersWithDocumentsLazyQueryHookResult = ReturnType<typeof useSysUsersWithDocumentsLazyQuery>;
export type SysUsersWithDocumentsQueryResult = Apollo.QueryResult<SysUsersWithDocumentsQuery, SysUsersWithDocumentsQueryVariables>;
export const GetAllDocumentsOnReportDocument = gql`
    query GetAllDocumentsOnReport($search: String, $limit: Int!, $filter: documents_filter) {
  documents(filter: $filter, search: $search, limit: $limit) {
    id
    title
  }
}
    `;

/**
 * __useGetAllDocumentsOnReportQuery__
 *
 * To run a query within a React component, call `useGetAllDocumentsOnReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDocumentsOnReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDocumentsOnReportQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDocumentsOnReportQuery(baseOptions: Apollo.QueryHookOptions<GetAllDocumentsOnReportQuery, GetAllDocumentsOnReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDocumentsOnReportQuery, GetAllDocumentsOnReportQueryVariables>(GetAllDocumentsOnReportDocument, options);
      }
export function useGetAllDocumentsOnReportLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDocumentsOnReportQuery, GetAllDocumentsOnReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDocumentsOnReportQuery, GetAllDocumentsOnReportQueryVariables>(GetAllDocumentsOnReportDocument, options);
        }
export type GetAllDocumentsOnReportQueryHookResult = ReturnType<typeof useGetAllDocumentsOnReportQuery>;
export type GetAllDocumentsOnReportLazyQueryHookResult = ReturnType<typeof useGetAllDocumentsOnReportLazyQuery>;
export type GetAllDocumentsOnReportQueryResult = Apollo.QueryResult<GetAllDocumentsOnReportQuery, GetAllDocumentsOnReportQueryVariables>;
export const GetAllDocumentsForUserFilterDocument = gql`
    query GetAllDocumentsForUserFilter($search: String, $limit: Int!, $filter: junction_directus_users_documents_filter) {
  junction_directus_users_documents(
    filter: $filter
    search: $search
    limit: $limit
  ) {
    documents_id {
      id
      title
    }
  }
}
    `;

/**
 * __useGetAllDocumentsForUserFilterQuery__
 *
 * To run a query within a React component, call `useGetAllDocumentsForUserFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDocumentsForUserFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDocumentsForUserFilterQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDocumentsForUserFilterQuery(baseOptions: Apollo.QueryHookOptions<GetAllDocumentsForUserFilterQuery, GetAllDocumentsForUserFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDocumentsForUserFilterQuery, GetAllDocumentsForUserFilterQueryVariables>(GetAllDocumentsForUserFilterDocument, options);
      }
export function useGetAllDocumentsForUserFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDocumentsForUserFilterQuery, GetAllDocumentsForUserFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDocumentsForUserFilterQuery, GetAllDocumentsForUserFilterQueryVariables>(GetAllDocumentsForUserFilterDocument, options);
        }
export type GetAllDocumentsForUserFilterQueryHookResult = ReturnType<typeof useGetAllDocumentsForUserFilterQuery>;
export type GetAllDocumentsForUserFilterLazyQueryHookResult = ReturnType<typeof useGetAllDocumentsForUserFilterLazyQuery>;
export type GetAllDocumentsForUserFilterQueryResult = Apollo.QueryResult<GetAllDocumentsForUserFilterQuery, GetAllDocumentsForUserFilterQueryVariables>;
export const GetAllAssignedDocumentsTotalReportsDocument = gql`
    query GetAllAssignedDocumentsTotalReports($unreadFilter: junction_directus_users_documents_filter, $readfilter: junction_directus_users_documents_filter, $expiredFilter: junction_directus_users_documents_filter, $totalFilter: junction_directus_users_documents_filter) {
  unread: junction_directus_users_documents_aggregated(filter: $unreadFilter) {
    count {
      id
    }
  }
  read: junction_directus_users_documents_aggregated(filter: $readfilter) {
    count {
      id
    }
  }
  expired: junction_directus_users_documents_aggregated(filter: $expiredFilter) {
    count {
      id
    }
  }
  total: junction_directus_users_documents_aggregated(filter: $totalFilter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetAllAssignedDocumentsTotalReportsQuery__
 *
 * To run a query within a React component, call `useGetAllAssignedDocumentsTotalReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllAssignedDocumentsTotalReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllAssignedDocumentsTotalReportsQuery({
 *   variables: {
 *      unreadFilter: // value for 'unreadFilter'
 *      readfilter: // value for 'readfilter'
 *      expiredFilter: // value for 'expiredFilter'
 *      totalFilter: // value for 'totalFilter'
 *   },
 * });
 */
export function useGetAllAssignedDocumentsTotalReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllAssignedDocumentsTotalReportsQuery, GetAllAssignedDocumentsTotalReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllAssignedDocumentsTotalReportsQuery, GetAllAssignedDocumentsTotalReportsQueryVariables>(GetAllAssignedDocumentsTotalReportsDocument, options);
      }
export function useGetAllAssignedDocumentsTotalReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllAssignedDocumentsTotalReportsQuery, GetAllAssignedDocumentsTotalReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllAssignedDocumentsTotalReportsQuery, GetAllAssignedDocumentsTotalReportsQueryVariables>(GetAllAssignedDocumentsTotalReportsDocument, options);
        }
export type GetAllAssignedDocumentsTotalReportsQueryHookResult = ReturnType<typeof useGetAllAssignedDocumentsTotalReportsQuery>;
export type GetAllAssignedDocumentsTotalReportsLazyQueryHookResult = ReturnType<typeof useGetAllAssignedDocumentsTotalReportsLazyQuery>;
export type GetAllAssignedDocumentsTotalReportsQueryResult = Apollo.QueryResult<GetAllAssignedDocumentsTotalReportsQuery, GetAllAssignedDocumentsTotalReportsQueryVariables>;
export const CreateDocumentDocument = gql`
    mutation CreateDocument($data: create_documents_input!) {
  create_documents_item(data: $data) {
    id
  }
}
    `;
export type CreateDocumentMutationFn = Apollo.MutationFunction<CreateDocumentMutation, CreateDocumentMutationVariables>;

/**
 * __useCreateDocumentMutation__
 *
 * To run a mutation, you first call `useCreateDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDocumentMutation, { data, loading, error }] = useCreateDocumentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateDocumentMutation(baseOptions?: Apollo.MutationHookOptions<CreateDocumentMutation, CreateDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateDocumentMutation, CreateDocumentMutationVariables>(CreateDocumentDocument, options);
      }
export type CreateDocumentMutationHookResult = ReturnType<typeof useCreateDocumentMutation>;
export type CreateDocumentMutationResult = Apollo.MutationResult<CreateDocumentMutation>;
export type CreateDocumentMutationOptions = Apollo.BaseMutationOptions<CreateDocumentMutation, CreateDocumentMutationVariables>;
export const UpdateDocumentDocument = gql`
    mutation UpdateDocument($id: ID!, $data: update_documents_input!) {
  update_documents_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateDocumentMutationFn = Apollo.MutationFunction<UpdateDocumentMutation, UpdateDocumentMutationVariables>;

/**
 * __useUpdateDocumentMutation__
 *
 * To run a mutation, you first call `useUpdateDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDocumentMutation, { data, loading, error }] = useUpdateDocumentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDocumentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateDocumentMutation, UpdateDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateDocumentMutation, UpdateDocumentMutationVariables>(UpdateDocumentDocument, options);
      }
export type UpdateDocumentMutationHookResult = ReturnType<typeof useUpdateDocumentMutation>;
export type UpdateDocumentMutationResult = Apollo.MutationResult<UpdateDocumentMutation>;
export type UpdateDocumentMutationOptions = Apollo.BaseMutationOptions<UpdateDocumentMutation, UpdateDocumentMutationVariables>;
export const DeleteDocumentAgenciesDocument = gql`
    mutation DeleteDocumentAgencies($ids: [ID]!) {
  delete_junction_documents_agencies_items(ids: $ids) {
    ids
  }
}
    `;
export type DeleteDocumentAgenciesMutationFn = Apollo.MutationFunction<DeleteDocumentAgenciesMutation, DeleteDocumentAgenciesMutationVariables>;

/**
 * __useDeleteDocumentAgenciesMutation__
 *
 * To run a mutation, you first call `useDeleteDocumentAgenciesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDocumentAgenciesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDocumentAgenciesMutation, { data, loading, error }] = useDeleteDocumentAgenciesMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useDeleteDocumentAgenciesMutation(baseOptions?: Apollo.MutationHookOptions<DeleteDocumentAgenciesMutation, DeleteDocumentAgenciesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteDocumentAgenciesMutation, DeleteDocumentAgenciesMutationVariables>(DeleteDocumentAgenciesDocument, options);
      }
export type DeleteDocumentAgenciesMutationHookResult = ReturnType<typeof useDeleteDocumentAgenciesMutation>;
export type DeleteDocumentAgenciesMutationResult = Apollo.MutationResult<DeleteDocumentAgenciesMutation>;
export type DeleteDocumentAgenciesMutationOptions = Apollo.BaseMutationOptions<DeleteDocumentAgenciesMutation, DeleteDocumentAgenciesMutationVariables>;
export const UpdateAssignedDocumentDocument = gql`
    mutation UpdateAssignedDocument($id: ID!, $data: update_junction_directus_users_documents_input!) {
  update_junction_directus_users_documents_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateAssignedDocumentMutationFn = Apollo.MutationFunction<UpdateAssignedDocumentMutation, UpdateAssignedDocumentMutationVariables>;

/**
 * __useUpdateAssignedDocumentMutation__
 *
 * To run a mutation, you first call `useUpdateAssignedDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAssignedDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAssignedDocumentMutation, { data, loading, error }] = useUpdateAssignedDocumentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAssignedDocumentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAssignedDocumentMutation, UpdateAssignedDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAssignedDocumentMutation, UpdateAssignedDocumentMutationVariables>(UpdateAssignedDocumentDocument, options);
      }
export type UpdateAssignedDocumentMutationHookResult = ReturnType<typeof useUpdateAssignedDocumentMutation>;
export type UpdateAssignedDocumentMutationResult = Apollo.MutationResult<UpdateAssignedDocumentMutation>;
export type UpdateAssignedDocumentMutationOptions = Apollo.BaseMutationOptions<UpdateAssignedDocumentMutation, UpdateAssignedDocumentMutationVariables>;
export const GetModulesCategoriesDocument = gql`
    query getModulesCategories($search: String, $limit: Int) {
  categories(
    filter: {status: {_eq: "published"}, type: {_eq: "modality"}}
    search: $search
    limit: $limit
  ) {
    ...Category
  }
}
    ${CategoryFragmentDoc}`;

/**
 * __useGetModulesCategoriesQuery__
 *
 * To run a query within a React component, call `useGetModulesCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesCategoriesQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetModulesCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesCategoriesQuery, GetModulesCategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesCategoriesQuery, GetModulesCategoriesQueryVariables>(GetModulesCategoriesDocument, options);
      }
export function useGetModulesCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesCategoriesQuery, GetModulesCategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesCategoriesQuery, GetModulesCategoriesQueryVariables>(GetModulesCategoriesDocument, options);
        }
export type GetModulesCategoriesQueryHookResult = ReturnType<typeof useGetModulesCategoriesQuery>;
export type GetModulesCategoriesLazyQueryHookResult = ReturnType<typeof useGetModulesCategoriesLazyQuery>;
export type GetModulesCategoriesQueryResult = Apollo.QueryResult<GetModulesCategoriesQuery, GetModulesCategoriesQueryVariables>;
export const GetModulesDefinitionsDocument = gql`
    query getModulesDefinitions($search: String, $limit: Int, $offset: Int, $sort: [String], $filter: modules_definition_filter) {
  modules_definition(
    filter: $filter
    limit: $limit
    offset: $offset
    search: $search
    sort: $sort
  ) {
    ...ModuleDefinition
  }
}
    ${ModuleDefinitionFragmentDoc}`;

/**
 * __useGetModulesDefinitionsQuery__
 *
 * To run a query within a React component, call `useGetModulesDefinitionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesDefinitionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesDefinitionsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetModulesDefinitionsQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesDefinitionsQuery, GetModulesDefinitionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesDefinitionsQuery, GetModulesDefinitionsQueryVariables>(GetModulesDefinitionsDocument, options);
      }
export function useGetModulesDefinitionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesDefinitionsQuery, GetModulesDefinitionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesDefinitionsQuery, GetModulesDefinitionsQueryVariables>(GetModulesDefinitionsDocument, options);
        }
export type GetModulesDefinitionsQueryHookResult = ReturnType<typeof useGetModulesDefinitionsQuery>;
export type GetModulesDefinitionsLazyQueryHookResult = ReturnType<typeof useGetModulesDefinitionsLazyQuery>;
export type GetModulesDefinitionsQueryResult = Apollo.QueryResult<GetModulesDefinitionsQuery, GetModulesDefinitionsQueryVariables>;
export const GetModulesDefinitionsForAssignmentDocument = gql`
    query getModulesDefinitionsForAssignment($filter: modules_definition_filter, $search: String, $limit: Int) {
  modules_definition(filter: $filter, search: $search, limit: $limit) {
    ...ModuleDefinition
  }
}
    ${ModuleDefinitionFragmentDoc}`;

/**
 * __useGetModulesDefinitionsForAssignmentQuery__
 *
 * To run a query within a React component, call `useGetModulesDefinitionsForAssignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesDefinitionsForAssignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesDefinitionsForAssignmentQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetModulesDefinitionsForAssignmentQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesDefinitionsForAssignmentQuery, GetModulesDefinitionsForAssignmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesDefinitionsForAssignmentQuery, GetModulesDefinitionsForAssignmentQueryVariables>(GetModulesDefinitionsForAssignmentDocument, options);
      }
export function useGetModulesDefinitionsForAssignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesDefinitionsForAssignmentQuery, GetModulesDefinitionsForAssignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesDefinitionsForAssignmentQuery, GetModulesDefinitionsForAssignmentQueryVariables>(GetModulesDefinitionsForAssignmentDocument, options);
        }
export type GetModulesDefinitionsForAssignmentQueryHookResult = ReturnType<typeof useGetModulesDefinitionsForAssignmentQuery>;
export type GetModulesDefinitionsForAssignmentLazyQueryHookResult = ReturnType<typeof useGetModulesDefinitionsForAssignmentLazyQuery>;
export type GetModulesDefinitionsForAssignmentQueryResult = Apollo.QueryResult<GetModulesDefinitionsForAssignmentQuery, GetModulesDefinitionsForAssignmentQueryVariables>;
export const GetModulesDefinitionsTotalPagesDocument = gql`
    query getModulesDefinitionsTotalPages($search: String) {
  modules_definition_aggregated(
    filter: {status: {_in: ["published", "draft"]}}
    search: $search
  ) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetModulesDefinitionsTotalPagesQuery__
 *
 * To run a query within a React component, call `useGetModulesDefinitionsTotalPagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesDefinitionsTotalPagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesDefinitionsTotalPagesQuery({
 *   variables: {
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetModulesDefinitionsTotalPagesQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesDefinitionsTotalPagesQuery, GetModulesDefinitionsTotalPagesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesDefinitionsTotalPagesQuery, GetModulesDefinitionsTotalPagesQueryVariables>(GetModulesDefinitionsTotalPagesDocument, options);
      }
export function useGetModulesDefinitionsTotalPagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesDefinitionsTotalPagesQuery, GetModulesDefinitionsTotalPagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesDefinitionsTotalPagesQuery, GetModulesDefinitionsTotalPagesQueryVariables>(GetModulesDefinitionsTotalPagesDocument, options);
        }
export type GetModulesDefinitionsTotalPagesQueryHookResult = ReturnType<typeof useGetModulesDefinitionsTotalPagesQuery>;
export type GetModulesDefinitionsTotalPagesLazyQueryHookResult = ReturnType<typeof useGetModulesDefinitionsTotalPagesLazyQuery>;
export type GetModulesDefinitionsTotalPagesQueryResult = Apollo.QueryResult<GetModulesDefinitionsTotalPagesQuery, GetModulesDefinitionsTotalPagesQueryVariables>;
export const GetModuleDefinitionDocument = gql`
    query getModuleDefinition($id: ID!) {
  modules_definition_by_id(id: $id) {
    ...ModuleDefinition
  }
}
    ${ModuleDefinitionFragmentDoc}`;

/**
 * __useGetModuleDefinitionQuery__
 *
 * To run a query within a React component, call `useGetModuleDefinitionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModuleDefinitionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModuleDefinitionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModuleDefinitionQuery(baseOptions: Apollo.QueryHookOptions<GetModuleDefinitionQuery, GetModuleDefinitionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModuleDefinitionQuery, GetModuleDefinitionQueryVariables>(GetModuleDefinitionDocument, options);
      }
export function useGetModuleDefinitionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModuleDefinitionQuery, GetModuleDefinitionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModuleDefinitionQuery, GetModuleDefinitionQueryVariables>(GetModuleDefinitionDocument, options);
        }
export type GetModuleDefinitionQueryHookResult = ReturnType<typeof useGetModuleDefinitionQuery>;
export type GetModuleDefinitionLazyQueryHookResult = ReturnType<typeof useGetModuleDefinitionLazyQuery>;
export type GetModuleDefinitionQueryResult = Apollo.QueryResult<GetModuleDefinitionQuery, GetModuleDefinitionQueryVariables>;
export const GetModulesAssignmentsDocument = gql`
    query getModulesAssignments($category: [String], $status: [String], $userId: String!) {
  junction_modules_definition_directus_users(
    filter: {directus_users_id: {id: {_eq: $userId}}, modules_definition_id: {modality: {id: {_in: $category}}}, status: {_in: $status}, agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: $userId}}}}]}}
    sort: "-assigned_on"
  ) {
    ...ModuleAssignment
  }
}
    ${ModuleAssignmentFragmentDoc}`;

/**
 * __useGetModulesAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetModulesAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesAssignmentsQuery({
 *   variables: {
 *      category: // value for 'category'
 *      status: // value for 'status'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetModulesAssignmentsQuery(baseOptions: Apollo.QueryHookOptions<GetModulesAssignmentsQuery, GetModulesAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesAssignmentsQuery, GetModulesAssignmentsQueryVariables>(GetModulesAssignmentsDocument, options);
      }
export function useGetModulesAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesAssignmentsQuery, GetModulesAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesAssignmentsQuery, GetModulesAssignmentsQueryVariables>(GetModulesAssignmentsDocument, options);
        }
export type GetModulesAssignmentsQueryHookResult = ReturnType<typeof useGetModulesAssignmentsQuery>;
export type GetModulesAssignmentsLazyQueryHookResult = ReturnType<typeof useGetModulesAssignmentsLazyQuery>;
export type GetModulesAssignmentsQueryResult = Apollo.QueryResult<GetModulesAssignmentsQuery, GetModulesAssignmentsQueryVariables>;
export const GetReportModulesAssignmentsDocument = gql`
    query getReportModulesAssignments($filter: junction_modules_definition_directus_users_filter, $search: String, $limit: Int, $offset: Int, $sort: [String]) {
  assignments: junction_modules_definition_directus_users(
    filter: $filter
    limit: $limit
    search: $search
    offset: $offset
    sort: $sort
  ) {
    ...ModuleAssignment
  }
  totalItems: junction_modules_definition_directus_users_aggregated(
    filter: $filter
  ) {
    count {
      id
    }
  }
}
    ${ModuleAssignmentFragmentDoc}`;

/**
 * __useGetReportModulesAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetReportModulesAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReportModulesAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReportModulesAssignmentsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetReportModulesAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetReportModulesAssignmentsQuery, GetReportModulesAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetReportModulesAssignmentsQuery, GetReportModulesAssignmentsQueryVariables>(GetReportModulesAssignmentsDocument, options);
      }
export function useGetReportModulesAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReportModulesAssignmentsQuery, GetReportModulesAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetReportModulesAssignmentsQuery, GetReportModulesAssignmentsQueryVariables>(GetReportModulesAssignmentsDocument, options);
        }
export type GetReportModulesAssignmentsQueryHookResult = ReturnType<typeof useGetReportModulesAssignmentsQuery>;
export type GetReportModulesAssignmentsLazyQueryHookResult = ReturnType<typeof useGetReportModulesAssignmentsLazyQuery>;
export type GetReportModulesAssignmentsQueryResult = Apollo.QueryResult<GetReportModulesAssignmentsQuery, GetReportModulesAssignmentsQueryVariables>;
export const GetModuleassignmentByUserIdDocument = gql`
    query getModuleassignmentByUserId($userId: String!, $assignmentId: GraphQLStringOrFloat!) {
  junction_modules_definition_directus_users(
    filter: {directus_users_id: {id: {_eq: $userId}}, id: {_eq: $assignmentId}}
  ) {
    ...ModuleAssignment
  }
}
    ${ModuleAssignmentFragmentDoc}`;

/**
 * __useGetModuleassignmentByUserIdQuery__
 *
 * To run a query within a React component, call `useGetModuleassignmentByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModuleassignmentByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModuleassignmentByUserIdQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      assignmentId: // value for 'assignmentId'
 *   },
 * });
 */
export function useGetModuleassignmentByUserIdQuery(baseOptions: Apollo.QueryHookOptions<GetModuleassignmentByUserIdQuery, GetModuleassignmentByUserIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModuleassignmentByUserIdQuery, GetModuleassignmentByUserIdQueryVariables>(GetModuleassignmentByUserIdDocument, options);
      }
export function useGetModuleassignmentByUserIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModuleassignmentByUserIdQuery, GetModuleassignmentByUserIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModuleassignmentByUserIdQuery, GetModuleassignmentByUserIdQueryVariables>(GetModuleassignmentByUserIdDocument, options);
        }
export type GetModuleassignmentByUserIdQueryHookResult = ReturnType<typeof useGetModuleassignmentByUserIdQuery>;
export type GetModuleassignmentByUserIdLazyQueryHookResult = ReturnType<typeof useGetModuleassignmentByUserIdLazyQuery>;
export type GetModuleassignmentByUserIdQueryResult = Apollo.QueryResult<GetModuleassignmentByUserIdQuery, GetModuleassignmentByUserIdQueryVariables>;
export const SysUsersWithModulesDocument = gql`
    query sysUsersWithModules($filter: directus_users_filter, $search: String) {
  users(filter: $filter, search: $search) {
    id
    first_name
    last_name
  }
}
    `;

/**
 * __useSysUsersWithModulesQuery__
 *
 * To run a query within a React component, call `useSysUsersWithModulesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUsersWithModulesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUsersWithModulesQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useSysUsersWithModulesQuery(baseOptions?: Apollo.QueryHookOptions<SysUsersWithModulesQuery, SysUsersWithModulesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUsersWithModulesQuery, SysUsersWithModulesQueryVariables>(SysUsersWithModulesDocument, options);
      }
export function useSysUsersWithModulesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUsersWithModulesQuery, SysUsersWithModulesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUsersWithModulesQuery, SysUsersWithModulesQueryVariables>(SysUsersWithModulesDocument, options);
        }
export type SysUsersWithModulesQueryHookResult = ReturnType<typeof useSysUsersWithModulesQuery>;
export type SysUsersWithModulesLazyQueryHookResult = ReturnType<typeof useSysUsersWithModulesLazyQuery>;
export type SysUsersWithModulesQueryResult = Apollo.QueryResult<SysUsersWithModulesQuery, SysUsersWithModulesQueryVariables>;
export const GetModulesForFilterDocument = gql`
    query getModulesForFilter($filter: modules_definition_filter, $search: String, $limit: Int) {
  modules_definition(filter: $filter, search: $search, limit: $limit) {
    ...ModuleDefinition
  }
}
    ${ModuleDefinitionFragmentDoc}`;

/**
 * __useGetModulesForFilterQuery__
 *
 * To run a query within a React component, call `useGetModulesForFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesForFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesForFilterQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetModulesForFilterQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesForFilterQuery, GetModulesForFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesForFilterQuery, GetModulesForFilterQueryVariables>(GetModulesForFilterDocument, options);
      }
export function useGetModulesForFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesForFilterQuery, GetModulesForFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesForFilterQuery, GetModulesForFilterQueryVariables>(GetModulesForFilterDocument, options);
        }
export type GetModulesForFilterQueryHookResult = ReturnType<typeof useGetModulesForFilterQuery>;
export type GetModulesForFilterLazyQueryHookResult = ReturnType<typeof useGetModulesForFilterLazyQuery>;
export type GetModulesForFilterQueryResult = Apollo.QueryResult<GetModulesForFilterQuery, GetModulesForFilterQueryVariables>;
export const GetModulesForUserFilterDocument = gql`
    query getModulesForUserFilter($filter: junction_modules_definition_directus_users_filter, $search: String, $limit: Int) {
  junction_modules_definition_directus_users(
    filter: $filter
    search: $search
    limit: $limit
  ) {
    modules_definition_id {
      id
      title
    }
  }
}
    `;

/**
 * __useGetModulesForUserFilterQuery__
 *
 * To run a query within a React component, call `useGetModulesForUserFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesForUserFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesForUserFilterQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetModulesForUserFilterQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesForUserFilterQuery, GetModulesForUserFilterQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesForUserFilterQuery, GetModulesForUserFilterQueryVariables>(GetModulesForUserFilterDocument, options);
      }
export function useGetModulesForUserFilterLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesForUserFilterQuery, GetModulesForUserFilterQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesForUserFilterQuery, GetModulesForUserFilterQueryVariables>(GetModulesForUserFilterDocument, options);
        }
export type GetModulesForUserFilterQueryHookResult = ReturnType<typeof useGetModulesForUserFilterQuery>;
export type GetModulesForUserFilterLazyQueryHookResult = ReturnType<typeof useGetModulesForUserFilterLazyQuery>;
export type GetModulesForUserFilterQueryResult = Apollo.QueryResult<GetModulesForUserFilterQuery, GetModulesForUserFilterQueryVariables>;
export const GetModulesAverageScoreDocument = gql`
    query getModulesAverageScore($filter: junction_modules_definition_directus_users_filter) {
  junction_modules_definition_directus_users_aggregated(filter: $filter) {
    avg {
      score
    }
  }
}
    `;

/**
 * __useGetModulesAverageScoreQuery__
 *
 * To run a query within a React component, call `useGetModulesAverageScoreQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesAverageScoreQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesAverageScoreQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetModulesAverageScoreQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesAverageScoreQuery, GetModulesAverageScoreQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesAverageScoreQuery, GetModulesAverageScoreQueryVariables>(GetModulesAverageScoreDocument, options);
      }
export function useGetModulesAverageScoreLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesAverageScoreQuery, GetModulesAverageScoreQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesAverageScoreQuery, GetModulesAverageScoreQueryVariables>(GetModulesAverageScoreDocument, options);
        }
export type GetModulesAverageScoreQueryHookResult = ReturnType<typeof useGetModulesAverageScoreQuery>;
export type GetModulesAverageScoreLazyQueryHookResult = ReturnType<typeof useGetModulesAverageScoreLazyQuery>;
export type GetModulesAverageScoreQueryResult = Apollo.QueryResult<GetModulesAverageScoreQuery, GetModulesAverageScoreQueryVariables>;
export const GetModulesReportByStatusDocument = gql`
    query getModulesReportByStatus($notStartedfilters: junction_modules_definition_directus_users_filter, $passedFilters: junction_modules_definition_directus_users_filter, $failedFilters: junction_modules_definition_directus_users_filter, $inProgressFilters: junction_modules_definition_directus_users_filter, $expiredFilters: junction_modules_definition_directus_users_filter, $totalFilters: junction_modules_definition_directus_users_filter) {
  notStarted: junction_modules_definition_directus_users_aggregated(
    filter: $notStartedfilters
  ) {
    count {
      status
    }
  }
  passed: junction_modules_definition_directus_users_aggregated(
    filter: $passedFilters
  ) {
    count {
      status
    }
  }
  failed: junction_modules_definition_directus_users_aggregated(
    filter: $failedFilters
  ) {
    count {
      status
    }
  }
  inProgress: junction_modules_definition_directus_users_aggregated(
    filter: $inProgressFilters
  ) {
    count {
      status
    }
  }
  expired: junction_modules_definition_directus_users_aggregated(
    filter: $expiredFilters
  ) {
    count {
      status
    }
  }
  total: junction_modules_definition_directus_users_aggregated(
    filter: $totalFilters
  ) {
    count {
      status
    }
  }
}
    `;

/**
 * __useGetModulesReportByStatusQuery__
 *
 * To run a query within a React component, call `useGetModulesReportByStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesReportByStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesReportByStatusQuery({
 *   variables: {
 *      notStartedfilters: // value for 'notStartedfilters'
 *      passedFilters: // value for 'passedFilters'
 *      failedFilters: // value for 'failedFilters'
 *      inProgressFilters: // value for 'inProgressFilters'
 *      expiredFilters: // value for 'expiredFilters'
 *      totalFilters: // value for 'totalFilters'
 *   },
 * });
 */
export function useGetModulesReportByStatusQuery(baseOptions?: Apollo.QueryHookOptions<GetModulesReportByStatusQuery, GetModulesReportByStatusQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesReportByStatusQuery, GetModulesReportByStatusQueryVariables>(GetModulesReportByStatusDocument, options);
      }
export function useGetModulesReportByStatusLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesReportByStatusQuery, GetModulesReportByStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesReportByStatusQuery, GetModulesReportByStatusQueryVariables>(GetModulesReportByStatusDocument, options);
        }
export type GetModulesReportByStatusQueryHookResult = ReturnType<typeof useGetModulesReportByStatusQuery>;
export type GetModulesReportByStatusLazyQueryHookResult = ReturnType<typeof useGetModulesReportByStatusLazyQuery>;
export type GetModulesReportByStatusQueryResult = Apollo.QueryResult<GetModulesReportByStatusQuery, GetModulesReportByStatusQueryVariables>;
export const GetModuleAssignmentDocument = gql`
    query getModuleAssignment($assignmentId: ID!) {
  junction_modules_definition_directus_users_by_id(id: $assignmentId) {
    ...ModuleAssignment
  }
}
    ${ModuleAssignmentFragmentDoc}`;

/**
 * __useGetModuleAssignmentQuery__
 *
 * To run a query within a React component, call `useGetModuleAssignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModuleAssignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModuleAssignmentQuery({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *   },
 * });
 */
export function useGetModuleAssignmentQuery(baseOptions: Apollo.QueryHookOptions<GetModuleAssignmentQuery, GetModuleAssignmentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModuleAssignmentQuery, GetModuleAssignmentQueryVariables>(GetModuleAssignmentDocument, options);
      }
export function useGetModuleAssignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModuleAssignmentQuery, GetModuleAssignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModuleAssignmentQuery, GetModuleAssignmentQueryVariables>(GetModuleAssignmentDocument, options);
        }
export type GetModuleAssignmentQueryHookResult = ReturnType<typeof useGetModuleAssignmentQuery>;
export type GetModuleAssignmentLazyQueryHookResult = ReturnType<typeof useGetModuleAssignmentLazyQuery>;
export type GetModuleAssignmentQueryResult = Apollo.QueryResult<GetModuleAssignmentQuery, GetModuleAssignmentQueryVariables>;
export const StartModuleDocument = gql`
    mutation startModule($assignmentId: ID!, $versionId: ID!) {
  update_junction_modules_definition_directus_users_item(
    id: $assignmentId
    data: {module_version: {id: $versionId}}
  ) {
    id
  }
}
    `;
export type StartModuleMutationFn = Apollo.MutationFunction<StartModuleMutation, StartModuleMutationVariables>;

/**
 * __useStartModuleMutation__
 *
 * To run a mutation, you first call `useStartModuleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartModuleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startModuleMutation, { data, loading, error }] = useStartModuleMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      versionId: // value for 'versionId'
 *   },
 * });
 */
export function useStartModuleMutation(baseOptions?: Apollo.MutationHookOptions<StartModuleMutation, StartModuleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<StartModuleMutation, StartModuleMutationVariables>(StartModuleDocument, options);
      }
export type StartModuleMutationHookResult = ReturnType<typeof useStartModuleMutation>;
export type StartModuleMutationResult = Apollo.MutationResult<StartModuleMutation>;
export type StartModuleMutationOptions = Apollo.BaseMutationOptions<StartModuleMutation, StartModuleMutationVariables>;
export const CreateAttemptDocument = gql`
    mutation createAttempt($assignmentId: ID!, $moduleId: ID!, $moduleVersionId: ID!) {
  create_modules_results_item(
    data: {assignment_id: {id: $assignmentId}, module_definition_id: {id: $moduleId}, module_version_id: {id: $moduleVersionId}}
  ) {
    id
  }
}
    `;
export type CreateAttemptMutationFn = Apollo.MutationFunction<CreateAttemptMutation, CreateAttemptMutationVariables>;

/**
 * __useCreateAttemptMutation__
 *
 * To run a mutation, you first call `useCreateAttemptMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAttemptMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAttemptMutation, { data, loading, error }] = useCreateAttemptMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      moduleId: // value for 'moduleId'
 *      moduleVersionId: // value for 'moduleVersionId'
 *   },
 * });
 */
export function useCreateAttemptMutation(baseOptions?: Apollo.MutationHookOptions<CreateAttemptMutation, CreateAttemptMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAttemptMutation, CreateAttemptMutationVariables>(CreateAttemptDocument, options);
      }
export type CreateAttemptMutationHookResult = ReturnType<typeof useCreateAttemptMutation>;
export type CreateAttemptMutationResult = Apollo.MutationResult<CreateAttemptMutation>;
export type CreateAttemptMutationOptions = Apollo.BaseMutationOptions<CreateAttemptMutation, CreateAttemptMutationVariables>;
export const CreateModuleDefinitionDocument = gql`
    mutation createModuleDefinition($data: create_modules_definition_input!) {
  create_modules_definition_item(data: $data) {
    id
    versions {
      id
    }
  }
}
    `;
export type CreateModuleDefinitionMutationFn = Apollo.MutationFunction<CreateModuleDefinitionMutation, CreateModuleDefinitionMutationVariables>;

/**
 * __useCreateModuleDefinitionMutation__
 *
 * To run a mutation, you first call `useCreateModuleDefinitionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModuleDefinitionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModuleDefinitionMutation, { data, loading, error }] = useCreateModuleDefinitionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateModuleDefinitionMutation(baseOptions?: Apollo.MutationHookOptions<CreateModuleDefinitionMutation, CreateModuleDefinitionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModuleDefinitionMutation, CreateModuleDefinitionMutationVariables>(CreateModuleDefinitionDocument, options);
      }
export type CreateModuleDefinitionMutationHookResult = ReturnType<typeof useCreateModuleDefinitionMutation>;
export type CreateModuleDefinitionMutationResult = Apollo.MutationResult<CreateModuleDefinitionMutation>;
export type CreateModuleDefinitionMutationOptions = Apollo.BaseMutationOptions<CreateModuleDefinitionMutation, CreateModuleDefinitionMutationVariables>;
export const UpdateModuleDefinitionDocument = gql`
    mutation updateModuleDefinition($id: ID!, $data: update_modules_definition_input!) {
  update_modules_definition_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateModuleDefinitionMutationFn = Apollo.MutationFunction<UpdateModuleDefinitionMutation, UpdateModuleDefinitionMutationVariables>;

/**
 * __useUpdateModuleDefinitionMutation__
 *
 * To run a mutation, you first call `useUpdateModuleDefinitionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModuleDefinitionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModuleDefinitionMutation, { data, loading, error }] = useUpdateModuleDefinitionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateModuleDefinitionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModuleDefinitionMutation, UpdateModuleDefinitionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModuleDefinitionMutation, UpdateModuleDefinitionMutationVariables>(UpdateModuleDefinitionDocument, options);
      }
export type UpdateModuleDefinitionMutationHookResult = ReturnType<typeof useUpdateModuleDefinitionMutation>;
export type UpdateModuleDefinitionMutationResult = Apollo.MutationResult<UpdateModuleDefinitionMutation>;
export type UpdateModuleDefinitionMutationOptions = Apollo.BaseMutationOptions<UpdateModuleDefinitionMutation, UpdateModuleDefinitionMutationVariables>;
export const CreateModuleVersionDocument = gql`
    mutation createModuleVersion($data: create_modules_versions_input!) {
  create_modules_versions_item(data: $data) {
    id
  }
}
    `;
export type CreateModuleVersionMutationFn = Apollo.MutationFunction<CreateModuleVersionMutation, CreateModuleVersionMutationVariables>;

/**
 * __useCreateModuleVersionMutation__
 *
 * To run a mutation, you first call `useCreateModuleVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModuleVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModuleVersionMutation, { data, loading, error }] = useCreateModuleVersionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateModuleVersionMutation(baseOptions?: Apollo.MutationHookOptions<CreateModuleVersionMutation, CreateModuleVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModuleVersionMutation, CreateModuleVersionMutationVariables>(CreateModuleVersionDocument, options);
      }
export type CreateModuleVersionMutationHookResult = ReturnType<typeof useCreateModuleVersionMutation>;
export type CreateModuleVersionMutationResult = Apollo.MutationResult<CreateModuleVersionMutation>;
export type CreateModuleVersionMutationOptions = Apollo.BaseMutationOptions<CreateModuleVersionMutation, CreateModuleVersionMutationVariables>;
export const UpdateModuleVersionDocument = gql`
    mutation updateModuleVersion($id: ID!, $data: update_modules_versions_input!) {
  update_modules_versions_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateModuleVersionMutationFn = Apollo.MutationFunction<UpdateModuleVersionMutation, UpdateModuleVersionMutationVariables>;

/**
 * __useUpdateModuleVersionMutation__
 *
 * To run a mutation, you first call `useUpdateModuleVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModuleVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModuleVersionMutation, { data, loading, error }] = useUpdateModuleVersionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateModuleVersionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModuleVersionMutation, UpdateModuleVersionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModuleVersionMutation, UpdateModuleVersionMutationVariables>(UpdateModuleVersionDocument, options);
      }
export type UpdateModuleVersionMutationHookResult = ReturnType<typeof useUpdateModuleVersionMutation>;
export type UpdateModuleVersionMutationResult = Apollo.MutationResult<UpdateModuleVersionMutation>;
export type UpdateModuleVersionMutationOptions = Apollo.BaseMutationOptions<UpdateModuleVersionMutation, UpdateModuleVersionMutationVariables>;
export const DeleteModuleDefinitionDocument = gql`
    mutation deleteModuleDefinition($id: ID!) {
  update_modules_definition_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteModuleDefinitionMutationFn = Apollo.MutationFunction<DeleteModuleDefinitionMutation, DeleteModuleDefinitionMutationVariables>;

/**
 * __useDeleteModuleDefinitionMutation__
 *
 * To run a mutation, you first call `useDeleteModuleDefinitionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteModuleDefinitionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteModuleDefinitionMutation, { data, loading, error }] = useDeleteModuleDefinitionMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteModuleDefinitionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteModuleDefinitionMutation, DeleteModuleDefinitionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteModuleDefinitionMutation, DeleteModuleDefinitionMutationVariables>(DeleteModuleDefinitionDocument, options);
      }
export type DeleteModuleDefinitionMutationHookResult = ReturnType<typeof useDeleteModuleDefinitionMutation>;
export type DeleteModuleDefinitionMutationResult = Apollo.MutationResult<DeleteModuleDefinitionMutation>;
export type DeleteModuleDefinitionMutationOptions = Apollo.BaseMutationOptions<DeleteModuleDefinitionMutation, DeleteModuleDefinitionMutationVariables>;
export const GetAllBundlesForAssignCompetencyDocument = gql`
    query GetAllBundlesForAssignCompetency($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: bundles_filter) {
  bundles(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Bundle
  }
}
    ${BundleFragmentDoc}`;

/**
 * __useGetAllBundlesForAssignCompetencyQuery__
 *
 * To run a query within a React component, call `useGetAllBundlesForAssignCompetencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBundlesForAssignCompetencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBundlesForAssignCompetencyQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllBundlesForAssignCompetencyQuery(baseOptions?: Apollo.QueryHookOptions<GetAllBundlesForAssignCompetencyQuery, GetAllBundlesForAssignCompetencyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllBundlesForAssignCompetencyQuery, GetAllBundlesForAssignCompetencyQueryVariables>(GetAllBundlesForAssignCompetencyDocument, options);
      }
export function useGetAllBundlesForAssignCompetencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllBundlesForAssignCompetencyQuery, GetAllBundlesForAssignCompetencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllBundlesForAssignCompetencyQuery, GetAllBundlesForAssignCompetencyQueryVariables>(GetAllBundlesForAssignCompetencyDocument, options);
        }
export type GetAllBundlesForAssignCompetencyQueryHookResult = ReturnType<typeof useGetAllBundlesForAssignCompetencyQuery>;
export type GetAllBundlesForAssignCompetencyLazyQueryHookResult = ReturnType<typeof useGetAllBundlesForAssignCompetencyLazyQuery>;
export type GetAllBundlesForAssignCompetencyQueryResult = Apollo.QueryResult<GetAllBundlesForAssignCompetencyQuery, GetAllBundlesForAssignCompetencyQueryVariables>;
export const GetAllBundlesDocument = gql`
    query GetAllBundles($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: bundles_filter) {
  bundles(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Bundle
  }
  bundles_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${BundleFragmentDoc}`;

/**
 * __useGetAllBundlesQuery__
 *
 * To run a query within a React component, call `useGetAllBundlesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBundlesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBundlesQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllBundlesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllBundlesQuery, GetAllBundlesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllBundlesQuery, GetAllBundlesQueryVariables>(GetAllBundlesDocument, options);
      }
export function useGetAllBundlesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllBundlesQuery, GetAllBundlesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllBundlesQuery, GetAllBundlesQueryVariables>(GetAllBundlesDocument, options);
        }
export type GetAllBundlesQueryHookResult = ReturnType<typeof useGetAllBundlesQuery>;
export type GetAllBundlesLazyQueryHookResult = ReturnType<typeof useGetAllBundlesLazyQuery>;
export type GetAllBundlesQueryResult = Apollo.QueryResult<GetAllBundlesQuery, GetAllBundlesQueryVariables>;
export const GetBundleByIdDocument = gql`
    query GetBundleById($id: ID!) {
  bundles_by_id(id: $id) {
    ...Bundle
  }
}
    ${BundleFragmentDoc}`;

/**
 * __useGetBundleByIdQuery__
 *
 * To run a query within a React component, call `useGetBundleByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBundleByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBundleByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBundleByIdQuery(baseOptions: Apollo.QueryHookOptions<GetBundleByIdQuery, GetBundleByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetBundleByIdQuery, GetBundleByIdQueryVariables>(GetBundleByIdDocument, options);
      }
export function useGetBundleByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBundleByIdQuery, GetBundleByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetBundleByIdQuery, GetBundleByIdQueryVariables>(GetBundleByIdDocument, options);
        }
export type GetBundleByIdQueryHookResult = ReturnType<typeof useGetBundleByIdQuery>;
export type GetBundleByIdLazyQueryHookResult = ReturnType<typeof useGetBundleByIdLazyQuery>;
export type GetBundleByIdQueryResult = Apollo.QueryResult<GetBundleByIdQuery, GetBundleByIdQueryVariables>;
export const CreateBundleDocument = gql`
    mutation CreateBundle($data: create_bundles_input!) {
  create_bundles_item(data: $data) {
    id
  }
}
    `;
export type CreateBundleMutationFn = Apollo.MutationFunction<CreateBundleMutation, CreateBundleMutationVariables>;

/**
 * __useCreateBundleMutation__
 *
 * To run a mutation, you first call `useCreateBundleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBundleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBundleMutation, { data, loading, error }] = useCreateBundleMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateBundleMutation(baseOptions?: Apollo.MutationHookOptions<CreateBundleMutation, CreateBundleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateBundleMutation, CreateBundleMutationVariables>(CreateBundleDocument, options);
      }
export type CreateBundleMutationHookResult = ReturnType<typeof useCreateBundleMutation>;
export type CreateBundleMutationResult = Apollo.MutationResult<CreateBundleMutation>;
export type CreateBundleMutationOptions = Apollo.BaseMutationOptions<CreateBundleMutation, CreateBundleMutationVariables>;
export const UpdateBundleDocument = gql`
    mutation UpdateBundle($id: ID!, $data: update_bundles_input!) {
  update_bundles_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateBundleMutationFn = Apollo.MutationFunction<UpdateBundleMutation, UpdateBundleMutationVariables>;

/**
 * __useUpdateBundleMutation__
 *
 * To run a mutation, you first call `useUpdateBundleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBundleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBundleMutation, { data, loading, error }] = useUpdateBundleMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateBundleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateBundleMutation, UpdateBundleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateBundleMutation, UpdateBundleMutationVariables>(UpdateBundleDocument, options);
      }
export type UpdateBundleMutationHookResult = ReturnType<typeof useUpdateBundleMutation>;
export type UpdateBundleMutationResult = Apollo.MutationResult<UpdateBundleMutation>;
export type UpdateBundleMutationOptions = Apollo.BaseMutationOptions<UpdateBundleMutation, UpdateBundleMutationVariables>;
export const DeleteBundleDocument = gql`
    mutation DeleteBundle($id: ID!) {
  update_bundles_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteBundleMutationFn = Apollo.MutationFunction<DeleteBundleMutation, DeleteBundleMutationVariables>;

/**
 * __useDeleteBundleMutation__
 *
 * To run a mutation, you first call `useDeleteBundleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteBundleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteBundleMutation, { data, loading, error }] = useDeleteBundleMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteBundleMutation(baseOptions?: Apollo.MutationHookOptions<DeleteBundleMutation, DeleteBundleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteBundleMutation, DeleteBundleMutationVariables>(DeleteBundleDocument, options);
      }
export type DeleteBundleMutationHookResult = ReturnType<typeof useDeleteBundleMutation>;
export type DeleteBundleMutationResult = Apollo.MutationResult<DeleteBundleMutation>;
export type DeleteBundleMutationOptions = Apollo.BaseMutationOptions<DeleteBundleMutation, DeleteBundleMutationVariables>;
export const SysUserForSettingsDocument = gql`
    query sysUserForSettings($id: String!) {
  users(filter: {id: {_eq: $id}}) {
    ...UserForSettings
  }
}
    ${UserForSettingsFragmentDoc}`;

/**
 * __useSysUserForSettingsQuery__
 *
 * To run a query within a React component, call `useSysUserForSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserForSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserForSettingsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysUserForSettingsQuery(baseOptions: Apollo.QueryHookOptions<SysUserForSettingsQuery, SysUserForSettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserForSettingsQuery, SysUserForSettingsQueryVariables>(SysUserForSettingsDocument, options);
      }
export function useSysUserForSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserForSettingsQuery, SysUserForSettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserForSettingsQuery, SysUserForSettingsQueryVariables>(SysUserForSettingsDocument, options);
        }
export type SysUserForSettingsQueryHookResult = ReturnType<typeof useSysUserForSettingsQuery>;
export type SysUserForSettingsLazyQueryHookResult = ReturnType<typeof useSysUserForSettingsLazyQuery>;
export type SysUserForSettingsQueryResult = Apollo.QueryResult<SysUserForSettingsQuery, SysUserForSettingsQueryVariables>;
export const GetAllDepartmentsForSelectDocument = gql`
    query getAllDepartmentsForSelect($search: String) {
  departments(
    filter: {_and: [{status: {_eq: "published"}}, {agency: {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}}]}
    search: $search
  ) {
    ...Department
  }
}
    ${DepartmentFragmentDoc}`;

/**
 * __useGetAllDepartmentsForSelectQuery__
 *
 * To run a query within a React component, call `useGetAllDepartmentsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDepartmentsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDepartmentsForSelectQuery({
 *   variables: {
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetAllDepartmentsForSelectQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDepartmentsForSelectQuery, GetAllDepartmentsForSelectQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDepartmentsForSelectQuery, GetAllDepartmentsForSelectQueryVariables>(GetAllDepartmentsForSelectDocument, options);
      }
export function useGetAllDepartmentsForSelectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDepartmentsForSelectQuery, GetAllDepartmentsForSelectQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDepartmentsForSelectQuery, GetAllDepartmentsForSelectQueryVariables>(GetAllDepartmentsForSelectDocument, options);
        }
export type GetAllDepartmentsForSelectQueryHookResult = ReturnType<typeof useGetAllDepartmentsForSelectQuery>;
export type GetAllDepartmentsForSelectLazyQueryHookResult = ReturnType<typeof useGetAllDepartmentsForSelectLazyQuery>;
export type GetAllDepartmentsForSelectQueryResult = Apollo.QueryResult<GetAllDepartmentsForSelectQuery, GetAllDepartmentsForSelectQueryVariables>;
export const GetAllLocationsForSelectDocument = gql`
    query getAllLocationsForSelect($search: String) {
  locations(
    filter: {_and: [{status: {_eq: "published"}}, {agency: {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}}]}
    search: $search
  ) {
    ...Location
  }
}
    ${LocationFragmentDoc}`;

/**
 * __useGetAllLocationsForSelectQuery__
 *
 * To run a query within a React component, call `useGetAllLocationsForSelectQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllLocationsForSelectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllLocationsForSelectQuery({
 *   variables: {
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetAllLocationsForSelectQuery(baseOptions?: Apollo.QueryHookOptions<GetAllLocationsForSelectQuery, GetAllLocationsForSelectQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllLocationsForSelectQuery, GetAllLocationsForSelectQueryVariables>(GetAllLocationsForSelectDocument, options);
      }
export function useGetAllLocationsForSelectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllLocationsForSelectQuery, GetAllLocationsForSelectQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllLocationsForSelectQuery, GetAllLocationsForSelectQueryVariables>(GetAllLocationsForSelectDocument, options);
        }
export type GetAllLocationsForSelectQueryHookResult = ReturnType<typeof useGetAllLocationsForSelectQuery>;
export type GetAllLocationsForSelectLazyQueryHookResult = ReturnType<typeof useGetAllLocationsForSelectLazyQuery>;
export type GetAllLocationsForSelectQueryResult = Apollo.QueryResult<GetAllLocationsForSelectQuery, GetAllLocationsForSelectQueryVariables>;
export const UpdateJunctionUserAgencyDocument = gql`
    mutation updateJunctionUserAgency($id: ID!, $data: update_junction_directus_users_agencies_input!) {
  update_junction_directus_users_agencies_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateJunctionUserAgencyMutationFn = Apollo.MutationFunction<UpdateJunctionUserAgencyMutation, UpdateJunctionUserAgencyMutationVariables>;

/**
 * __useUpdateJunctionUserAgencyMutation__
 *
 * To run a mutation, you first call `useUpdateJunctionUserAgencyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateJunctionUserAgencyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateJunctionUserAgencyMutation, { data, loading, error }] = useUpdateJunctionUserAgencyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateJunctionUserAgencyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateJunctionUserAgencyMutation, UpdateJunctionUserAgencyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateJunctionUserAgencyMutation, UpdateJunctionUserAgencyMutationVariables>(UpdateJunctionUserAgencyDocument, options);
      }
export type UpdateJunctionUserAgencyMutationHookResult = ReturnType<typeof useUpdateJunctionUserAgencyMutation>;
export type UpdateJunctionUserAgencyMutationResult = Apollo.MutationResult<UpdateJunctionUserAgencyMutation>;
export type UpdateJunctionUserAgencyMutationOptions = Apollo.BaseMutationOptions<UpdateJunctionUserAgencyMutation, UpdateJunctionUserAgencyMutationVariables>;
export const GetAllDepartmentsForFilterUsersOnAssignmentsDocument = gql`
    query GetAllDepartmentsForFilterUsersOnAssignments($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: departments_filter) {
  departments(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Department
  }
}
    ${DepartmentFragmentDoc}`;

/**
 * __useGetAllDepartmentsForFilterUsersOnAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetAllDepartmentsForFilterUsersOnAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDepartmentsForFilterUsersOnAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDepartmentsForFilterUsersOnAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDepartmentsForFilterUsersOnAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDepartmentsForFilterUsersOnAssignmentsQuery, GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDepartmentsForFilterUsersOnAssignmentsQuery, GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables>(GetAllDepartmentsForFilterUsersOnAssignmentsDocument, options);
      }
export function useGetAllDepartmentsForFilterUsersOnAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDepartmentsForFilterUsersOnAssignmentsQuery, GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDepartmentsForFilterUsersOnAssignmentsQuery, GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables>(GetAllDepartmentsForFilterUsersOnAssignmentsDocument, options);
        }
export type GetAllDepartmentsForFilterUsersOnAssignmentsQueryHookResult = ReturnType<typeof useGetAllDepartmentsForFilterUsersOnAssignmentsQuery>;
export type GetAllDepartmentsForFilterUsersOnAssignmentsLazyQueryHookResult = ReturnType<typeof useGetAllDepartmentsForFilterUsersOnAssignmentsLazyQuery>;
export type GetAllDepartmentsForFilterUsersOnAssignmentsQueryResult = Apollo.QueryResult<GetAllDepartmentsForFilterUsersOnAssignmentsQuery, GetAllDepartmentsForFilterUsersOnAssignmentsQueryVariables>;
export const GetAllDepartmentsForListingDocument = gql`
    query GetAllDepartmentsForListing($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: departments_filter) {
  departments: departments(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...DepartmentForList
  }
  total: departments_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${DepartmentForListFragmentDoc}`;

/**
 * __useGetAllDepartmentsForListingQuery__
 *
 * To run a query within a React component, call `useGetAllDepartmentsForListingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllDepartmentsForListingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllDepartmentsForListingQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllDepartmentsForListingQuery(baseOptions?: Apollo.QueryHookOptions<GetAllDepartmentsForListingQuery, GetAllDepartmentsForListingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllDepartmentsForListingQuery, GetAllDepartmentsForListingQueryVariables>(GetAllDepartmentsForListingDocument, options);
      }
export function useGetAllDepartmentsForListingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDepartmentsForListingQuery, GetAllDepartmentsForListingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllDepartmentsForListingQuery, GetAllDepartmentsForListingQueryVariables>(GetAllDepartmentsForListingDocument, options);
        }
export type GetAllDepartmentsForListingQueryHookResult = ReturnType<typeof useGetAllDepartmentsForListingQuery>;
export type GetAllDepartmentsForListingLazyQueryHookResult = ReturnType<typeof useGetAllDepartmentsForListingLazyQuery>;
export type GetAllDepartmentsForListingQueryResult = Apollo.QueryResult<GetAllDepartmentsForListingQuery, GetAllDepartmentsForListingQueryVariables>;
export const DepartmentsDocument = gql`
    query departments($filter: departments_filter, $sort: [String], $search: String, $limit: Int) {
  departments(filter: $filter, sort: $sort, search: $search, limit: $limit) {
    ...Department
  }
}
    ${DepartmentFragmentDoc}`;

/**
 * __useDepartmentsQuery__
 *
 * To run a query within a React component, call `useDepartmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepartmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepartmentsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useDepartmentsQuery(baseOptions?: Apollo.QueryHookOptions<DepartmentsQuery, DepartmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DepartmentsQuery, DepartmentsQueryVariables>(DepartmentsDocument, options);
      }
export function useDepartmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DepartmentsQuery, DepartmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DepartmentsQuery, DepartmentsQueryVariables>(DepartmentsDocument, options);
        }
export type DepartmentsQueryHookResult = ReturnType<typeof useDepartmentsQuery>;
export type DepartmentsLazyQueryHookResult = ReturnType<typeof useDepartmentsLazyQuery>;
export type DepartmentsQueryResult = Apollo.QueryResult<DepartmentsQuery, DepartmentsQueryVariables>;
export const CreateDepartmentDocument = gql`
    mutation createDepartment($data: create_departments_input!) {
  create_departments_item(data: $data) {
    id
  }
}
    `;
export type CreateDepartmentMutationFn = Apollo.MutationFunction<CreateDepartmentMutation, CreateDepartmentMutationVariables>;

/**
 * __useCreateDepartmentMutation__
 *
 * To run a mutation, you first call `useCreateDepartmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDepartmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDepartmentMutation, { data, loading, error }] = useCreateDepartmentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateDepartmentMutation(baseOptions?: Apollo.MutationHookOptions<CreateDepartmentMutation, CreateDepartmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateDepartmentMutation, CreateDepartmentMutationVariables>(CreateDepartmentDocument, options);
      }
export type CreateDepartmentMutationHookResult = ReturnType<typeof useCreateDepartmentMutation>;
export type CreateDepartmentMutationResult = Apollo.MutationResult<CreateDepartmentMutation>;
export type CreateDepartmentMutationOptions = Apollo.BaseMutationOptions<CreateDepartmentMutation, CreateDepartmentMutationVariables>;
export const UpdateDepartmentDocument = gql`
    mutation updateDepartment($id: ID!, $data: update_departments_input!) {
  update_departments_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateDepartmentMutationFn = Apollo.MutationFunction<UpdateDepartmentMutation, UpdateDepartmentMutationVariables>;

/**
 * __useUpdateDepartmentMutation__
 *
 * To run a mutation, you first call `useUpdateDepartmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDepartmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDepartmentMutation, { data, loading, error }] = useUpdateDepartmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDepartmentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateDepartmentMutation, UpdateDepartmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateDepartmentMutation, UpdateDepartmentMutationVariables>(UpdateDepartmentDocument, options);
      }
export type UpdateDepartmentMutationHookResult = ReturnType<typeof useUpdateDepartmentMutation>;
export type UpdateDepartmentMutationResult = Apollo.MutationResult<UpdateDepartmentMutation>;
export type UpdateDepartmentMutationOptions = Apollo.BaseMutationOptions<UpdateDepartmentMutation, UpdateDepartmentMutationVariables>;
export const DeleteDepartmentDocument = gql`
    mutation deleteDepartment($id: ID!) {
  update_departments_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteDepartmentMutationFn = Apollo.MutationFunction<DeleteDepartmentMutation, DeleteDepartmentMutationVariables>;

/**
 * __useDeleteDepartmentMutation__
 *
 * To run a mutation, you first call `useDeleteDepartmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDepartmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDepartmentMutation, { data, loading, error }] = useDeleteDepartmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteDepartmentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteDepartmentMutation, DeleteDepartmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteDepartmentMutation, DeleteDepartmentMutationVariables>(DeleteDepartmentDocument, options);
      }
export type DeleteDepartmentMutationHookResult = ReturnType<typeof useDeleteDepartmentMutation>;
export type DeleteDepartmentMutationResult = Apollo.MutationResult<DeleteDepartmentMutation>;
export type DeleteDepartmentMutationOptions = Apollo.BaseMutationOptions<DeleteDepartmentMutation, DeleteDepartmentMutationVariables>;
export const GetAllLocationsForFilterUsersOnAssignmentsDocument = gql`
    query GetAllLocationsForFilterUsersOnAssignments($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: locations_filter) {
  locations(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Location
  }
}
    ${LocationFragmentDoc}`;

/**
 * __useGetAllLocationsForFilterUsersOnAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetAllLocationsForFilterUsersOnAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllLocationsForFilterUsersOnAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllLocationsForFilterUsersOnAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllLocationsForFilterUsersOnAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllLocationsForFilterUsersOnAssignmentsQuery, GetAllLocationsForFilterUsersOnAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllLocationsForFilterUsersOnAssignmentsQuery, GetAllLocationsForFilterUsersOnAssignmentsQueryVariables>(GetAllLocationsForFilterUsersOnAssignmentsDocument, options);
      }
export function useGetAllLocationsForFilterUsersOnAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllLocationsForFilterUsersOnAssignmentsQuery, GetAllLocationsForFilterUsersOnAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllLocationsForFilterUsersOnAssignmentsQuery, GetAllLocationsForFilterUsersOnAssignmentsQueryVariables>(GetAllLocationsForFilterUsersOnAssignmentsDocument, options);
        }
export type GetAllLocationsForFilterUsersOnAssignmentsQueryHookResult = ReturnType<typeof useGetAllLocationsForFilterUsersOnAssignmentsQuery>;
export type GetAllLocationsForFilterUsersOnAssignmentsLazyQueryHookResult = ReturnType<typeof useGetAllLocationsForFilterUsersOnAssignmentsLazyQuery>;
export type GetAllLocationsForFilterUsersOnAssignmentsQueryResult = Apollo.QueryResult<GetAllLocationsForFilterUsersOnAssignmentsQuery, GetAllLocationsForFilterUsersOnAssignmentsQueryVariables>;
export const GetAllLocationsForListingDocument = gql`
    query GetAllLocationsForListing($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: locations_filter) {
  locations: locations(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...LocationForList
  }
  total: locations_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${LocationForListFragmentDoc}`;

/**
 * __useGetAllLocationsForListingQuery__
 *
 * To run a query within a React component, call `useGetAllLocationsForListingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllLocationsForListingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllLocationsForListingQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllLocationsForListingQuery(baseOptions?: Apollo.QueryHookOptions<GetAllLocationsForListingQuery, GetAllLocationsForListingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllLocationsForListingQuery, GetAllLocationsForListingQueryVariables>(GetAllLocationsForListingDocument, options);
      }
export function useGetAllLocationsForListingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllLocationsForListingQuery, GetAllLocationsForListingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllLocationsForListingQuery, GetAllLocationsForListingQueryVariables>(GetAllLocationsForListingDocument, options);
        }
export type GetAllLocationsForListingQueryHookResult = ReturnType<typeof useGetAllLocationsForListingQuery>;
export type GetAllLocationsForListingLazyQueryHookResult = ReturnType<typeof useGetAllLocationsForListingLazyQuery>;
export type GetAllLocationsForListingQueryResult = Apollo.QueryResult<GetAllLocationsForListingQuery, GetAllLocationsForListingQueryVariables>;
export const LocationsDocument = gql`
    query locations($filter: locations_filter, $sort: [String], $search: String, $limit: Int) {
  locations(filter: $filter, sort: $sort, search: $search, limit: $limit) {
    ...Location
  }
}
    ${LocationFragmentDoc}`;

/**
 * __useLocationsQuery__
 *
 * To run a query within a React component, call `useLocationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLocationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLocationsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useLocationsQuery(baseOptions?: Apollo.QueryHookOptions<LocationsQuery, LocationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LocationsQuery, LocationsQueryVariables>(LocationsDocument, options);
      }
export function useLocationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LocationsQuery, LocationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LocationsQuery, LocationsQueryVariables>(LocationsDocument, options);
        }
export type LocationsQueryHookResult = ReturnType<typeof useLocationsQuery>;
export type LocationsLazyQueryHookResult = ReturnType<typeof useLocationsLazyQuery>;
export type LocationsQueryResult = Apollo.QueryResult<LocationsQuery, LocationsQueryVariables>;
export const CreateLocationDocument = gql`
    mutation createLocation($data: create_locations_input!) {
  create_locations_item(data: $data) {
    id
  }
}
    `;
export type CreateLocationMutationFn = Apollo.MutationFunction<CreateLocationMutation, CreateLocationMutationVariables>;

/**
 * __useCreateLocationMutation__
 *
 * To run a mutation, you first call `useCreateLocationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLocationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLocationMutation, { data, loading, error }] = useCreateLocationMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateLocationMutation(baseOptions?: Apollo.MutationHookOptions<CreateLocationMutation, CreateLocationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateLocationMutation, CreateLocationMutationVariables>(CreateLocationDocument, options);
      }
export type CreateLocationMutationHookResult = ReturnType<typeof useCreateLocationMutation>;
export type CreateLocationMutationResult = Apollo.MutationResult<CreateLocationMutation>;
export type CreateLocationMutationOptions = Apollo.BaseMutationOptions<CreateLocationMutation, CreateLocationMutationVariables>;
export const UpdateLocationDocument = gql`
    mutation updateLocation($id: ID!, $data: update_locations_input!) {
  update_locations_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateLocationMutationFn = Apollo.MutationFunction<UpdateLocationMutation, UpdateLocationMutationVariables>;

/**
 * __useUpdateLocationMutation__
 *
 * To run a mutation, you first call `useUpdateLocationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLocationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLocationMutation, { data, loading, error }] = useUpdateLocationMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateLocationMutation(baseOptions?: Apollo.MutationHookOptions<UpdateLocationMutation, UpdateLocationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateLocationMutation, UpdateLocationMutationVariables>(UpdateLocationDocument, options);
      }
export type UpdateLocationMutationHookResult = ReturnType<typeof useUpdateLocationMutation>;
export type UpdateLocationMutationResult = Apollo.MutationResult<UpdateLocationMutation>;
export type UpdateLocationMutationOptions = Apollo.BaseMutationOptions<UpdateLocationMutation, UpdateLocationMutationVariables>;
export const DeleteLocationDocument = gql`
    mutation deleteLocation($id: ID!) {
  update_locations_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteLocationMutationFn = Apollo.MutationFunction<DeleteLocationMutation, DeleteLocationMutationVariables>;

/**
 * __useDeleteLocationMutation__
 *
 * To run a mutation, you first call `useDeleteLocationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteLocationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteLocationMutation, { data, loading, error }] = useDeleteLocationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteLocationMutation(baseOptions?: Apollo.MutationHookOptions<DeleteLocationMutation, DeleteLocationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteLocationMutation, DeleteLocationMutationVariables>(DeleteLocationDocument, options);
      }
export type DeleteLocationMutationHookResult = ReturnType<typeof useDeleteLocationMutation>;
export type DeleteLocationMutationResult = Apollo.MutationResult<DeleteLocationMutation>;
export type DeleteLocationMutationOptions = Apollo.BaseMutationOptions<DeleteLocationMutation, DeleteLocationMutationVariables>;
export const GetAllSpecialtiesForListingDocument = gql`
    query GetAllSpecialtiesForListing($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: specialties_filter) {
  specialties: specialties(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...SpecialtyForList
  }
  total: specialties_aggregated(filter: $filter, search: $search) {
    count {
      id
    }
  }
}
    ${SpecialtyForListFragmentDoc}`;

/**
 * __useGetAllSpecialtiesForListingQuery__
 *
 * To run a query within a React component, call `useGetAllSpecialtiesForListingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSpecialtiesForListingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSpecialtiesForListingQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllSpecialtiesForListingQuery(baseOptions?: Apollo.QueryHookOptions<GetAllSpecialtiesForListingQuery, GetAllSpecialtiesForListingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSpecialtiesForListingQuery, GetAllSpecialtiesForListingQueryVariables>(GetAllSpecialtiesForListingDocument, options);
      }
export function useGetAllSpecialtiesForListingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSpecialtiesForListingQuery, GetAllSpecialtiesForListingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSpecialtiesForListingQuery, GetAllSpecialtiesForListingQueryVariables>(GetAllSpecialtiesForListingDocument, options);
        }
export type GetAllSpecialtiesForListingQueryHookResult = ReturnType<typeof useGetAllSpecialtiesForListingQuery>;
export type GetAllSpecialtiesForListingLazyQueryHookResult = ReturnType<typeof useGetAllSpecialtiesForListingLazyQuery>;
export type GetAllSpecialtiesForListingQueryResult = Apollo.QueryResult<GetAllSpecialtiesForListingQuery, GetAllSpecialtiesForListingQueryVariables>;
export const GetAllSpecialtiesForFilterUsersOnAssignmentsDocument = gql`
    query GetAllSpecialtiesForFilterUsersOnAssignments($offset: Int, $limit: Int, $sort: [String], $search: String, $filter: specialties_filter) {
  specialties(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: $sort
    search: $search
  ) {
    ...Specialty
  }
}
    ${SpecialtyFragmentDoc}`;

/**
 * __useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllSpecialtiesForFilterUsersOnAssignmentsQuery, GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSpecialtiesForFilterUsersOnAssignmentsQuery, GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables>(GetAllSpecialtiesForFilterUsersOnAssignmentsDocument, options);
      }
export function useGetAllSpecialtiesForFilterUsersOnAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSpecialtiesForFilterUsersOnAssignmentsQuery, GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSpecialtiesForFilterUsersOnAssignmentsQuery, GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables>(GetAllSpecialtiesForFilterUsersOnAssignmentsDocument, options);
        }
export type GetAllSpecialtiesForFilterUsersOnAssignmentsQueryHookResult = ReturnType<typeof useGetAllSpecialtiesForFilterUsersOnAssignmentsQuery>;
export type GetAllSpecialtiesForFilterUsersOnAssignmentsLazyQueryHookResult = ReturnType<typeof useGetAllSpecialtiesForFilterUsersOnAssignmentsLazyQuery>;
export type GetAllSpecialtiesForFilterUsersOnAssignmentsQueryResult = Apollo.QueryResult<GetAllSpecialtiesForFilterUsersOnAssignmentsQuery, GetAllSpecialtiesForFilterUsersOnAssignmentsQueryVariables>;
export const SpecialtiesDocument = gql`
    query specialties($filter: specialties_filter, $sort: [String], $search: String, $limit: Int) {
  specialties(filter: $filter, sort: $sort, search: $search, limit: $limit) {
    ...Specialty
  }
}
    ${SpecialtyFragmentDoc}`;

/**
 * __useSpecialtiesQuery__
 *
 * To run a query within a React component, call `useSpecialtiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSpecialtiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSpecialtiesQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      search: // value for 'search'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useSpecialtiesQuery(baseOptions?: Apollo.QueryHookOptions<SpecialtiesQuery, SpecialtiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SpecialtiesQuery, SpecialtiesQueryVariables>(SpecialtiesDocument, options);
      }
export function useSpecialtiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SpecialtiesQuery, SpecialtiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SpecialtiesQuery, SpecialtiesQueryVariables>(SpecialtiesDocument, options);
        }
export type SpecialtiesQueryHookResult = ReturnType<typeof useSpecialtiesQuery>;
export type SpecialtiesLazyQueryHookResult = ReturnType<typeof useSpecialtiesLazyQuery>;
export type SpecialtiesQueryResult = Apollo.QueryResult<SpecialtiesQuery, SpecialtiesQueryVariables>;
export const CreateSpecialtyDocument = gql`
    mutation createSpecialty($data: create_specialties_input!) {
  create_specialties_item(data: $data) {
    id
  }
}
    `;
export type CreateSpecialtyMutationFn = Apollo.MutationFunction<CreateSpecialtyMutation, CreateSpecialtyMutationVariables>;

/**
 * __useCreateSpecialtyMutation__
 *
 * To run a mutation, you first call `useCreateSpecialtyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSpecialtyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSpecialtyMutation, { data, loading, error }] = useCreateSpecialtyMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSpecialtyMutation(baseOptions?: Apollo.MutationHookOptions<CreateSpecialtyMutation, CreateSpecialtyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSpecialtyMutation, CreateSpecialtyMutationVariables>(CreateSpecialtyDocument, options);
      }
export type CreateSpecialtyMutationHookResult = ReturnType<typeof useCreateSpecialtyMutation>;
export type CreateSpecialtyMutationResult = Apollo.MutationResult<CreateSpecialtyMutation>;
export type CreateSpecialtyMutationOptions = Apollo.BaseMutationOptions<CreateSpecialtyMutation, CreateSpecialtyMutationVariables>;
export const UpdateSpecialtyDocument = gql`
    mutation updateSpecialty($id: ID!, $data: update_specialties_input!) {
  update_specialties_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateSpecialtyMutationFn = Apollo.MutationFunction<UpdateSpecialtyMutation, UpdateSpecialtyMutationVariables>;

/**
 * __useUpdateSpecialtyMutation__
 *
 * To run a mutation, you first call `useUpdateSpecialtyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSpecialtyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSpecialtyMutation, { data, loading, error }] = useUpdateSpecialtyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSpecialtyMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSpecialtyMutation, UpdateSpecialtyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSpecialtyMutation, UpdateSpecialtyMutationVariables>(UpdateSpecialtyDocument, options);
      }
export type UpdateSpecialtyMutationHookResult = ReturnType<typeof useUpdateSpecialtyMutation>;
export type UpdateSpecialtyMutationResult = Apollo.MutationResult<UpdateSpecialtyMutation>;
export type UpdateSpecialtyMutationOptions = Apollo.BaseMutationOptions<UpdateSpecialtyMutation, UpdateSpecialtyMutationVariables>;
export const DeleteSpecialtyDocument = gql`
    mutation deleteSpecialty($id: ID!) {
  update_specialties_item(id: $id, data: {status: "archived"}) {
    id
  }
}
    `;
export type DeleteSpecialtyMutationFn = Apollo.MutationFunction<DeleteSpecialtyMutation, DeleteSpecialtyMutationVariables>;

/**
 * __useDeleteSpecialtyMutation__
 *
 * To run a mutation, you first call `useDeleteSpecialtyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSpecialtyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSpecialtyMutation, { data, loading, error }] = useDeleteSpecialtyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSpecialtyMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSpecialtyMutation, DeleteSpecialtyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSpecialtyMutation, DeleteSpecialtyMutationVariables>(DeleteSpecialtyDocument, options);
      }
export type DeleteSpecialtyMutationHookResult = ReturnType<typeof useDeleteSpecialtyMutation>;
export type DeleteSpecialtyMutationResult = Apollo.MutationResult<DeleteSpecialtyMutation>;
export type DeleteSpecialtyMutationOptions = Apollo.BaseMutationOptions<DeleteSpecialtyMutation, DeleteSpecialtyMutationVariables>;
export const UpdateAgencyEmailNotificationsSettingsDocument = gql`
    mutation updateAgencyEmailNotificationsSettings($id: ID!, $notificationsSettings: JSON!, $email: String!, $name: String!) {
  update_agencies_item(
    id: $id
    data: {notifications_settings: $notificationsSettings, automatic_notifications_email: $email, name: $name}
  ) {
    id
  }
}
    `;
export type UpdateAgencyEmailNotificationsSettingsMutationFn = Apollo.MutationFunction<UpdateAgencyEmailNotificationsSettingsMutation, UpdateAgencyEmailNotificationsSettingsMutationVariables>;

/**
 * __useUpdateAgencyEmailNotificationsSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateAgencyEmailNotificationsSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgencyEmailNotificationsSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgencyEmailNotificationsSettingsMutation, { data, loading, error }] = useUpdateAgencyEmailNotificationsSettingsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      notificationsSettings: // value for 'notificationsSettings'
 *      email: // value for 'email'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useUpdateAgencyEmailNotificationsSettingsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAgencyEmailNotificationsSettingsMutation, UpdateAgencyEmailNotificationsSettingsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAgencyEmailNotificationsSettingsMutation, UpdateAgencyEmailNotificationsSettingsMutationVariables>(UpdateAgencyEmailNotificationsSettingsDocument, options);
      }
export type UpdateAgencyEmailNotificationsSettingsMutationHookResult = ReturnType<typeof useUpdateAgencyEmailNotificationsSettingsMutation>;
export type UpdateAgencyEmailNotificationsSettingsMutationResult = Apollo.MutationResult<UpdateAgencyEmailNotificationsSettingsMutation>;
export type UpdateAgencyEmailNotificationsSettingsMutationOptions = Apollo.BaseMutationOptions<UpdateAgencyEmailNotificationsSettingsMutation, UpdateAgencyEmailNotificationsSettingsMutationVariables>;
export const GetDashboardCertificatesDocument = gql`
    query GetDashboardCertificates($limit: Int) {
  exams: junction_directus_users_exams(
    limit: $limit
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "COMPLETED"}}]}
    sort: ["-finished_on"]
  ) {
    id
    import_cert_url
    finished_on
    exams_id {
      id
      title
    }
  }
  modules: junction_modules_definition_directus_users(
    limit: $limit
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "FINISHED"}, approved: {_eq: true}}]}
    sort: ["-finished_on"]
  ) {
    id
    import_cert_url
    finished_on
    modules_definition_id {
      title
    }
  }
}
    `;

/**
 * __useGetDashboardCertificatesQuery__
 *
 * To run a query within a React component, call `useGetDashboardCertificatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDashboardCertificatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDashboardCertificatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useGetDashboardCertificatesQuery(baseOptions?: Apollo.QueryHookOptions<GetDashboardCertificatesQuery, GetDashboardCertificatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDashboardCertificatesQuery, GetDashboardCertificatesQueryVariables>(GetDashboardCertificatesDocument, options);
      }
export function useGetDashboardCertificatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDashboardCertificatesQuery, GetDashboardCertificatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDashboardCertificatesQuery, GetDashboardCertificatesQueryVariables>(GetDashboardCertificatesDocument, options);
        }
export type GetDashboardCertificatesQueryHookResult = ReturnType<typeof useGetDashboardCertificatesQuery>;
export type GetDashboardCertificatesLazyQueryHookResult = ReturnType<typeof useGetDashboardCertificatesLazyQuery>;
export type GetDashboardCertificatesQueryResult = Apollo.QueryResult<GetDashboardCertificatesQuery, GetDashboardCertificatesQueryVariables>;
export const GetClinicianDashboardItemsDocument = gql`
    query GetClinicianDashboardItems($examsfilter: junction_directus_users_exams_filter, $modulesfilter: junction_modules_definition_directus_users_filter, $scfilter: junction_sc_definitions_directus_users_filter, $policiesfilter: junction_directus_users_policies_filter, $documentsfilter: junction_directus_users_documents_filter) {
  exams: junction_directus_users_exams(filter: $examsfilter) {
    status
    due_date
    exams_id {
      id
      title
    }
  }
  modules: junction_modules_definition_directus_users(filter: $modulesfilter) {
    status
    due_date
    modules_definition_id {
      id
      title
    }
  }
  skills_checklists: junction_sc_definitions_directus_users(filter: $scfilter) {
    status
    due_date
    sc_definitions_id {
      id
      title
    }
  }
  policies: junction_directus_users_policies(filter: $policiesfilter) {
    status
    due_date
    policies_id {
      id
      name
    }
  }
  documents: junction_directus_users_documents(filter: $documentsfilter) {
    status
    due_date
    documents_id {
      id
      title
    }
  }
}
    `;

/**
 * __useGetClinicianDashboardItemsQuery__
 *
 * To run a query within a React component, call `useGetClinicianDashboardItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClinicianDashboardItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClinicianDashboardItemsQuery({
 *   variables: {
 *      examsfilter: // value for 'examsfilter'
 *      modulesfilter: // value for 'modulesfilter'
 *      scfilter: // value for 'scfilter'
 *      policiesfilter: // value for 'policiesfilter'
 *      documentsfilter: // value for 'documentsfilter'
 *   },
 * });
 */
export function useGetClinicianDashboardItemsQuery(baseOptions?: Apollo.QueryHookOptions<GetClinicianDashboardItemsQuery, GetClinicianDashboardItemsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetClinicianDashboardItemsQuery, GetClinicianDashboardItemsQueryVariables>(GetClinicianDashboardItemsDocument, options);
      }
export function useGetClinicianDashboardItemsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClinicianDashboardItemsQuery, GetClinicianDashboardItemsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetClinicianDashboardItemsQuery, GetClinicianDashboardItemsQueryVariables>(GetClinicianDashboardItemsDocument, options);
        }
export type GetClinicianDashboardItemsQueryHookResult = ReturnType<typeof useGetClinicianDashboardItemsQuery>;
export type GetClinicianDashboardItemsLazyQueryHookResult = ReturnType<typeof useGetClinicianDashboardItemsLazyQuery>;
export type GetClinicianDashboardItemsQueryResult = Apollo.QueryResult<GetClinicianDashboardItemsQuery, GetClinicianDashboardItemsQueryVariables>;
export const GetClinicianDashboardAnalyticsDocument = gql`
    query GetClinicianDashboardAnalytics {
  exam_avg: junction_directus_users_exams_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "COMPLETED"}}]}
  ) {
    avg {
      score
    }
  }
  exam_ceus: junction_directus_users_exams(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "COMPLETED"}}]}
  ) {
    exam_versions_id {
      contact_hour
    }
  }
  module_avg: junction_modules_definition_directus_users_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "FINISHED"}}]}
  ) {
    avg {
      score
    }
  }
  module_ceus: junction_modules_definition_directus_users(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "FINISHED"}}, {approved: {_eq: true}}]}
  ) {
    modules_definition_id {
      last_version {
        contact_hour
      }
    }
  }
}
    `;

/**
 * __useGetClinicianDashboardAnalyticsQuery__
 *
 * To run a query within a React component, call `useGetClinicianDashboardAnalyticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClinicianDashboardAnalyticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClinicianDashboardAnalyticsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClinicianDashboardAnalyticsQuery(baseOptions?: Apollo.QueryHookOptions<GetClinicianDashboardAnalyticsQuery, GetClinicianDashboardAnalyticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetClinicianDashboardAnalyticsQuery, GetClinicianDashboardAnalyticsQueryVariables>(GetClinicianDashboardAnalyticsDocument, options);
      }
export function useGetClinicianDashboardAnalyticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClinicianDashboardAnalyticsQuery, GetClinicianDashboardAnalyticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetClinicianDashboardAnalyticsQuery, GetClinicianDashboardAnalyticsQueryVariables>(GetClinicianDashboardAnalyticsDocument, options);
        }
export type GetClinicianDashboardAnalyticsQueryHookResult = ReturnType<typeof useGetClinicianDashboardAnalyticsQuery>;
export type GetClinicianDashboardAnalyticsLazyQueryHookResult = ReturnType<typeof useGetClinicianDashboardAnalyticsLazyQuery>;
export type GetClinicianDashboardAnalyticsQueryResult = Apollo.QueryResult<GetClinicianDashboardAnalyticsQuery, GetClinicianDashboardAnalyticsQueryVariables>;
export const GetClinicianDashboardCompetenciesDocument = gql`
    query GetClinicianDashboardCompetencies {
  total_exams: junction_directus_users_exams_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_in: ["NOT_STARTED", "IN_PROGRESS", "FAILED", "EXPIRED", "DUE_DATE_EXPIRED", "COMPLETED"]}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_exams_completed: junction_directus_users_exams_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_in: ["COMPLETED"]}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_modules: junction_modules_definition_directus_users_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_in: ["PENDING", "FINISHED", "STARTED", "DUE_DATE_EXPIRED"]}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_modules_completed: junction_modules_definition_directus_users_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "FINISHED"}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_skills_checklists: junction_sc_definitions_directus_users_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_in: ["PENDING", "COMPLETED", "DUE_DATE_EXPIRED"]}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_skills_checklists_completed: junction_sc_definitions_directus_users_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_eq: "COMPLETED"}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_policies: junction_directus_users_policies_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_neq: "archived"}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_policies_completed: junction_directus_users_policies_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_neq: "archived"}}, {signed_on: {_nnull: true}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_documents: junction_directus_users_documents_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_neq: "archived"}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
  total_documents_completed: junction_directus_users_documents_aggregated(
    filter: {_and: [{directus_users_id: {id: {_eq: "$CURRENT_USER"}}}, {status: {_neq: "archived"}}, {read: {_nnull: true}}, {agency: {_and: [{directus_users: {status: {_eq: "active"}}}, {directus_users: {directus_users_id: {id: {_eq: "$CURRENT_USER"}}}}]}}]}
  ) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetClinicianDashboardCompetenciesQuery__
 *
 * To run a query within a React component, call `useGetClinicianDashboardCompetenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClinicianDashboardCompetenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClinicianDashboardCompetenciesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetClinicianDashboardCompetenciesQuery(baseOptions?: Apollo.QueryHookOptions<GetClinicianDashboardCompetenciesQuery, GetClinicianDashboardCompetenciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetClinicianDashboardCompetenciesQuery, GetClinicianDashboardCompetenciesQueryVariables>(GetClinicianDashboardCompetenciesDocument, options);
      }
export function useGetClinicianDashboardCompetenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClinicianDashboardCompetenciesQuery, GetClinicianDashboardCompetenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetClinicianDashboardCompetenciesQuery, GetClinicianDashboardCompetenciesQueryVariables>(GetClinicianDashboardCompetenciesDocument, options);
        }
export type GetClinicianDashboardCompetenciesQueryHookResult = ReturnType<typeof useGetClinicianDashboardCompetenciesQuery>;
export type GetClinicianDashboardCompetenciesLazyQueryHookResult = ReturnType<typeof useGetClinicianDashboardCompetenciesLazyQuery>;
export type GetClinicianDashboardCompetenciesQueryResult = Apollo.QueryResult<GetClinicianDashboardCompetenciesQuery, GetClinicianDashboardCompetenciesQueryVariables>;
export const GetModulesOverviewFiltersDocument = gql`
    query getModulesOverviewFilters($limit: Int!, $moduleSearch: String, $moduleFilters: modules_definition_filter, $modalitySearch: String, $specialitySearch: String, $subSpecialitySearch: String, $departmentsSearch: String, $departmentsFilters: departments_filter, $locationsSearch: String, $locationsFilters: locations_filter, $specialtiesSearch: String, $specialtiesFilters: specialties_filter) {
  modalities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "modality"}}
    search: $modalitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  specialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "speciality"}}
    search: $specialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  subSpecialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "sub_speciality"}}
    search: $subSpecialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  modules: modules_definition(
    limit: $limit
    search: $moduleSearch
    filter: $moduleFilters
  ) {
    ...ModuleDefinition
  }
  departments: departments(
    filter: $departmentsFilters
    search: $departmentsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Department
  }
  specialties: specialties(
    filter: $specialtiesFilters
    search: $specialtiesSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Specialty
  }
  locations: locations(
    filter: $locationsFilters
    search: $locationsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Location
  }
}
    ${ModuleDefinitionFragmentDoc}
${DepartmentFragmentDoc}
${SpecialtyFragmentDoc}
${LocationFragmentDoc}`;

/**
 * __useGetModulesOverviewFiltersQuery__
 *
 * To run a query within a React component, call `useGetModulesOverviewFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModulesOverviewFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModulesOverviewFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      moduleSearch: // value for 'moduleSearch'
 *      moduleFilters: // value for 'moduleFilters'
 *      modalitySearch: // value for 'modalitySearch'
 *      specialitySearch: // value for 'specialitySearch'
 *      subSpecialitySearch: // value for 'subSpecialitySearch'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      departmentsFilters: // value for 'departmentsFilters'
 *      locationsSearch: // value for 'locationsSearch'
 *      locationsFilters: // value for 'locationsFilters'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *      specialtiesFilters: // value for 'specialtiesFilters'
 *   },
 * });
 */
export function useGetModulesOverviewFiltersQuery(baseOptions: Apollo.QueryHookOptions<GetModulesOverviewFiltersQuery, GetModulesOverviewFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModulesOverviewFiltersQuery, GetModulesOverviewFiltersQueryVariables>(GetModulesOverviewFiltersDocument, options);
      }
export function useGetModulesOverviewFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModulesOverviewFiltersQuery, GetModulesOverviewFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModulesOverviewFiltersQuery, GetModulesOverviewFiltersQueryVariables>(GetModulesOverviewFiltersDocument, options);
        }
export type GetModulesOverviewFiltersQueryHookResult = ReturnType<typeof useGetModulesOverviewFiltersQuery>;
export type GetModulesOverviewFiltersLazyQueryHookResult = ReturnType<typeof useGetModulesOverviewFiltersLazyQuery>;
export type GetModulesOverviewFiltersQueryResult = Apollo.QueryResult<GetModulesOverviewFiltersQuery, GetModulesOverviewFiltersQueryVariables>;
export const GetPoliciesOverviewFiltersDocument = gql`
    query getPoliciesOverviewFilters($limit: Int, $departmentsFilter: departments_filter, $locationsFilter: locations_filter, $specialtiesFilter: specialties_filter, $policiesFilters: policies_filter, $departmentsSearch: String, $locationsSearch: String, $specialtiesSearch: String, $categorySearch: String, $policiesSearch: String) {
  categories: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "document"}}
    search: $categorySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  departments: departments(
    filter: $departmentsFilter
    search: $departmentsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Department
  }
  specialties: specialties(
    filter: $specialtiesFilter
    search: $specialtiesSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Specialty
  }
  locations: locations(
    filter: $locationsFilter
    search: $locationsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Location
  }
  policies: policies(
    filter: $policiesFilters
    search: $policiesSearch
    limit: $limit
  ) {
    id
    name
  }
}
    ${DepartmentFragmentDoc}
${SpecialtyFragmentDoc}
${LocationFragmentDoc}`;

/**
 * __useGetPoliciesOverviewFiltersQuery__
 *
 * To run a query within a React component, call `useGetPoliciesOverviewFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPoliciesOverviewFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPoliciesOverviewFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      departmentsFilter: // value for 'departmentsFilter'
 *      locationsFilter: // value for 'locationsFilter'
 *      specialtiesFilter: // value for 'specialtiesFilter'
 *      policiesFilters: // value for 'policiesFilters'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      locationsSearch: // value for 'locationsSearch'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *      categorySearch: // value for 'categorySearch'
 *      policiesSearch: // value for 'policiesSearch'
 *   },
 * });
 */
export function useGetPoliciesOverviewFiltersQuery(baseOptions?: Apollo.QueryHookOptions<GetPoliciesOverviewFiltersQuery, GetPoliciesOverviewFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPoliciesOverviewFiltersQuery, GetPoliciesOverviewFiltersQueryVariables>(GetPoliciesOverviewFiltersDocument, options);
      }
export function useGetPoliciesOverviewFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPoliciesOverviewFiltersQuery, GetPoliciesOverviewFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPoliciesOverviewFiltersQuery, GetPoliciesOverviewFiltersQueryVariables>(GetPoliciesOverviewFiltersDocument, options);
        }
export type GetPoliciesOverviewFiltersQueryHookResult = ReturnType<typeof useGetPoliciesOverviewFiltersQuery>;
export type GetPoliciesOverviewFiltersLazyQueryHookResult = ReturnType<typeof useGetPoliciesOverviewFiltersLazyQuery>;
export type GetPoliciesOverviewFiltersQueryResult = Apollo.QueryResult<GetPoliciesOverviewFiltersQuery, GetPoliciesOverviewFiltersQueryVariables>;
export const GetDocumentsOverviewFiltersDocument = gql`
    query getDocumentsOverviewFilters($limit: Int, $departmentsFilter: departments_filter, $locationsFilter: locations_filter, $specialtiesFilter: specialties_filter, $documentsFilters: documents_filter, $departmentsSearch: String, $locationsSearch: String, $specialtiesSearch: String, $categorySearch: String, $documentsSearch: String) {
  categories: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "document"}}
    search: $categorySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  departments: departments(
    filter: $departmentsFilter
    search: $departmentsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Department
  }
  specialties: specialties(
    filter: $specialtiesFilter
    search: $specialtiesSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Specialty
  }
  locations: locations(
    filter: $locationsFilter
    search: $locationsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Location
  }
  documents: documents(
    filter: $documentsFilters
    search: $documentsSearch
    limit: $limit
  ) {
    id
    title
  }
}
    ${DepartmentFragmentDoc}
${SpecialtyFragmentDoc}
${LocationFragmentDoc}`;

/**
 * __useGetDocumentsOverviewFiltersQuery__
 *
 * To run a query within a React component, call `useGetDocumentsOverviewFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDocumentsOverviewFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDocumentsOverviewFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      departmentsFilter: // value for 'departmentsFilter'
 *      locationsFilter: // value for 'locationsFilter'
 *      specialtiesFilter: // value for 'specialtiesFilter'
 *      documentsFilters: // value for 'documentsFilters'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      locationsSearch: // value for 'locationsSearch'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *      categorySearch: // value for 'categorySearch'
 *      documentsSearch: // value for 'documentsSearch'
 *   },
 * });
 */
export function useGetDocumentsOverviewFiltersQuery(baseOptions?: Apollo.QueryHookOptions<GetDocumentsOverviewFiltersQuery, GetDocumentsOverviewFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDocumentsOverviewFiltersQuery, GetDocumentsOverviewFiltersQueryVariables>(GetDocumentsOverviewFiltersDocument, options);
      }
export function useGetDocumentsOverviewFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDocumentsOverviewFiltersQuery, GetDocumentsOverviewFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDocumentsOverviewFiltersQuery, GetDocumentsOverviewFiltersQueryVariables>(GetDocumentsOverviewFiltersDocument, options);
        }
export type GetDocumentsOverviewFiltersQueryHookResult = ReturnType<typeof useGetDocumentsOverviewFiltersQuery>;
export type GetDocumentsOverviewFiltersLazyQueryHookResult = ReturnType<typeof useGetDocumentsOverviewFiltersLazyQuery>;
export type GetDocumentsOverviewFiltersQueryResult = Apollo.QueryResult<GetDocumentsOverviewFiltersQuery, GetDocumentsOverviewFiltersQueryVariables>;
export const GetSkillsChecklistOverviewFiltersDocument = gql`
    query getSkillsChecklistOverviewFilters($limit: Int, $modalitySearch: String, $specialitySearch: String, $subSpecialitySearch: String, $departmentsSearch: String, $departmentsFilters: departments_filter, $locationsSearch: String, $locationsFilters: locations_filter, $specialtiesSearch: String, $specialtiesFilters: specialties_filter, $skillsChecklistFilter: sc_definitions_filter, $skillsChecklistSearch: String) {
  modalities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "modality"}}
    search: $modalitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  specialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "speciality"}}
    search: $specialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  subSpecialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "sub_speciality"}}
    search: $subSpecialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  departments: departments(
    filter: $departmentsFilters
    search: $departmentsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Department
  }
  specialties: specialties(
    filter: $specialtiesFilters
    search: $specialtiesSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Specialty
  }
  locations: locations(
    filter: $locationsFilters
    search: $locationsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Location
  }
  skillsChecklist: sc_definitions(
    filter: $skillsChecklistFilter
    search: $skillsChecklistSearch
    limit: $limit
  ) {
    id
    title
  }
}
    ${DepartmentFragmentDoc}
${SpecialtyFragmentDoc}
${LocationFragmentDoc}`;

/**
 * __useGetSkillsChecklistOverviewFiltersQuery__
 *
 * To run a query within a React component, call `useGetSkillsChecklistOverviewFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillsChecklistOverviewFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillsChecklistOverviewFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      modalitySearch: // value for 'modalitySearch'
 *      specialitySearch: // value for 'specialitySearch'
 *      subSpecialitySearch: // value for 'subSpecialitySearch'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      departmentsFilters: // value for 'departmentsFilters'
 *      locationsSearch: // value for 'locationsSearch'
 *      locationsFilters: // value for 'locationsFilters'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *      specialtiesFilters: // value for 'specialtiesFilters'
 *      skillsChecklistFilter: // value for 'skillsChecklistFilter'
 *      skillsChecklistSearch: // value for 'skillsChecklistSearch'
 *   },
 * });
 */
export function useGetSkillsChecklistOverviewFiltersQuery(baseOptions?: Apollo.QueryHookOptions<GetSkillsChecklistOverviewFiltersQuery, GetSkillsChecklistOverviewFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSkillsChecklistOverviewFiltersQuery, GetSkillsChecklistOverviewFiltersQueryVariables>(GetSkillsChecklistOverviewFiltersDocument, options);
      }
export function useGetSkillsChecklistOverviewFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSkillsChecklistOverviewFiltersQuery, GetSkillsChecklistOverviewFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSkillsChecklistOverviewFiltersQuery, GetSkillsChecklistOverviewFiltersQueryVariables>(GetSkillsChecklistOverviewFiltersDocument, options);
        }
export type GetSkillsChecklistOverviewFiltersQueryHookResult = ReturnType<typeof useGetSkillsChecklistOverviewFiltersQuery>;
export type GetSkillsChecklistOverviewFiltersLazyQueryHookResult = ReturnType<typeof useGetSkillsChecklistOverviewFiltersLazyQuery>;
export type GetSkillsChecklistOverviewFiltersQueryResult = Apollo.QueryResult<GetSkillsChecklistOverviewFiltersQuery, GetSkillsChecklistOverviewFiltersQueryVariables>;
export const GetExamsOverviewFiltersDocument = gql`
    query getExamsOverviewFilters($limit: Int!, $modalitySearch: String, $specialitySearch: String, $subSpecialitySearch: String) {
  modalities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "modality"}}
    search: $modalitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  specialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "speciality"}}
    search: $specialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
  subSpecialities: categories(
    filter: {status: {_eq: "published"}, type: {_eq: "sub_speciality"}}
    search: $subSpecialitySearch
    limit: $limit
    sort: ["title"]
  ) {
    id
    title
  }
}
    `;

/**
 * __useGetExamsOverviewFiltersQuery__
 *
 * To run a query within a React component, call `useGetExamsOverviewFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetExamsOverviewFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetExamsOverviewFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      modalitySearch: // value for 'modalitySearch'
 *      specialitySearch: // value for 'specialitySearch'
 *      subSpecialitySearch: // value for 'subSpecialitySearch'
 *   },
 * });
 */
export function useGetExamsOverviewFiltersQuery(baseOptions: Apollo.QueryHookOptions<GetExamsOverviewFiltersQuery, GetExamsOverviewFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetExamsOverviewFiltersQuery, GetExamsOverviewFiltersQueryVariables>(GetExamsOverviewFiltersDocument, options);
      }
export function useGetExamsOverviewFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetExamsOverviewFiltersQuery, GetExamsOverviewFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetExamsOverviewFiltersQuery, GetExamsOverviewFiltersQueryVariables>(GetExamsOverviewFiltersDocument, options);
        }
export type GetExamsOverviewFiltersQueryHookResult = ReturnType<typeof useGetExamsOverviewFiltersQuery>;
export type GetExamsOverviewFiltersLazyQueryHookResult = ReturnType<typeof useGetExamsOverviewFiltersLazyQuery>;
export type GetExamsOverviewFiltersQueryResult = Apollo.QueryResult<GetExamsOverviewFiltersQuery, GetExamsOverviewFiltersQueryVariables>;
export const SummaryFiltersOptionsDocument = gql`
    query summaryFiltersOptions($limit: Int, $departmentsFilter: departments_filter, $locationsFilter: locations_filter, $specialtiesFilter: specialties_filter, $departmentsSearch: String, $locationsSearch: String, $specialtiesSearch: String) {
  departments: departments(
    sort: "name"
    filter: $departmentsFilter
    search: $departmentsSearch
    limit: $limit
  ) {
    id
    name
  }
  locations: locations(
    sort: "name"
    filter: $locationsFilter
    search: $locationsSearch
    limit: $limit
  ) {
    id
    name
  }
  specialties: specialties(
    sort: "name"
    filter: $specialtiesFilter
    search: $specialtiesSearch
    limit: $limit
  ) {
    id
    name
  }
}
    `;

/**
 * __useSummaryFiltersOptionsQuery__
 *
 * To run a query within a React component, call `useSummaryFiltersOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSummaryFiltersOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSummaryFiltersOptionsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      departmentsFilter: // value for 'departmentsFilter'
 *      locationsFilter: // value for 'locationsFilter'
 *      specialtiesFilter: // value for 'specialtiesFilter'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      locationsSearch: // value for 'locationsSearch'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *   },
 * });
 */
export function useSummaryFiltersOptionsQuery(baseOptions?: Apollo.QueryHookOptions<SummaryFiltersOptionsQuery, SummaryFiltersOptionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SummaryFiltersOptionsQuery, SummaryFiltersOptionsQueryVariables>(SummaryFiltersOptionsDocument, options);
      }
export function useSummaryFiltersOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SummaryFiltersOptionsQuery, SummaryFiltersOptionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SummaryFiltersOptionsQuery, SummaryFiltersOptionsQueryVariables>(SummaryFiltersOptionsDocument, options);
        }
export type SummaryFiltersOptionsQueryHookResult = ReturnType<typeof useSummaryFiltersOptionsQuery>;
export type SummaryFiltersOptionsLazyQueryHookResult = ReturnType<typeof useSummaryFiltersOptionsLazyQuery>;
export type SummaryFiltersOptionsQueryResult = Apollo.QueryResult<SummaryFiltersOptionsQuery, SummaryFiltersOptionsQueryVariables>;
export const GetUserAndGroupsFiltersDocument = gql`
    query getUserAndGroupsFilters($limit: Int, $departmentsFilters: departments_filter, $locationsFilters: locations_filter, $specialtiesFilters: specialties_filter, $departmentsSearch: String, $locationsSearch: String, $specialtiesSearch: String) {
  departments: departments(
    filter: $departmentsFilters
    search: $departmentsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Department
  }
  specialties: specialties(
    filter: $specialtiesFilters
    search: $specialtiesSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Specialty
  }
  locations: locations(
    filter: $locationsFilters
    search: $locationsSearch
    limit: $limit
    sort: ["name"]
  ) {
    ...Location
  }
}
    ${DepartmentFragmentDoc}
${SpecialtyFragmentDoc}
${LocationFragmentDoc}`;

/**
 * __useGetUserAndGroupsFiltersQuery__
 *
 * To run a query within a React component, call `useGetUserAndGroupsFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserAndGroupsFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserAndGroupsFiltersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      departmentsFilters: // value for 'departmentsFilters'
 *      locationsFilters: // value for 'locationsFilters'
 *      specialtiesFilters: // value for 'specialtiesFilters'
 *      departmentsSearch: // value for 'departmentsSearch'
 *      locationsSearch: // value for 'locationsSearch'
 *      specialtiesSearch: // value for 'specialtiesSearch'
 *   },
 * });
 */
export function useGetUserAndGroupsFiltersQuery(baseOptions?: Apollo.QueryHookOptions<GetUserAndGroupsFiltersQuery, GetUserAndGroupsFiltersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserAndGroupsFiltersQuery, GetUserAndGroupsFiltersQueryVariables>(GetUserAndGroupsFiltersDocument, options);
      }
export function useGetUserAndGroupsFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserAndGroupsFiltersQuery, GetUserAndGroupsFiltersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserAndGroupsFiltersQuery, GetUserAndGroupsFiltersQueryVariables>(GetUserAndGroupsFiltersDocument, options);
        }
export type GetUserAndGroupsFiltersQueryHookResult = ReturnType<typeof useGetUserAndGroupsFiltersQuery>;
export type GetUserAndGroupsFiltersLazyQueryHookResult = ReturnType<typeof useGetUserAndGroupsFiltersLazyQuery>;
export type GetUserAndGroupsFiltersQueryResult = Apollo.QueryResult<GetUserAndGroupsFiltersQuery, GetUserAndGroupsFiltersQueryVariables>;
export const GetAssignmentsTotalReportsDocument = gql`
    query getAssignmentsTotalReports($documentsUnreadFilter: junction_directus_users_documents_filter, $documentsReadFilter: junction_directus_users_documents_filter, $documentsExpiredFilter: junction_directus_users_documents_filter, $documentsTotalFilters: junction_directus_users_documents_filter, $policiesUnsignedFilter: junction_directus_users_policies_filter, $policiesSignedFilter: junction_directus_users_policies_filter, $policiesExpiredFilter: junction_directus_users_policies_filter, $policiesUnreadFilter: junction_directus_users_policies_filter, $policiesTotalFilters: junction_directus_users_policies_filter, $examsNotStartedFilter: junction_directus_users_exams_filter, $examsDoneFilter: junction_directus_users_exams_filter, $examsInProgressFilter: junction_directus_users_exams_filter, $examsExpiredFilter: junction_directus_users_exams_filter, $examsTotalFilters: junction_directus_users_exams_filter, $modulesNotStartedFilter: modules_definition_filter, $modulesPassedFilter: modules_definition_filter, $modulesInProgressFilter: modules_definition_filter, $modulesExpiredFilter: modules_definition_filter, $modulesTotalFilters: modules_definition_filter, $skillsChecklistsTodoFilter: junction_sc_definitions_directus_users_filter, $skillsChecklistsDoneFilter: junction_sc_definitions_directus_users_filter, $skillsChecklistsExpiredFilter: junction_sc_definitions_directus_users_filter, $skillsCheklistsTotalFilters: junction_sc_definitions_directus_users_filter) {
  documentsUnread: junction_directus_users_documents_aggregated(
    filter: $documentsUnreadFilter
  ) {
    count {
      id
    }
  }
  documentsRead: junction_directus_users_documents_aggregated(
    filter: $documentsReadFilter
  ) {
    count {
      id
    }
  }
  documentsExpired: junction_directus_users_documents_aggregated(
    filter: $documentsExpiredFilter
  ) {
    count {
      id
    }
  }
  policiesUnsigned: junction_directus_users_policies_aggregated(
    filter: $policiesUnsignedFilter
  ) {
    count {
      id
    }
  }
  policiesSigned: junction_directus_users_policies_aggregated(
    filter: $policiesSignedFilter
  ) {
    count {
      id
    }
  }
  policiesExpired: junction_directus_users_policies_aggregated(
    filter: $policiesExpiredFilter
  ) {
    count {
      id
    }
  }
  policiesUnread: junction_directus_users_policies_aggregated(
    filter: $policiesUnreadFilter
  ) {
    count {
      id
    }
  }
  examsNotStarted: junction_directus_users_exams_aggregated(
    filter: $examsNotStartedFilter
  ) {
    count {
      id
    }
  }
  examsDone: junction_directus_users_exams_aggregated(filter: $examsDoneFilter) {
    count {
      id
    }
  }
  examsInProgress: junction_directus_users_exams_aggregated(
    filter: $examsInProgressFilter
  ) {
    count {
      id
    }
  }
  examsExpired: junction_directus_users_exams_aggregated(
    filter: $examsExpiredFilter
  ) {
    count {
      id
    }
  }
  modulesNotStarted: modules_definition_aggregated(
    filter: $modulesNotStartedFilter
  ) {
    count {
      id
    }
  }
  modulesPassed: modules_definition_aggregated(filter: $modulesPassedFilter) {
    count {
      id
    }
  }
  modulesInProgress: modules_definition_aggregated(
    filter: $modulesInProgressFilter
  ) {
    count {
      id
    }
  }
  modulesExpired: modules_definition_aggregated(filter: $modulesExpiredFilter) {
    count {
      id
    }
  }
  skillsChecklistsTodo: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsTodoFilter
  ) {
    count {
      id
    }
  }
  skillsChecklistsDone: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsDoneFilter
  ) {
    count {
      id
    }
  }
  skillsChecklistsExpired: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsExpiredFilter
  ) {
    count {
      id
    }
  }
  examsTotal: junction_directus_users_exams_aggregated(filter: $examsTotalFilters) {
    count {
      id
    }
  }
  modulesTotal: modules_definition_aggregated(filter: $modulesTotalFilters) {
    count {
      id
    }
  }
  skillsChecklistTotal: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsCheklistsTotalFilters
  ) {
    count {
      id
    }
  }
  documentsTotal: junction_directus_users_documents_aggregated(
    filter: $documentsTotalFilters
  ) {
    count {
      id
    }
  }
  policiesTotal: junction_directus_users_policies_aggregated(
    filter: $policiesTotalFilters
  ) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetAssignmentsTotalReportsQuery__
 *
 * To run a query within a React component, call `useGetAssignmentsTotalReportsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAssignmentsTotalReportsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAssignmentsTotalReportsQuery({
 *   variables: {
 *      documentsUnreadFilter: // value for 'documentsUnreadFilter'
 *      documentsReadFilter: // value for 'documentsReadFilter'
 *      documentsExpiredFilter: // value for 'documentsExpiredFilter'
 *      documentsTotalFilters: // value for 'documentsTotalFilters'
 *      policiesUnsignedFilter: // value for 'policiesUnsignedFilter'
 *      policiesSignedFilter: // value for 'policiesSignedFilter'
 *      policiesExpiredFilter: // value for 'policiesExpiredFilter'
 *      policiesUnreadFilter: // value for 'policiesUnreadFilter'
 *      policiesTotalFilters: // value for 'policiesTotalFilters'
 *      examsNotStartedFilter: // value for 'examsNotStartedFilter'
 *      examsDoneFilter: // value for 'examsDoneFilter'
 *      examsInProgressFilter: // value for 'examsInProgressFilter'
 *      examsExpiredFilter: // value for 'examsExpiredFilter'
 *      examsTotalFilters: // value for 'examsTotalFilters'
 *      modulesNotStartedFilter: // value for 'modulesNotStartedFilter'
 *      modulesPassedFilter: // value for 'modulesPassedFilter'
 *      modulesInProgressFilter: // value for 'modulesInProgressFilter'
 *      modulesExpiredFilter: // value for 'modulesExpiredFilter'
 *      modulesTotalFilters: // value for 'modulesTotalFilters'
 *      skillsChecklistsTodoFilter: // value for 'skillsChecklistsTodoFilter'
 *      skillsChecklistsDoneFilter: // value for 'skillsChecklistsDoneFilter'
 *      skillsChecklistsExpiredFilter: // value for 'skillsChecklistsExpiredFilter'
 *      skillsCheklistsTotalFilters: // value for 'skillsCheklistsTotalFilters'
 *   },
 * });
 */
export function useGetAssignmentsTotalReportsQuery(baseOptions?: Apollo.QueryHookOptions<GetAssignmentsTotalReportsQuery, GetAssignmentsTotalReportsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAssignmentsTotalReportsQuery, GetAssignmentsTotalReportsQueryVariables>(GetAssignmentsTotalReportsDocument, options);
      }
export function useGetAssignmentsTotalReportsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAssignmentsTotalReportsQuery, GetAssignmentsTotalReportsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAssignmentsTotalReportsQuery, GetAssignmentsTotalReportsQueryVariables>(GetAssignmentsTotalReportsDocument, options);
        }
export type GetAssignmentsTotalReportsQueryHookResult = ReturnType<typeof useGetAssignmentsTotalReportsQuery>;
export type GetAssignmentsTotalReportsLazyQueryHookResult = ReturnType<typeof useGetAssignmentsTotalReportsLazyQuery>;
export type GetAssignmentsTotalReportsQueryResult = Apollo.QueryResult<GetAssignmentsTotalReportsQuery, GetAssignmentsTotalReportsQueryVariables>;
export const GetUserAndGroupsOverviewAssignmentsDocument = gql`
    query getUserAndGroupsOverviewAssignments($documentsUnreadFilter: junction_directus_users_documents_filter, $documentsReadFilter: junction_directus_users_documents_filter, $documentsExpiredFilter: junction_directus_users_documents_filter, $policiesUnsignedFilter: junction_directus_users_policies_filter, $policiesSignedFilter: junction_directus_users_policies_filter, $policiesExpiredFilter: junction_directus_users_policies_filter, $policiesUnreadFilter: junction_directus_users_policies_filter, $examsNotStartedFilter: junction_directus_users_exams_filter, $examsDoneFilter: junction_directus_users_exams_filter, $examsInProgressFilter: junction_directus_users_exams_filter, $examsExpiredFilter: junction_directus_users_exams_filter, $modulesNotStartedFilter: junction_modules_definition_directus_users_filter, $modulesPassedFilter: junction_modules_definition_directus_users_filter, $modulesInProgressFilter: junction_modules_definition_directus_users_filter, $modulesExpiredFilter: junction_modules_definition_directus_users_filter, $skillsChecklistsTodoFilter: junction_sc_definitions_directus_users_filter, $skillsChecklistsDoneFilter: junction_sc_definitions_directus_users_filter, $skillsChecklistsExpiredFilter: junction_sc_definitions_directus_users_filter) {
  documentsUnread: junction_directus_users_documents_aggregated(
    filter: $documentsUnreadFilter
  ) {
    count {
      id
    }
  }
  documentsRead: junction_directus_users_documents_aggregated(
    filter: $documentsReadFilter
  ) {
    count {
      id
    }
  }
  documentsExpired: junction_directus_users_documents_aggregated(
    filter: $documentsExpiredFilter
  ) {
    count {
      id
    }
  }
  policiesUnsigned: junction_directus_users_policies_aggregated(
    filter: $policiesUnsignedFilter
  ) {
    count {
      id
    }
  }
  policiesSigned: junction_directus_users_policies_aggregated(
    filter: $policiesSignedFilter
  ) {
    count {
      id
    }
  }
  policiesExpired: junction_directus_users_policies_aggregated(
    filter: $policiesExpiredFilter
  ) {
    count {
      id
    }
  }
  policiesUnread: junction_directus_users_policies_aggregated(
    filter: $policiesUnreadFilter
  ) {
    count {
      id
    }
  }
  examsNotStarted: junction_directus_users_exams_aggregated(
    filter: $examsNotStartedFilter
  ) {
    count {
      id
    }
  }
  examsDone: junction_directus_users_exams_aggregated(filter: $examsDoneFilter) {
    count {
      id
    }
  }
  examsInProgress: junction_directus_users_exams_aggregated(
    filter: $examsInProgressFilter
  ) {
    count {
      id
    }
  }
  examsExpired: junction_directus_users_exams_aggregated(
    filter: $examsExpiredFilter
  ) {
    count {
      id
    }
  }
  modulesNotStarted: junction_modules_definition_directus_users_aggregated(
    filter: $modulesNotStartedFilter
  ) {
    count {
      id
    }
  }
  modulesPassed: junction_modules_definition_directus_users_aggregated(
    filter: $modulesPassedFilter
  ) {
    count {
      id
    }
  }
  modulesInProgress: junction_modules_definition_directus_users_aggregated(
    filter: $modulesInProgressFilter
  ) {
    count {
      id
    }
  }
  modulesExpired: junction_modules_definition_directus_users_aggregated(
    filter: $modulesExpiredFilter
  ) {
    count {
      id
    }
  }
  skillsChecklistsTodo: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsTodoFilter
  ) {
    count {
      id
    }
  }
  skillsChecklistsDone: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsDoneFilter
  ) {
    count {
      id
    }
  }
  skillsChecklistsExpired: junction_sc_definitions_directus_users_aggregated(
    filter: $skillsChecklistsExpiredFilter
  ) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetUserAndGroupsOverviewAssignmentsQuery__
 *
 * To run a query within a React component, call `useGetUserAndGroupsOverviewAssignmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserAndGroupsOverviewAssignmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserAndGroupsOverviewAssignmentsQuery({
 *   variables: {
 *      documentsUnreadFilter: // value for 'documentsUnreadFilter'
 *      documentsReadFilter: // value for 'documentsReadFilter'
 *      documentsExpiredFilter: // value for 'documentsExpiredFilter'
 *      policiesUnsignedFilter: // value for 'policiesUnsignedFilter'
 *      policiesSignedFilter: // value for 'policiesSignedFilter'
 *      policiesExpiredFilter: // value for 'policiesExpiredFilter'
 *      policiesUnreadFilter: // value for 'policiesUnreadFilter'
 *      examsNotStartedFilter: // value for 'examsNotStartedFilter'
 *      examsDoneFilter: // value for 'examsDoneFilter'
 *      examsInProgressFilter: // value for 'examsInProgressFilter'
 *      examsExpiredFilter: // value for 'examsExpiredFilter'
 *      modulesNotStartedFilter: // value for 'modulesNotStartedFilter'
 *      modulesPassedFilter: // value for 'modulesPassedFilter'
 *      modulesInProgressFilter: // value for 'modulesInProgressFilter'
 *      modulesExpiredFilter: // value for 'modulesExpiredFilter'
 *      skillsChecklistsTodoFilter: // value for 'skillsChecklistsTodoFilter'
 *      skillsChecklistsDoneFilter: // value for 'skillsChecklistsDoneFilter'
 *      skillsChecklistsExpiredFilter: // value for 'skillsChecklistsExpiredFilter'
 *   },
 * });
 */
export function useGetUserAndGroupsOverviewAssignmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserAndGroupsOverviewAssignmentsQuery, GetUserAndGroupsOverviewAssignmentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserAndGroupsOverviewAssignmentsQuery, GetUserAndGroupsOverviewAssignmentsQueryVariables>(GetUserAndGroupsOverviewAssignmentsDocument, options);
      }
export function useGetUserAndGroupsOverviewAssignmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserAndGroupsOverviewAssignmentsQuery, GetUserAndGroupsOverviewAssignmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserAndGroupsOverviewAssignmentsQuery, GetUserAndGroupsOverviewAssignmentsQueryVariables>(GetUserAndGroupsOverviewAssignmentsDocument, options);
        }
export type GetUserAndGroupsOverviewAssignmentsQueryHookResult = ReturnType<typeof useGetUserAndGroupsOverviewAssignmentsQuery>;
export type GetUserAndGroupsOverviewAssignmentsLazyQueryHookResult = ReturnType<typeof useGetUserAndGroupsOverviewAssignmentsLazyQuery>;
export type GetUserAndGroupsOverviewAssignmentsQueryResult = Apollo.QueryResult<GetUserAndGroupsOverviewAssignmentsQuery, GetUserAndGroupsOverviewAssignmentsQueryVariables>;
export const GetRunningDataMigrationDocument = gql`
    query getRunningDataMigration {
  data_migrations(filter: {running: {_eq: true}}) {
    id
    import_portal_id
  }
}
    `;

/**
 * __useGetRunningDataMigrationQuery__
 *
 * To run a query within a React component, call `useGetRunningDataMigrationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRunningDataMigrationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRunningDataMigrationQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRunningDataMigrationQuery(baseOptions?: Apollo.QueryHookOptions<GetRunningDataMigrationQuery, GetRunningDataMigrationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRunningDataMigrationQuery, GetRunningDataMigrationQueryVariables>(GetRunningDataMigrationDocument, options);
      }
export function useGetRunningDataMigrationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRunningDataMigrationQuery, GetRunningDataMigrationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRunningDataMigrationQuery, GetRunningDataMigrationQueryVariables>(GetRunningDataMigrationDocument, options);
        }
export type GetRunningDataMigrationQueryHookResult = ReturnType<typeof useGetRunningDataMigrationQuery>;
export type GetRunningDataMigrationLazyQueryHookResult = ReturnType<typeof useGetRunningDataMigrationLazyQuery>;
export type GetRunningDataMigrationQueryResult = Apollo.QueryResult<GetRunningDataMigrationQuery, GetRunningDataMigrationQueryVariables>;
export const GetMigrationRecordsDocument = gql`
    query getMigrationRecords($filters: data_migration_records_filter) {
  data_migration_records(filter: $filters, sort: ["date_created"]) {
    id
    level
    message
  }
}
    `;

/**
 * __useGetMigrationRecordsQuery__
 *
 * To run a query within a React component, call `useGetMigrationRecordsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMigrationRecordsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMigrationRecordsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetMigrationRecordsQuery(baseOptions?: Apollo.QueryHookOptions<GetMigrationRecordsQuery, GetMigrationRecordsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMigrationRecordsQuery, GetMigrationRecordsQueryVariables>(GetMigrationRecordsDocument, options);
      }
export function useGetMigrationRecordsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMigrationRecordsQuery, GetMigrationRecordsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMigrationRecordsQuery, GetMigrationRecordsQueryVariables>(GetMigrationRecordsDocument, options);
        }
export type GetMigrationRecordsQueryHookResult = ReturnType<typeof useGetMigrationRecordsQuery>;
export type GetMigrationRecordsLazyQueryHookResult = ReturnType<typeof useGetMigrationRecordsLazyQuery>;
export type GetMigrationRecordsQueryResult = Apollo.QueryResult<GetMigrationRecordsQuery, GetMigrationRecordsQueryVariables>;
export const GetMappingsDocument = gql`
    query getMappings($filter: data_migration_mappings_filter, $limit: Int, $offset: Int) {
  data_migration_mappings(
    filter: $filter
    limit: $limit
    offset: $offset
    sort: "source_name"
  ) {
    ...mapping
  }
  data_migration_mappings_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    ${MappingFragmentDoc}`;

/**
 * __useGetMappingsQuery__
 *
 * To run a query within a React component, call `useGetMappingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMappingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMappingsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useGetMappingsQuery(baseOptions?: Apollo.QueryHookOptions<GetMappingsQuery, GetMappingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMappingsQuery, GetMappingsQueryVariables>(GetMappingsDocument, options);
      }
export function useGetMappingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMappingsQuery, GetMappingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMappingsQuery, GetMappingsQueryVariables>(GetMappingsDocument, options);
        }
export type GetMappingsQueryHookResult = ReturnType<typeof useGetMappingsQuery>;
export type GetMappingsLazyQueryHookResult = ReturnType<typeof useGetMappingsLazyQuery>;
export type GetMappingsQueryResult = Apollo.QueryResult<GetMappingsQuery, GetMappingsQueryVariables>;
export const GetMappedMappingsDocument = gql`
    query getMappedMappings($filter: data_migration_mappings_filter) {
  data_migration_mappings_aggregated(filter: $filter) {
    count {
      id
    }
  }
}
    `;

/**
 * __useGetMappedMappingsQuery__
 *
 * To run a query within a React component, call `useGetMappedMappingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMappedMappingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMappedMappingsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetMappedMappingsQuery(baseOptions?: Apollo.QueryHookOptions<GetMappedMappingsQuery, GetMappedMappingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMappedMappingsQuery, GetMappedMappingsQueryVariables>(GetMappedMappingsDocument, options);
      }
export function useGetMappedMappingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMappedMappingsQuery, GetMappedMappingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMappedMappingsQuery, GetMappedMappingsQueryVariables>(GetMappedMappingsDocument, options);
        }
export type GetMappedMappingsQueryHookResult = ReturnType<typeof useGetMappedMappingsQuery>;
export type GetMappedMappingsLazyQueryHookResult = ReturnType<typeof useGetMappedMappingsLazyQuery>;
export type GetMappedMappingsQueryResult = Apollo.QueryResult<GetMappedMappingsQuery, GetMappedMappingsQueryVariables>;
export const UpdateDataMappingItemDocument = gql`
    mutation updateDataMappingItem($id: ID!, $data: update_data_migration_mappings_input!) {
  update_data_migration_mappings_item(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateDataMappingItemMutationFn = Apollo.MutationFunction<UpdateDataMappingItemMutation, UpdateDataMappingItemMutationVariables>;

/**
 * __useUpdateDataMappingItemMutation__
 *
 * To run a mutation, you first call `useUpdateDataMappingItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDataMappingItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDataMappingItemMutation, { data, loading, error }] = useUpdateDataMappingItemMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDataMappingItemMutation(baseOptions?: Apollo.MutationHookOptions<UpdateDataMappingItemMutation, UpdateDataMappingItemMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateDataMappingItemMutation, UpdateDataMappingItemMutationVariables>(UpdateDataMappingItemDocument, options);
      }
export type UpdateDataMappingItemMutationHookResult = ReturnType<typeof useUpdateDataMappingItemMutation>;
export type UpdateDataMappingItemMutationResult = Apollo.MutationResult<UpdateDataMappingItemMutation>;
export type UpdateDataMappingItemMutationOptions = Apollo.BaseMutationOptions<UpdateDataMappingItemMutation, UpdateDataMappingItemMutationVariables>;
export const GetAllExistingContentForMappingsDocument = gql`
    query getAllExistingContentForMappings {
  exams(limit: -1, filter: {status: {_eq: "published"}}, sort: "title") {
    id
    title
    agencies {
      agencies_id {
        id
        name
      }
    }
  }
  modules_definition(
    limit: -1
    filter: {status: {_eq: "published"}}
    sort: "title"
  ) {
    id
    title
  }
  sc_definitions(limit: -1, filter: {status: {_eq: "published"}}, sort: "title") {
    id
    title
    agency {
      agencies_id {
        id
        name
      }
    }
  }
  policies(limit: -1, filter: {status: {_eq: "published"}}, sort: "name") {
    id
    name
    agencies {
      agencies_id {
        id
        name
      }
    }
  }
  documents(limit: -1, filter: {status: {_eq: "published"}}, sort: "title") {
    id
    title
    agencies {
      agencies_id {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useGetAllExistingContentForMappingsQuery__
 *
 * To run a query within a React component, call `useGetAllExistingContentForMappingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllExistingContentForMappingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllExistingContentForMappingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllExistingContentForMappingsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllExistingContentForMappingsQuery, GetAllExistingContentForMappingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllExistingContentForMappingsQuery, GetAllExistingContentForMappingsQueryVariables>(GetAllExistingContentForMappingsDocument, options);
      }
export function useGetAllExistingContentForMappingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllExistingContentForMappingsQuery, GetAllExistingContentForMappingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllExistingContentForMappingsQuery, GetAllExistingContentForMappingsQueryVariables>(GetAllExistingContentForMappingsDocument, options);
        }
export type GetAllExistingContentForMappingsQueryHookResult = ReturnType<typeof useGetAllExistingContentForMappingsQuery>;
export type GetAllExistingContentForMappingsLazyQueryHookResult = ReturnType<typeof useGetAllExistingContentForMappingsLazyQuery>;
export type GetAllExistingContentForMappingsQueryResult = Apollo.QueryResult<GetAllExistingContentForMappingsQuery, GetAllExistingContentForMappingsQueryVariables>;
export const SysUserByIdDocument = gql`
    query sysUserById($id: ID!) {
  users_by_id(id: $id) {
    id
    first_name
    last_name
    email
  }
}
    `;

/**
 * __useSysUserByIdQuery__
 *
 * To run a query within a React component, call `useSysUserByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysUserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysUserByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSysUserByIdQuery(baseOptions: Apollo.QueryHookOptions<SysUserByIdQuery, SysUserByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysUserByIdQuery, SysUserByIdQueryVariables>(SysUserByIdDocument, options);
      }
export function useSysUserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysUserByIdQuery, SysUserByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysUserByIdQuery, SysUserByIdQueryVariables>(SysUserByIdDocument, options);
        }
export type SysUserByIdQueryHookResult = ReturnType<typeof useSysUserByIdQuery>;
export type SysUserByIdLazyQueryHookResult = ReturnType<typeof useSysUserByIdLazyQuery>;
export type SysUserByIdQueryResult = Apollo.QueryResult<SysUserByIdQuery, SysUserByIdQueryVariables>;
export const GetAllMaintenanceWindowsDocument = gql`
    query getAllMaintenanceWindows {
  maintenance_windows(
    filter: {status: {_eq: "published"}, start_date_time: {_gte: "$NOW"}}
    sort: "start_date_time"
  ) {
    id
    start_date_time
  }
}
    `;

/**
 * __useGetAllMaintenanceWindowsQuery__
 *
 * To run a query within a React component, call `useGetAllMaintenanceWindowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllMaintenanceWindowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllMaintenanceWindowsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllMaintenanceWindowsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllMaintenanceWindowsQuery, GetAllMaintenanceWindowsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllMaintenanceWindowsQuery, GetAllMaintenanceWindowsQueryVariables>(GetAllMaintenanceWindowsDocument, options);
      }
export function useGetAllMaintenanceWindowsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllMaintenanceWindowsQuery, GetAllMaintenanceWindowsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllMaintenanceWindowsQuery, GetAllMaintenanceWindowsQueryVariables>(GetAllMaintenanceWindowsDocument, options);
        }
export type GetAllMaintenanceWindowsQueryHookResult = ReturnType<typeof useGetAllMaintenanceWindowsQuery>;
export type GetAllMaintenanceWindowsLazyQueryHookResult = ReturnType<typeof useGetAllMaintenanceWindowsLazyQuery>;
export type GetAllMaintenanceWindowsQueryResult = Apollo.QueryResult<GetAllMaintenanceWindowsQuery, GetAllMaintenanceWindowsQueryVariables>;
export const SysGetUserCrudCompetenciesDocument = gql`
    query sysGetUserCrudCompetencies($id: ID!, $agency: String!) {
  users_by_id(id: $id) {
    exams(
      limit: 1
      filter: {status: {_neq: "archived"}, agency: {id: {_eq: $agency}}}
    ) {
      exams_id {
        id
      }
    }
    modules(
      limit: 1
      filter: {status: {_neq: "archived"}, agency: {id: {_eq: $agency}}}
    ) {
      modules_definition_id {
        id
      }
    }
    documents(
      limit: 1
      filter: {status: {_neq: "archived"}, agency: {id: {_eq: $agency}}}
    ) {
      documents_id {
        id
      }
    }
    policies(
      limit: 1
      filter: {status: {_neq: "archived"}, agency: {id: {_eq: $agency}}}
    ) {
      policies_id {
        id
      }
    }
    sc_definitions(
      limit: 1
      filter: {status: {_neq: "archived"}, agency: {id: {_eq: $agency}}}
    ) {
      sc_definitions_id {
        id
      }
    }
  }
}
    `;

/**
 * __useSysGetUserCrudCompetenciesQuery__
 *
 * To run a query within a React component, call `useSysGetUserCrudCompetenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysGetUserCrudCompetenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysGetUserCrudCompetenciesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      agency: // value for 'agency'
 *   },
 * });
 */
export function useSysGetUserCrudCompetenciesQuery(baseOptions: Apollo.QueryHookOptions<SysGetUserCrudCompetenciesQuery, SysGetUserCrudCompetenciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SysGetUserCrudCompetenciesQuery, SysGetUserCrudCompetenciesQueryVariables>(SysGetUserCrudCompetenciesDocument, options);
      }
export function useSysGetUserCrudCompetenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SysGetUserCrudCompetenciesQuery, SysGetUserCrudCompetenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SysGetUserCrudCompetenciesQuery, SysGetUserCrudCompetenciesQueryVariables>(SysGetUserCrudCompetenciesDocument, options);
        }
export type SysGetUserCrudCompetenciesQueryHookResult = ReturnType<typeof useSysGetUserCrudCompetenciesQuery>;
export type SysGetUserCrudCompetenciesLazyQueryHookResult = ReturnType<typeof useSysGetUserCrudCompetenciesLazyQuery>;
export type SysGetUserCrudCompetenciesQueryResult = Apollo.QueryResult<SysGetUserCrudCompetenciesQuery, SysGetUserCrudCompetenciesQueryVariables>;
export const GetFeatureFlagsDocument = gql`
    query getFeatureFlags {
  feature_flags {
    id
    flag_key
    enabled
  }
}
    `;

/**
 * __useGetFeatureFlagsQuery__
 *
 * To run a query within a React component, call `useGetFeatureFlagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFeatureFlagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFeatureFlagsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFeatureFlagsQuery(baseOptions?: Apollo.QueryHookOptions<GetFeatureFlagsQuery, GetFeatureFlagsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFeatureFlagsQuery, GetFeatureFlagsQueryVariables>(GetFeatureFlagsDocument, options);
      }
export function useGetFeatureFlagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFeatureFlagsQuery, GetFeatureFlagsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFeatureFlagsQuery, GetFeatureFlagsQueryVariables>(GetFeatureFlagsDocument, options);
        }
export type GetFeatureFlagsQueryHookResult = ReturnType<typeof useGetFeatureFlagsQuery>;
export type GetFeatureFlagsLazyQueryHookResult = ReturnType<typeof useGetFeatureFlagsLazyQuery>;
export type GetFeatureFlagsQueryResult = Apollo.QueryResult<GetFeatureFlagsQuery, GetFeatureFlagsQueryVariables>;